generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Paper {
  id               Int      @id @default(autoincrement())
  trackingNumber   String   @unique
  authorEmail      String
  originalFileName String
  status           String
  filePath         String?
  submitDate       DateTime @default(now())

  category String

  feedback      String?
  feedbackScore Int? // 100/100
  reviewer     String?
  reviewDate    DateTime?
}

// model PaperData {
//   id      String @id @default(cuid())
//   content String @db.Text // Use TEXT type for large strings
//   type    String

//   trackingNumber String
// }

model Message {
  id       Int    @id @default(autoincrement())
  sender   String
  receiver String
  message  String

  createdAt DateTime @default(now())
}

model Log {
  id        Int      @id @default(autoincrement())
  action    String
  actor     String
  target    String
  createdAt DateTime @default(now())
}

// model Reviewer {
//   // 5 hakem
//   id              Int    @id @default(autoincrement())
//   name            String
//   email           String @unique
//   fieldOfInterest String

//   createdAt DateTime @default(now())
// }

// model Paper {
//   id               Int      @id @default(autoincrement())
//   trackingNumber   String   @unique
//   authorEmail      String
//   originalFileName String
//   status           String
//   filePath         String?
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
//   author           User     @relation(fields: [authorEmail], references: [email])
//   reviews          Review[]
// }

// model Review {
//   id         Int      @id @default(autoincrement())
//   paperId    Int
//   reviewerId Int
//   comments   String
//   rating     Int
//   reviewedAt DateTime @default(now())
//   paper      Paper    @relation(fields: [paperId], references: [id])
//   reviewer   User     @relation(fields: [reviewerId], references: [id])
// }
