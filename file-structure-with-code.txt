File Structure:
├── .env
├── app /
│   ├── admin /
│   │   └── page.tsx
│   ├── api /
│   │   ├── categorize /
│   │   │   └── route.ts
│   │   ├── decrypt /
│   │   │   └── route.ts
│   │   ├── list-pdfs /
│   │   │   └── route.ts
│   │   ├── list-processed /
│   │   │   └── route.ts
│   │   ├── list-reviewed /
│   │   │   └── route.ts
│   │   ├── logs /
│   │   │   └── route.ts
│   │   ├── messages /
│   │   │   ├── route.ts
│   │   │   └── users /
│   │   │       └── route.ts
│   │   ├── paperData /
│   │   │   ├── route.ts
│   │   │   └── [id] /
│   │   │       └── route.ts
│   │   ├── paperStatus /
│   │   │   └── route.ts
│   │   ├── pdfs /
│   │   │   ├── decrypted /
│   │   │   │   └── [filename] /
│   │   │   │       └── route.ts
│   │   │   └── processed /
│   │   │       └── [filename] /
│   │   │           └── route.ts
│   │   ├── PDFupload /
│   │   │   └── route.ts
│   │   ├── process-pdf /
│   │   │   └── route.ts
│   │   ├── review /
│   │   │   └── route.ts
│   │   ├── upload /
│   │   │   └── route.ts
│   │   ├── upload-pdf /
│   │   │   └── route.ts
│   │   └── users /
│   │       └── route.ts
│   ├── favicon.ico
│   ├── globals.css
│   ├── layout.tsx
│   ├── log /
│   │   └── page.tsx
│   ├── manager /
│   │   └── page.tsx
│   ├── page.tsx
│   ├── pdfer /
│   │   └── page.tsx
│   ├── reviewer /
│   │   └── page.tsx
│   └── track /
│       └── page.tsx
├── components /
│   ├── chat-section.tsx
│   ├── ChatComponent.tsx
│   ├── file-upload.tsx
│   ├── PdfAnonymizerComponent.tsx
│   ├── PdfDecrypterComponent.tsx
│   ├── track-section.tsx
│   ├── ui /
│   │   ├── alert.tsx
│   │   ├── avatar.tsx
│   │   ├── badge.tsx
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── checkbox.tsx
│   │   ├── dialog.tsx
│   │   ├── input.tsx
│   │   ├── label.tsx
│   │   ├── scroll-area.tsx
│   │   ├── select.tsx
│   │   ├── switch.tsx
│   │   ├── table.tsx
│   │   ├── tabs.tsx
│   │   └── textarea.tsx
│   └── upload-section.tsx
├── components.json
├── eslint.config.mjs
├── export-structure.js
├── fastapiRouter /
│   ├── addDecryptedInfo.py
│   ├── categorize.py
│   ├── decrypt.py
│   ├── review.py
│   └── __pycache__ /
│       ├── addDecryptedInfo.cpython-311.pyc
│       ├── add_decrypted_info.cpython-311.pyc
│       ├── categorize.cpython-311.pyc
│       ├── decrypt.cpython-311.pyc
│       ├── review.cpython-311.pyc
│       └── test.cpython-311.pyc
├── lib /
│   ├── crypto.ts
│   ├── prisma.ts
│   └── utils.ts
├── main.py
├── next-env.d.ts
├── next.config.ts
├── package-lock.json
├── package.json
├── pdfs /
│   ├── decrypted /
│   ├── processed /
│   └── reviewed /
├── postcss.config.mjs
├── prisma /
│   └── schema.prisma
├── public /
│   ├── file.svg
│   ├── globe.svg
│   ├── next.svg
│   ├── vercel.svg
│   └── window.svg
├── README.md
├── requirements.txt
├── tsconfig.json
├── venv /
│   ├── Include /
│   ├── Lib /
│   │   └── site-packages /
│   │       ├── anyio /
│   │       │   ├── abc /
│   │       │   │   ├── _eventloop.py
│   │       │   │   ├── _resources.py
│   │       │   │   ├── _sockets.py
│   │       │   │   ├── _streams.py
│   │       │   │   ├── _subprocesses.py
│   │       │   │   ├── _tasks.py
│   │       │   │   ├── _testing.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── _eventloop.cpython-311.pyc
│   │       │   │       ├── _resources.cpython-311.pyc
│   │       │   │       ├── _sockets.cpython-311.pyc
│   │       │   │       ├── _streams.cpython-311.pyc
│   │       │   │       ├── _subprocesses.cpython-311.pyc
│   │       │   │       ├── _tasks.cpython-311.pyc
│   │       │   │       ├── _testing.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── from_thread.py
│   │       │   ├── lowlevel.py
│   │       │   ├── py.typed
│   │       │   ├── pytest_plugin.py
│   │       │   ├── streams /
│   │       │   │   ├── buffered.py
│   │       │   │   ├── file.py
│   │       │   │   ├── memory.py
│   │       │   │   ├── stapled.py
│   │       │   │   ├── text.py
│   │       │   │   ├── tls.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── buffered.cpython-311.pyc
│   │       │   │       ├── file.cpython-311.pyc
│   │       │   │       ├── memory.cpython-311.pyc
│   │       │   │       ├── stapled.cpython-311.pyc
│   │       │   │       ├── text.cpython-311.pyc
│   │       │   │       ├── tls.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── to_interpreter.py
│   │       │   ├── to_process.py
│   │       │   ├── to_thread.py
│   │       │   ├── _backends /
│   │       │   │   ├── _asyncio.py
│   │       │   │   ├── _trio.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── _asyncio.cpython-311.pyc
│   │       │   │       ├── _trio.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _core /
│   │       │   │   ├── _asyncio_selector_thread.py
│   │       │   │   ├── _eventloop.py
│   │       │   │   ├── _exceptions.py
│   │       │   │   ├── _fileio.py
│   │       │   │   ├── _resources.py
│   │       │   │   ├── _signals.py
│   │       │   │   ├── _sockets.py
│   │       │   │   ├── _streams.py
│   │       │   │   ├── _subprocesses.py
│   │       │   │   ├── _synchronization.py
│   │       │   │   ├── _tasks.py
│   │       │   │   ├── _testing.py
│   │       │   │   ├── _typedattr.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── _asyncio_selector_thread.cpython-311.pyc
│   │       │   │       ├── _eventloop.cpython-311.pyc
│   │       │   │       ├── _exceptions.cpython-311.pyc
│   │       │   │       ├── _fileio.cpython-311.pyc
│   │       │   │       ├── _resources.cpython-311.pyc
│   │       │   │       ├── _signals.cpython-311.pyc
│   │       │   │       ├── _sockets.cpython-311.pyc
│   │       │   │       ├── _streams.cpython-311.pyc
│   │       │   │       ├── _subprocesses.cpython-311.pyc
│   │       │   │       ├── _synchronization.cpython-311.pyc
│   │       │   │       ├── _tasks.cpython-311.pyc
│   │       │   │       ├── _testing.cpython-311.pyc
│   │       │   │       ├── _typedattr.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── from_thread.cpython-311.pyc
│   │       │       ├── lowlevel.cpython-311.pyc
│   │       │       ├── pytest_plugin.cpython-311.pyc
│   │       │       ├── to_interpreter.cpython-311.pyc
│   │       │       ├── to_process.cpython-311.pyc
│   │       │       ├── to_thread.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── anyio-4.8.0.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── cffi /
│   │       │   ├── api.py
│   │       │   ├── backend_ctypes.py
│   │       │   ├── cffi_opcode.py
│   │       │   ├── commontypes.py
│   │       │   ├── cparser.py
│   │       │   ├── error.py
│   │       │   ├── ffiplatform.py
│   │       │   ├── lock.py
│   │       │   ├── model.py
│   │       │   ├── parse_c_type.h
│   │       │   ├── pkgconfig.py
│   │       │   ├── recompiler.py
│   │       │   ├── setuptools_ext.py
│   │       │   ├── vengine_cpy.py
│   │       │   ├── vengine_gen.py
│   │       │   ├── verifier.py
│   │       │   ├── _cffi_errors.h
│   │       │   ├── _cffi_include.h
│   │       │   ├── _embedding.h
│   │       │   ├── _imp_emulation.py
│   │       │   ├── _shimmed_dist_utils.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── api.cpython-311.pyc
│   │       │       ├── backend_ctypes.cpython-311.pyc
│   │       │       ├── cffi_opcode.cpython-311.pyc
│   │       │       ├── commontypes.cpython-311.pyc
│   │       │       ├── cparser.cpython-311.pyc
│   │       │       ├── error.cpython-311.pyc
│   │       │       ├── ffiplatform.cpython-311.pyc
│   │       │       ├── lock.cpython-311.pyc
│   │       │       ├── model.cpython-311.pyc
│   │       │       ├── pkgconfig.cpython-311.pyc
│   │       │       ├── recompiler.cpython-311.pyc
│   │       │       ├── setuptools_ext.cpython-311.pyc
│   │       │       ├── vengine_cpy.cpython-311.pyc
│   │       │       ├── vengine_gen.cpython-311.pyc
│   │       │       ├── verifier.cpython-311.pyc
│   │       │       ├── _imp_emulation.cpython-311.pyc
│   │       │       ├── _shimmed_dist_utils.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── cffi-1.17.1.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── chardet /
│   │       │   ├── big5freq.py
│   │       │   ├── big5prober.py
│   │       │   ├── chardistribution.py
│   │       │   ├── charsetgroupprober.py
│   │       │   ├── charsetprober.py
│   │       │   ├── cli /
│   │       │   │   ├── chardetect.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── chardetect.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── codingstatemachine.py
│   │       │   ├── codingstatemachinedict.py
│   │       │   ├── cp949prober.py
│   │       │   ├── enums.py
│   │       │   ├── escprober.py
│   │       │   ├── escsm.py
│   │       │   ├── eucjpprober.py
│   │       │   ├── euckrfreq.py
│   │       │   ├── euckrprober.py
│   │       │   ├── euctwfreq.py
│   │       │   ├── euctwprober.py
│   │       │   ├── gb2312freq.py
│   │       │   ├── gb2312prober.py
│   │       │   ├── hebrewprober.py
│   │       │   ├── jisfreq.py
│   │       │   ├── johabfreq.py
│   │       │   ├── johabprober.py
│   │       │   ├── jpcntx.py
│   │       │   ├── langbulgarianmodel.py
│   │       │   ├── langgreekmodel.py
│   │       │   ├── langhebrewmodel.py
│   │       │   ├── langhungarianmodel.py
│   │       │   ├── langrussianmodel.py
│   │       │   ├── langthaimodel.py
│   │       │   ├── langturkishmodel.py
│   │       │   ├── latin1prober.py
│   │       │   ├── macromanprober.py
│   │       │   ├── mbcharsetprober.py
│   │       │   ├── mbcsgroupprober.py
│   │       │   ├── mbcssm.py
│   │       │   ├── metadata /
│   │       │   │   ├── languages.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── languages.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── py.typed
│   │       │   ├── resultdict.py
│   │       │   ├── sbcharsetprober.py
│   │       │   ├── sbcsgroupprober.py
│   │       │   ├── sjisprober.py
│   │       │   ├── universaldetector.py
│   │       │   ├── utf1632prober.py
│   │       │   ├── utf8prober.py
│   │       │   ├── version.py
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   └── __pycache__ /
│   │       │       ├── big5freq.cpython-311.pyc
│   │       │       ├── big5prober.cpython-311.pyc
│   │       │       ├── chardistribution.cpython-311.pyc
│   │       │       ├── charsetgroupprober.cpython-311.pyc
│   │       │       ├── charsetprober.cpython-311.pyc
│   │       │       ├── codingstatemachine.cpython-311.pyc
│   │       │       ├── codingstatemachinedict.cpython-311.pyc
│   │       │       ├── cp949prober.cpython-311.pyc
│   │       │       ├── enums.cpython-311.pyc
│   │       │       ├── escprober.cpython-311.pyc
│   │       │       ├── escsm.cpython-311.pyc
│   │       │       ├── eucjpprober.cpython-311.pyc
│   │       │       ├── euckrfreq.cpython-311.pyc
│   │       │       ├── euckrprober.cpython-311.pyc
│   │       │       ├── euctwfreq.cpython-311.pyc
│   │       │       ├── euctwprober.cpython-311.pyc
│   │       │       ├── gb2312freq.cpython-311.pyc
│   │       │       ├── gb2312prober.cpython-311.pyc
│   │       │       ├── hebrewprober.cpython-311.pyc
│   │       │       ├── jisfreq.cpython-311.pyc
│   │       │       ├── johabfreq.cpython-311.pyc
│   │       │       ├── johabprober.cpython-311.pyc
│   │       │       ├── jpcntx.cpython-311.pyc
│   │       │       ├── langbulgarianmodel.cpython-311.pyc
│   │       │       ├── langgreekmodel.cpython-311.pyc
│   │       │       ├── langhebrewmodel.cpython-311.pyc
│   │       │       ├── langhungarianmodel.cpython-311.pyc
│   │       │       ├── langrussianmodel.cpython-311.pyc
│   │       │       ├── langthaimodel.cpython-311.pyc
│   │       │       ├── langturkishmodel.cpython-311.pyc
│   │       │       ├── latin1prober.cpython-311.pyc
│   │       │       ├── macromanprober.cpython-311.pyc
│   │       │       ├── mbcharsetprober.cpython-311.pyc
│   │       │       ├── mbcsgroupprober.cpython-311.pyc
│   │       │       ├── mbcssm.cpython-311.pyc
│   │       │       ├── resultdict.cpython-311.pyc
│   │       │       ├── sbcharsetprober.cpython-311.pyc
│   │       │       ├── sbcsgroupprober.cpython-311.pyc
│   │       │       ├── sjisprober.cpython-311.pyc
│   │       │       ├── universaldetector.cpython-311.pyc
│   │       │       ├── utf1632prober.cpython-311.pyc
│   │       │       ├── utf8prober.cpython-311.pyc
│   │       │       ├── version.cpython-311.pyc
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       └── __main__.cpython-311.pyc
│   │       ├── chardet-5.2.0.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── click /
│   │       │   ├── core.py
│   │       │   ├── decorators.py
│   │       │   ├── exceptions.py
│   │       │   ├── formatting.py
│   │       │   ├── globals.py
│   │       │   ├── parser.py
│   │       │   ├── py.typed
│   │       │   ├── shell_completion.py
│   │       │   ├── termui.py
│   │       │   ├── testing.py
│   │       │   ├── types.py
│   │       │   ├── utils.py
│   │       │   ├── _compat.py
│   │       │   ├── _termui_impl.py
│   │       │   ├── _textwrap.py
│   │       │   ├── _winconsole.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── core.cpython-311.pyc
│   │       │       ├── decorators.cpython-311.pyc
│   │       │       ├── exceptions.cpython-311.pyc
│   │       │       ├── formatting.cpython-311.pyc
│   │       │       ├── globals.cpython-311.pyc
│   │       │       ├── parser.cpython-311.pyc
│   │       │       ├── shell_completion.cpython-311.pyc
│   │       │       ├── termui.cpython-311.pyc
│   │       │       ├── testing.cpython-311.pyc
│   │       │       ├── types.cpython-311.pyc
│   │       │       ├── utils.cpython-311.pyc
│   │       │       ├── _compat.cpython-311.pyc
│   │       │       ├── _termui_impl.cpython-311.pyc
│   │       │       ├── _textwrap.cpython-311.pyc
│   │       │       ├── _winconsole.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── click-8.1.8.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE.txt
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   └── WHEEL
│   │       ├── colorama /
│   │       │   ├── ansi.py
│   │       │   ├── ansitowin32.py
│   │       │   ├── initialise.py
│   │       │   ├── tests /
│   │       │   │   ├── ansitowin32_test.py
│   │       │   │   ├── ansi_test.py
│   │       │   │   ├── initialise_test.py
│   │       │   │   ├── isatty_test.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── winterm_test.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── ansitowin32_test.cpython-311.pyc
│   │       │   │       ├── ansi_test.cpython-311.pyc
│   │       │   │       ├── initialise_test.cpython-311.pyc
│   │       │   │       ├── isatty_test.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       ├── winterm_test.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── win32.py
│   │       │   ├── winterm.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── ansi.cpython-311.pyc
│   │       │       ├── ansitowin32.cpython-311.pyc
│   │       │       ├── initialise.cpython-311.pyc
│   │       │       ├── win32.cpython-311.pyc
│   │       │       ├── winterm.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── colorama-0.4.6.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── licenses /
│   │       │   │   └── LICENSE.txt
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   └── WHEEL
│   │       ├── cryptography /
│   │       │   ├── exceptions.py
│   │       │   ├── fernet.py
│   │       │   ├── hazmat /
│   │       │   │   ├── backends /
│   │       │   │   │   ├── openssl /
│   │       │   │   │   │   ├── backend.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── backend.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── bindings /
│   │       │   │   │   ├── openssl /
│   │       │   │   │   │   ├── binding.py
│   │       │   │   │   │   ├── _conditional.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── binding.cpython-311.pyc
│   │       │   │   │   │       ├── _conditional.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── _rust /
│   │       │   │   │   │   ├── asn1.pyi
│   │       │   │   │   │   ├── exceptions.pyi
│   │       │   │   │   │   ├── ocsp.pyi
│   │       │   │   │   │   ├── openssl /
│   │       │   │   │   │   │   ├── aead.pyi
│   │       │   │   │   │   │   ├── ciphers.pyi
│   │       │   │   │   │   │   ├── cmac.pyi
│   │       │   │   │   │   │   ├── dh.pyi
│   │       │   │   │   │   │   ├── dsa.pyi
│   │       │   │   │   │   │   ├── ec.pyi
│   │       │   │   │   │   │   ├── ed25519.pyi
│   │       │   │   │   │   │   ├── ed448.pyi
│   │       │   │   │   │   │   ├── hashes.pyi
│   │       │   │   │   │   │   ├── hmac.pyi
│   │       │   │   │   │   │   ├── kdf.pyi
│   │       │   │   │   │   │   ├── keys.pyi
│   │       │   │   │   │   │   ├── poly1305.pyi
│   │       │   │   │   │   │   ├── rsa.pyi
│   │       │   │   │   │   │   ├── x25519.pyi
│   │       │   │   │   │   │   ├── x448.pyi
│   │       │   │   │   │   │   └── __init__.pyi
│   │       │   │   │   │   ├── pkcs12.pyi
│   │       │   │   │   │   ├── pkcs7.pyi
│   │       │   │   │   │   ├── test_support.pyi
│   │       │   │   │   │   ├── x509.pyi
│   │       │   │   │   │   ├── _openssl.pyi
│   │       │   │   │   │   └── __init__.pyi
│   │       │   │   │   ├── _rust.pyd
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── decrepit /
│   │       │   │   │   ├── ciphers /
│   │       │   │   │   │   ├── algorithms.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── algorithms.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── primitives /
│   │       │   │   │   ├── asymmetric /
│   │       │   │   │   │   ├── dh.py
│   │       │   │   │   │   ├── dsa.py
│   │       │   │   │   │   ├── ec.py
│   │       │   │   │   │   ├── ed25519.py
│   │       │   │   │   │   ├── ed448.py
│   │       │   │   │   │   ├── padding.py
│   │       │   │   │   │   ├── rsa.py
│   │       │   │   │   │   ├── types.py
│   │       │   │   │   │   ├── utils.py
│   │       │   │   │   │   ├── x25519.py
│   │       │   │   │   │   ├── x448.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── dh.cpython-311.pyc
│   │       │   │   │   │       ├── dsa.cpython-311.pyc
│   │       │   │   │   │       ├── ec.cpython-311.pyc
│   │       │   │   │   │       ├── ed25519.cpython-311.pyc
│   │       │   │   │   │       ├── ed448.cpython-311.pyc
│   │       │   │   │   │       ├── padding.cpython-311.pyc
│   │       │   │   │   │       ├── rsa.cpython-311.pyc
│   │       │   │   │   │       ├── types.cpython-311.pyc
│   │       │   │   │   │       ├── utils.cpython-311.pyc
│   │       │   │   │   │       ├── x25519.cpython-311.pyc
│   │       │   │   │   │       ├── x448.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── ciphers /
│   │       │   │   │   │   ├── aead.py
│   │       │   │   │   │   ├── algorithms.py
│   │       │   │   │   │   ├── base.py
│   │       │   │   │   │   ├── modes.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── aead.cpython-311.pyc
│   │       │   │   │   │       ├── algorithms.cpython-311.pyc
│   │       │   │   │   │       ├── base.cpython-311.pyc
│   │       │   │   │   │       ├── modes.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── cmac.py
│   │       │   │   │   ├── constant_time.py
│   │       │   │   │   ├── hashes.py
│   │       │   │   │   ├── hmac.py
│   │       │   │   │   ├── kdf /
│   │       │   │   │   │   ├── argon2.py
│   │       │   │   │   │   ├── concatkdf.py
│   │       │   │   │   │   ├── hkdf.py
│   │       │   │   │   │   ├── kbkdf.py
│   │       │   │   │   │   ├── pbkdf2.py
│   │       │   │   │   │   ├── scrypt.py
│   │       │   │   │   │   ├── x963kdf.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── argon2.cpython-311.pyc
│   │       │   │   │   │       ├── concatkdf.cpython-311.pyc
│   │       │   │   │   │       ├── hkdf.cpython-311.pyc
│   │       │   │   │   │       ├── kbkdf.cpython-311.pyc
│   │       │   │   │   │       ├── pbkdf2.cpython-311.pyc
│   │       │   │   │   │       ├── scrypt.cpython-311.pyc
│   │       │   │   │   │       ├── x963kdf.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── keywrap.py
│   │       │   │   │   ├── padding.py
│   │       │   │   │   ├── poly1305.py
│   │       │   │   │   ├── serialization /
│   │       │   │   │   │   ├── base.py
│   │       │   │   │   │   ├── pkcs12.py
│   │       │   │   │   │   ├── pkcs7.py
│   │       │   │   │   │   ├── ssh.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── base.cpython-311.pyc
│   │       │   │   │   │       ├── pkcs12.cpython-311.pyc
│   │       │   │   │   │       ├── pkcs7.cpython-311.pyc
│   │       │   │   │   │       ├── ssh.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── twofactor /
│   │       │   │   │   │   ├── hotp.py
│   │       │   │   │   │   ├── totp.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── hotp.cpython-311.pyc
│   │       │   │   │   │       ├── totp.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── _asymmetric.py
│   │       │   │   │   ├── _cipheralgorithm.py
│   │       │   │   │   ├── _serialization.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── cmac.cpython-311.pyc
│   │       │   │   │       ├── constant_time.cpython-311.pyc
│   │       │   │   │       ├── hashes.cpython-311.pyc
│   │       │   │   │       ├── hmac.cpython-311.pyc
│   │       │   │   │       ├── keywrap.cpython-311.pyc
│   │       │   │   │       ├── padding.cpython-311.pyc
│   │       │   │   │       ├── poly1305.cpython-311.pyc
│   │       │   │   │       ├── _asymmetric.cpython-311.pyc
│   │       │   │   │       ├── _cipheralgorithm.cpython-311.pyc
│   │       │   │   │       ├── _serialization.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── _oid.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── _oid.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── py.typed
│   │       │   ├── utils.py
│   │       │   ├── x509 /
│   │       │   │   ├── base.py
│   │       │   │   ├── certificate_transparency.py
│   │       │   │   ├── extensions.py
│   │       │   │   ├── general_name.py
│   │       │   │   ├── name.py
│   │       │   │   ├── ocsp.py
│   │       │   │   ├── oid.py
│   │       │   │   ├── verification.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── base.cpython-311.pyc
│   │       │   │       ├── certificate_transparency.cpython-311.pyc
│   │       │   │       ├── extensions.cpython-311.pyc
│   │       │   │       ├── general_name.cpython-311.pyc
│   │       │   │       ├── name.cpython-311.pyc
│   │       │   │       ├── ocsp.cpython-311.pyc
│   │       │   │       ├── oid.cpython-311.pyc
│   │       │   │       ├── verification.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── __about__.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── exceptions.cpython-311.pyc
│   │       │       ├── fernet.cpython-311.pyc
│   │       │       ├── utils.cpython-311.pyc
│   │       │       ├── __about__.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── cryptography-44.0.2.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── licenses /
│   │       │   │   ├── LICENSE
│   │       │   │   ├── LICENSE.APACHE
│   │       │   │   └── LICENSE.BSD
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   └── WHEEL
│   │       ├── distutils-precedence.pth
│   │       ├── dotenv /
│   │       │   ├── cli.py
│   │       │   ├── ipython.py
│   │       │   ├── main.py
│   │       │   ├── parser.py
│   │       │   ├── py.typed
│   │       │   ├── variables.py
│   │       │   ├── version.py
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   └── __pycache__ /
│   │       │       ├── cli.cpython-311.pyc
│   │       │       ├── ipython.cpython-311.pyc
│   │       │       ├── main.cpython-311.pyc
│   │       │       ├── parser.cpython-311.pyc
│   │       │       ├── variables.cpython-311.pyc
│   │       │       ├── version.cpython-311.pyc
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       └── __main__.cpython-311.pyc
│   │       ├── fastapi /
│   │       │   ├── applications.py
│   │       │   ├── background.py
│   │       │   ├── concurrency.py
│   │       │   ├── datastructures.py
│   │       │   ├── dependencies /
│   │       │   │   ├── models.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── models.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── encoders.py
│   │       │   ├── exceptions.py
│   │       │   ├── exception_handlers.py
│   │       │   ├── logger.py
│   │       │   ├── middleware /
│   │       │   │   ├── asyncexitstack.py
│   │       │   │   ├── cors.py
│   │       │   │   ├── gzip.py
│   │       │   │   ├── httpsredirect.py
│   │       │   │   ├── trustedhost.py
│   │       │   │   ├── wsgi.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── asyncexitstack.cpython-311.pyc
│   │       │   │       ├── cors.cpython-311.pyc
│   │       │   │       ├── gzip.cpython-311.pyc
│   │       │   │       ├── httpsredirect.cpython-311.pyc
│   │       │   │       ├── trustedhost.cpython-311.pyc
│   │       │   │       ├── wsgi.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── openapi /
│   │       │   │   ├── constants.py
│   │       │   │   ├── docs.py
│   │       │   │   ├── models.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── constants.cpython-311.pyc
│   │       │   │       ├── docs.cpython-311.pyc
│   │       │   │       ├── models.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── params.py
│   │       │   ├── param_functions.py
│   │       │   ├── py.typed
│   │       │   ├── requests.py
│   │       │   ├── responses.py
│   │       │   ├── routing.py
│   │       │   ├── security /
│   │       │   │   ├── api_key.py
│   │       │   │   ├── base.py
│   │       │   │   ├── http.py
│   │       │   │   ├── oauth2.py
│   │       │   │   ├── open_id_connect_url.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── api_key.cpython-311.pyc
│   │       │   │       ├── base.cpython-311.pyc
│   │       │   │       ├── http.cpython-311.pyc
│   │       │   │       ├── oauth2.cpython-311.pyc
│   │       │   │       ├── open_id_connect_url.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── staticfiles.py
│   │       │   ├── templating.py
│   │       │   ├── testclient.py
│   │       │   ├── types.py
│   │       │   ├── utils.py
│   │       │   ├── websockets.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── applications.cpython-311.pyc
│   │       │       ├── background.cpython-311.pyc
│   │       │       ├── concurrency.cpython-311.pyc
│   │       │       ├── datastructures.cpython-311.pyc
│   │       │       ├── encoders.cpython-311.pyc
│   │       │       ├── exceptions.cpython-311.pyc
│   │       │       ├── exception_handlers.cpython-311.pyc
│   │       │       ├── logger.cpython-311.pyc
│   │       │       ├── params.cpython-311.pyc
│   │       │       ├── param_functions.cpython-311.pyc
│   │       │       ├── requests.cpython-311.pyc
│   │       │       ├── responses.cpython-311.pyc
│   │       │       ├── routing.cpython-311.pyc
│   │       │       ├── staticfiles.cpython-311.pyc
│   │       │       ├── templating.cpython-311.pyc
│   │       │       ├── testclient.cpython-311.pyc
│   │       │       ├── types.cpython-311.pyc
│   │       │       ├── utils.cpython-311.pyc
│   │       │       ├── websockets.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── fastapi-0.95.2.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── licenses /
│   │       │   │   └── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   └── WHEEL
│   │       ├── fitz /
│   │       │   ├── table.py
│   │       │   ├── utils.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── table.cpython-311.pyc
│   │       │       ├── utils.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── h11 /
│   │       │   ├── py.typed
│   │       │   ├── tests /
│   │       │   │   ├── data /
│   │       │   │   │   └── test-file
│   │       │   │   ├── helpers.py
│   │       │   │   ├── test_against_stdlib_http.py
│   │       │   │   ├── test_connection.py
│   │       │   │   ├── test_events.py
│   │       │   │   ├── test_headers.py
│   │       │   │   ├── test_helpers.py
│   │       │   │   ├── test_io.py
│   │       │   │   ├── test_receivebuffer.py
│   │       │   │   ├── test_state.py
│   │       │   │   ├── test_util.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── helpers.cpython-311.pyc
│   │       │   │       ├── test_against_stdlib_http.cpython-311.pyc
│   │       │   │       ├── test_connection.cpython-311.pyc
│   │       │   │       ├── test_events.cpython-311.pyc
│   │       │   │       ├── test_headers.cpython-311.pyc
│   │       │   │       ├── test_helpers.cpython-311.pyc
│   │       │   │       ├── test_io.cpython-311.pyc
│   │       │   │       ├── test_receivebuffer.cpython-311.pyc
│   │       │   │       ├── test_state.cpython-311.pyc
│   │       │   │       ├── test_util.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _abnf.py
│   │       │   ├── _connection.py
│   │       │   ├── _events.py
│   │       │   ├── _headers.py
│   │       │   ├── _readers.py
│   │       │   ├── _receivebuffer.py
│   │       │   ├── _state.py
│   │       │   ├── _util.py
│   │       │   ├── _version.py
│   │       │   ├── _writers.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── _abnf.cpython-311.pyc
│   │       │       ├── _connection.cpython-311.pyc
│   │       │       ├── _events.cpython-311.pyc
│   │       │       ├── _headers.cpython-311.pyc
│   │       │       ├── _readers.cpython-311.pyc
│   │       │       ├── _receivebuffer.cpython-311.pyc
│   │       │       ├── _state.cpython-311.pyc
│   │       │       ├── _util.cpython-311.pyc
│   │       │       ├── _version.cpython-311.pyc
│   │       │       ├── _writers.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── h11-0.14.0.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE.txt
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── httptools /
│   │       │   ├── parser /
│   │       │   │   ├── cparser.pxd
│   │       │   │   ├── errors.py
│   │       │   │   ├── parser.cp311-win_amd64.pyd
│   │       │   │   ├── parser.pyx
│   │       │   │   ├── python.pxd
│   │       │   │   ├── url_cparser.pxd
│   │       │   │   ├── url_parser.cp311-win_amd64.pyd
│   │       │   │   ├── url_parser.pyx
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── errors.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _version.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── _version.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── httptools-0.6.4.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── idna /
│   │       │   ├── codec.py
│   │       │   ├── compat.py
│   │       │   ├── core.py
│   │       │   ├── idnadata.py
│   │       │   ├── intranges.py
│   │       │   ├── package_data.py
│   │       │   ├── py.typed
│   │       │   ├── uts46data.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── codec.cpython-311.pyc
│   │       │       ├── compat.cpython-311.pyc
│   │       │       ├── core.cpython-311.pyc
│   │       │       ├── idnadata.cpython-311.pyc
│   │       │       ├── intranges.cpython-311.pyc
│   │       │       ├── package_data.cpython-311.pyc
│   │       │       ├── uts46data.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── idna-3.10.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE.md
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   └── WHEEL
│   │       ├── multipart /
│   │       │   ├── decoders.py
│   │       │   ├── exceptions.py
│   │       │   ├── multipart.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── decoders.cpython-311.pyc
│   │       │       ├── exceptions.cpython-311.pyc
│   │       │       ├── multipart.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── PIL /
│   │       │   ├── BdfFontFile.py
│   │       │   ├── BlpImagePlugin.py
│   │       │   ├── BmpImagePlugin.py
│   │       │   ├── BufrStubImagePlugin.py
│   │       │   ├── ContainerIO.py
│   │       │   ├── CurImagePlugin.py
│   │       │   ├── DcxImagePlugin.py
│   │       │   ├── DdsImagePlugin.py
│   │       │   ├── EpsImagePlugin.py
│   │       │   ├── ExifTags.py
│   │       │   ├── features.py
│   │       │   ├── FitsImagePlugin.py
│   │       │   ├── FliImagePlugin.py
│   │       │   ├── FontFile.py
│   │       │   ├── FpxImagePlugin.py
│   │       │   ├── FtexImagePlugin.py
│   │       │   ├── GbrImagePlugin.py
│   │       │   ├── GdImageFile.py
│   │       │   ├── GifImagePlugin.py
│   │       │   ├── GimpGradientFile.py
│   │       │   ├── GimpPaletteFile.py
│   │       │   ├── GribStubImagePlugin.py
│   │       │   ├── Hdf5StubImagePlugin.py
│   │       │   ├── IcnsImagePlugin.py
│   │       │   ├── IcoImagePlugin.py
│   │       │   ├── Image.py
│   │       │   ├── ImageChops.py
│   │       │   ├── ImageCms.py
│   │       │   ├── ImageColor.py
│   │       │   ├── ImageDraw.py
│   │       │   ├── ImageDraw2.py
│   │       │   ├── ImageEnhance.py
│   │       │   ├── ImageFile.py
│   │       │   ├── ImageFilter.py
│   │       │   ├── ImageFont.py
│   │       │   ├── ImageGrab.py
│   │       │   ├── ImageMath.py
│   │       │   ├── ImageMode.py
│   │       │   ├── ImageMorph.py
│   │       │   ├── ImageOps.py
│   │       │   ├── ImagePalette.py
│   │       │   ├── ImagePath.py
│   │       │   ├── ImageQt.py
│   │       │   ├── ImageSequence.py
│   │       │   ├── ImageShow.py
│   │       │   ├── ImageStat.py
│   │       │   ├── ImageTk.py
│   │       │   ├── ImageTransform.py
│   │       │   ├── ImageWin.py
│   │       │   ├── ImImagePlugin.py
│   │       │   ├── ImtImagePlugin.py
│   │       │   ├── IptcImagePlugin.py
│   │       │   ├── Jpeg2KImagePlugin.py
│   │       │   ├── JpegImagePlugin.py
│   │       │   ├── JpegPresets.py
│   │       │   ├── McIdasImagePlugin.py
│   │       │   ├── MicImagePlugin.py
│   │       │   ├── MpegImagePlugin.py
│   │       │   ├── MpoImagePlugin.py
│   │       │   ├── MspImagePlugin.py
│   │       │   ├── PaletteFile.py
│   │       │   ├── PalmImagePlugin.py
│   │       │   ├── PcdImagePlugin.py
│   │       │   ├── PcfFontFile.py
│   │       │   ├── PcxImagePlugin.py
│   │       │   ├── PdfImagePlugin.py
│   │       │   ├── PdfParser.py
│   │       │   ├── PixarImagePlugin.py
│   │       │   ├── PngImagePlugin.py
│   │       │   ├── PpmImagePlugin.py
│   │       │   ├── PsdImagePlugin.py
│   │       │   ├── PSDraw.py
│   │       │   ├── py.typed
│   │       │   ├── QoiImagePlugin.py
│   │       │   ├── report.py
│   │       │   ├── SgiImagePlugin.py
│   │       │   ├── SpiderImagePlugin.py
│   │       │   ├── SunImagePlugin.py
│   │       │   ├── TarIO.py
│   │       │   ├── TgaImagePlugin.py
│   │       │   ├── TiffImagePlugin.py
│   │       │   ├── TiffTags.py
│   │       │   ├── WalImageFile.py
│   │       │   ├── WebPImagePlugin.py
│   │       │   ├── WmfImagePlugin.py
│   │       │   ├── XbmImagePlugin.py
│   │       │   ├── XpmImagePlugin.py
│   │       │   ├── XVThumbImagePlugin.py
│   │       │   ├── _binary.py
│   │       │   ├── _deprecate.py
│   │       │   ├── _imaging.cp311-win_amd64.pyd
│   │       │   ├── _imaging.pyi
│   │       │   ├── _imagingcms.cp311-win_amd64.pyd
│   │       │   ├── _imagingcms.pyi
│   │       │   ├── _imagingft.cp311-win_amd64.pyd
│   │       │   ├── _imagingft.pyi
│   │       │   ├── _imagingmath.cp311-win_amd64.pyd
│   │       │   ├── _imagingmath.pyi
│   │       │   ├── _imagingmorph.cp311-win_amd64.pyd
│   │       │   ├── _imagingmorph.pyi
│   │       │   ├── _imagingtk.cp311-win_amd64.pyd
│   │       │   ├── _imagingtk.pyi
│   │       │   ├── _tkinter_finder.py
│   │       │   ├── _typing.py
│   │       │   ├── _util.py
│   │       │   ├── _version.py
│   │       │   ├── _webp.cp311-win_amd64.pyd
│   │       │   ├── _webp.pyi
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   └── __pycache__ /
│   │       │       ├── BdfFontFile.cpython-311.pyc
│   │       │       ├── BlpImagePlugin.cpython-311.pyc
│   │       │       ├── BmpImagePlugin.cpython-311.pyc
│   │       │       ├── BufrStubImagePlugin.cpython-311.pyc
│   │       │       ├── ContainerIO.cpython-311.pyc
│   │       │       ├── CurImagePlugin.cpython-311.pyc
│   │       │       ├── DcxImagePlugin.cpython-311.pyc
│   │       │       ├── DdsImagePlugin.cpython-311.pyc
│   │       │       ├── EpsImagePlugin.cpython-311.pyc
│   │       │       ├── ExifTags.cpython-311.pyc
│   │       │       ├── features.cpython-311.pyc
│   │       │       ├── FitsImagePlugin.cpython-311.pyc
│   │       │       ├── FliImagePlugin.cpython-311.pyc
│   │       │       ├── FontFile.cpython-311.pyc
│   │       │       ├── FpxImagePlugin.cpython-311.pyc
│   │       │       ├── FtexImagePlugin.cpython-311.pyc
│   │       │       ├── GbrImagePlugin.cpython-311.pyc
│   │       │       ├── GdImageFile.cpython-311.pyc
│   │       │       ├── GifImagePlugin.cpython-311.pyc
│   │       │       ├── GimpGradientFile.cpython-311.pyc
│   │       │       ├── GimpPaletteFile.cpython-311.pyc
│   │       │       ├── GribStubImagePlugin.cpython-311.pyc
│   │       │       ├── Hdf5StubImagePlugin.cpython-311.pyc
│   │       │       ├── IcnsImagePlugin.cpython-311.pyc
│   │       │       ├── IcoImagePlugin.cpython-311.pyc
│   │       │       ├── Image.cpython-311.pyc
│   │       │       ├── ImageChops.cpython-311.pyc
│   │       │       ├── ImageCms.cpython-311.pyc
│   │       │       ├── ImageColor.cpython-311.pyc
│   │       │       ├── ImageDraw.cpython-311.pyc
│   │       │       ├── ImageDraw2.cpython-311.pyc
│   │       │       ├── ImageEnhance.cpython-311.pyc
│   │       │       ├── ImageFile.cpython-311.pyc
│   │       │       ├── ImageFilter.cpython-311.pyc
│   │       │       ├── ImageFont.cpython-311.pyc
│   │       │       ├── ImageGrab.cpython-311.pyc
│   │       │       ├── ImageMath.cpython-311.pyc
│   │       │       ├── ImageMode.cpython-311.pyc
│   │       │       ├── ImageMorph.cpython-311.pyc
│   │       │       ├── ImageOps.cpython-311.pyc
│   │       │       ├── ImagePalette.cpython-311.pyc
│   │       │       ├── ImagePath.cpython-311.pyc
│   │       │       ├── ImageQt.cpython-311.pyc
│   │       │       ├── ImageSequence.cpython-311.pyc
│   │       │       ├── ImageShow.cpython-311.pyc
│   │       │       ├── ImageStat.cpython-311.pyc
│   │       │       ├── ImageTk.cpython-311.pyc
│   │       │       ├── ImageTransform.cpython-311.pyc
│   │       │       ├── ImageWin.cpython-311.pyc
│   │       │       ├── ImImagePlugin.cpython-311.pyc
│   │       │       ├── ImtImagePlugin.cpython-311.pyc
│   │       │       ├── IptcImagePlugin.cpython-311.pyc
│   │       │       ├── Jpeg2KImagePlugin.cpython-311.pyc
│   │       │       ├── JpegImagePlugin.cpython-311.pyc
│   │       │       ├── JpegPresets.cpython-311.pyc
│   │       │       ├── McIdasImagePlugin.cpython-311.pyc
│   │       │       ├── MicImagePlugin.cpython-311.pyc
│   │       │       ├── MpegImagePlugin.cpython-311.pyc
│   │       │       ├── MpoImagePlugin.cpython-311.pyc
│   │       │       ├── MspImagePlugin.cpython-311.pyc
│   │       │       ├── PaletteFile.cpython-311.pyc
│   │       │       ├── PalmImagePlugin.cpython-311.pyc
│   │       │       ├── PcdImagePlugin.cpython-311.pyc
│   │       │       ├── PcfFontFile.cpython-311.pyc
│   │       │       ├── PcxImagePlugin.cpython-311.pyc
│   │       │       ├── PdfImagePlugin.cpython-311.pyc
│   │       │       ├── PdfParser.cpython-311.pyc
│   │       │       ├── PixarImagePlugin.cpython-311.pyc
│   │       │       ├── PngImagePlugin.cpython-311.pyc
│   │       │       ├── PpmImagePlugin.cpython-311.pyc
│   │       │       ├── PsdImagePlugin.cpython-311.pyc
│   │       │       ├── PSDraw.cpython-311.pyc
│   │       │       ├── QoiImagePlugin.cpython-311.pyc
│   │       │       ├── report.cpython-311.pyc
│   │       │       ├── SgiImagePlugin.cpython-311.pyc
│   │       │       ├── SpiderImagePlugin.cpython-311.pyc
│   │       │       ├── SunImagePlugin.cpython-311.pyc
│   │       │       ├── TarIO.cpython-311.pyc
│   │       │       ├── TgaImagePlugin.cpython-311.pyc
│   │       │       ├── TiffImagePlugin.cpython-311.pyc
│   │       │       ├── TiffTags.cpython-311.pyc
│   │       │       ├── WalImageFile.cpython-311.pyc
│   │       │       ├── WebPImagePlugin.cpython-311.pyc
│   │       │       ├── WmfImagePlugin.cpython-311.pyc
│   │       │       ├── XbmImagePlugin.cpython-311.pyc
│   │       │       ├── XpmImagePlugin.cpython-311.pyc
│   │       │       ├── XVThumbImagePlugin.cpython-311.pyc
│   │       │       ├── _binary.cpython-311.pyc
│   │       │       ├── _deprecate.cpython-311.pyc
│   │       │       ├── _tkinter_finder.cpython-311.pyc
│   │       │       ├── _typing.cpython-311.pyc
│   │       │       ├── _util.cpython-311.pyc
│   │       │       ├── _version.cpython-311.pyc
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       └── __main__.cpython-311.pyc
│   │       ├── pillow-11.1.0.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   ├── WHEEL
│   │       │   └── zip-safe
│   │       ├── pip /
│   │       │   ├── py.typed
│   │       │   ├── _internal /
│   │       │   │   ├── build_env.py
│   │       │   │   ├── cache.py
│   │       │   │   ├── cli /
│   │       │   │   │   ├── autocompletion.py
│   │       │   │   │   ├── base_command.py
│   │       │   │   │   ├── cmdoptions.py
│   │       │   │   │   ├── command_context.py
│   │       │   │   │   ├── index_command.py
│   │       │   │   │   ├── main.py
│   │       │   │   │   ├── main_parser.py
│   │       │   │   │   ├── parser.py
│   │       │   │   │   ├── progress_bars.py
│   │       │   │   │   ├── req_command.py
│   │       │   │   │   ├── spinners.py
│   │       │   │   │   ├── status_codes.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── autocompletion.cpython-311.pyc
│   │       │   │   │       ├── base_command.cpython-311.pyc
│   │       │   │   │       ├── cmdoptions.cpython-311.pyc
│   │       │   │   │       ├── command_context.cpython-311.pyc
│   │       │   │   │       ├── index_command.cpython-311.pyc
│   │       │   │   │       ├── main.cpython-311.pyc
│   │       │   │   │       ├── main_parser.cpython-311.pyc
│   │       │   │   │       ├── parser.cpython-311.pyc
│   │       │   │   │       ├── progress_bars.cpython-311.pyc
│   │       │   │   │       ├── req_command.cpython-311.pyc
│   │       │   │   │       ├── spinners.cpython-311.pyc
│   │       │   │   │       ├── status_codes.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── commands /
│   │       │   │   │   ├── cache.py
│   │       │   │   │   ├── check.py
│   │       │   │   │   ├── completion.py
│   │       │   │   │   ├── configuration.py
│   │       │   │   │   ├── debug.py
│   │       │   │   │   ├── download.py
│   │       │   │   │   ├── freeze.py
│   │       │   │   │   ├── hash.py
│   │       │   │   │   ├── help.py
│   │       │   │   │   ├── index.py
│   │       │   │   │   ├── inspect.py
│   │       │   │   │   ├── install.py
│   │       │   │   │   ├── list.py
│   │       │   │   │   ├── search.py
│   │       │   │   │   ├── show.py
│   │       │   │   │   ├── uninstall.py
│   │       │   │   │   ├── wheel.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── cache.cpython-311.pyc
│   │       │   │   │       ├── check.cpython-311.pyc
│   │       │   │   │       ├── completion.cpython-311.pyc
│   │       │   │   │       ├── configuration.cpython-311.pyc
│   │       │   │   │       ├── debug.cpython-311.pyc
│   │       │   │   │       ├── download.cpython-311.pyc
│   │       │   │   │       ├── freeze.cpython-311.pyc
│   │       │   │   │       ├── hash.cpython-311.pyc
│   │       │   │   │       ├── help.cpython-311.pyc
│   │       │   │   │       ├── index.cpython-311.pyc
│   │       │   │   │       ├── inspect.cpython-311.pyc
│   │       │   │   │       ├── install.cpython-311.pyc
│   │       │   │   │       ├── list.cpython-311.pyc
│   │       │   │   │       ├── search.cpython-311.pyc
│   │       │   │   │       ├── show.cpython-311.pyc
│   │       │   │   │       ├── uninstall.cpython-311.pyc
│   │       │   │   │       ├── wheel.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── configuration.py
│   │       │   │   ├── distributions /
│   │       │   │   │   ├── base.py
│   │       │   │   │   ├── installed.py
│   │       │   │   │   ├── sdist.py
│   │       │   │   │   ├── wheel.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── base.cpython-311.pyc
│   │       │   │   │       ├── installed.cpython-311.pyc
│   │       │   │   │       ├── sdist.cpython-311.pyc
│   │       │   │   │       ├── wheel.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── exceptions.py
│   │       │   │   ├── index /
│   │       │   │   │   ├── collector.py
│   │       │   │   │   ├── package_finder.py
│   │       │   │   │   ├── sources.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── collector.cpython-311.pyc
│   │       │   │   │       ├── package_finder.cpython-311.pyc
│   │       │   │   │       ├── sources.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── locations /
│   │       │   │   │   ├── base.py
│   │       │   │   │   ├── _distutils.py
│   │       │   │   │   ├── _sysconfig.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── base.cpython-311.pyc
│   │       │   │   │       ├── _distutils.cpython-311.pyc
│   │       │   │   │       ├── _sysconfig.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── main.py
│   │       │   │   ├── metadata /
│   │       │   │   │   ├── base.py
│   │       │   │   │   ├── importlib /
│   │       │   │   │   │   ├── _compat.py
│   │       │   │   │   │   ├── _dists.py
│   │       │   │   │   │   ├── _envs.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── _compat.cpython-311.pyc
│   │       │   │   │   │       ├── _dists.cpython-311.pyc
│   │       │   │   │   │       ├── _envs.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── pkg_resources.py
│   │       │   │   │   ├── _json.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── base.cpython-311.pyc
│   │       │   │   │       ├── pkg_resources.cpython-311.pyc
│   │       │   │   │       ├── _json.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── models /
│   │       │   │   │   ├── candidate.py
│   │       │   │   │   ├── direct_url.py
│   │       │   │   │   ├── format_control.py
│   │       │   │   │   ├── index.py
│   │       │   │   │   ├── installation_report.py
│   │       │   │   │   ├── link.py
│   │       │   │   │   ├── scheme.py
│   │       │   │   │   ├── search_scope.py
│   │       │   │   │   ├── selection_prefs.py
│   │       │   │   │   ├── target_python.py
│   │       │   │   │   ├── wheel.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── candidate.cpython-311.pyc
│   │       │   │   │       ├── direct_url.cpython-311.pyc
│   │       │   │   │       ├── format_control.cpython-311.pyc
│   │       │   │   │       ├── index.cpython-311.pyc
│   │       │   │   │       ├── installation_report.cpython-311.pyc
│   │       │   │   │       ├── link.cpython-311.pyc
│   │       │   │   │       ├── scheme.cpython-311.pyc
│   │       │   │   │       ├── search_scope.cpython-311.pyc
│   │       │   │   │       ├── selection_prefs.cpython-311.pyc
│   │       │   │   │       ├── target_python.cpython-311.pyc
│   │       │   │   │       ├── wheel.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── network /
│   │       │   │   │   ├── auth.py
│   │       │   │   │   ├── cache.py
│   │       │   │   │   ├── download.py
│   │       │   │   │   ├── lazy_wheel.py
│   │       │   │   │   ├── session.py
│   │       │   │   │   ├── utils.py
│   │       │   │   │   ├── xmlrpc.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── auth.cpython-311.pyc
│   │       │   │   │       ├── cache.cpython-311.pyc
│   │       │   │   │       ├── download.cpython-311.pyc
│   │       │   │   │       ├── lazy_wheel.cpython-311.pyc
│   │       │   │   │       ├── session.cpython-311.pyc
│   │       │   │   │       ├── utils.cpython-311.pyc
│   │       │   │   │       ├── xmlrpc.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── operations /
│   │       │   │   │   ├── build /
│   │       │   │   │   │   ├── build_tracker.py
│   │       │   │   │   │   ├── metadata.py
│   │       │   │   │   │   ├── metadata_editable.py
│   │       │   │   │   │   ├── metadata_legacy.py
│   │       │   │   │   │   ├── wheel.py
│   │       │   │   │   │   ├── wheel_editable.py
│   │       │   │   │   │   ├── wheel_legacy.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── build_tracker.cpython-311.pyc
│   │       │   │   │   │       ├── metadata.cpython-311.pyc
│   │       │   │   │   │       ├── metadata_editable.cpython-311.pyc
│   │       │   │   │   │       ├── metadata_legacy.cpython-311.pyc
│   │       │   │   │   │       ├── wheel.cpython-311.pyc
│   │       │   │   │   │       ├── wheel_editable.cpython-311.pyc
│   │       │   │   │   │       ├── wheel_legacy.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── check.py
│   │       │   │   │   ├── freeze.py
│   │       │   │   │   ├── install /
│   │       │   │   │   │   ├── editable_legacy.py
│   │       │   │   │   │   ├── wheel.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── editable_legacy.cpython-311.pyc
│   │       │   │   │   │       ├── wheel.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── prepare.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── check.cpython-311.pyc
│   │       │   │   │       ├── freeze.cpython-311.pyc
│   │       │   │   │       ├── prepare.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── pyproject.py
│   │       │   │   ├── req /
│   │       │   │   │   ├── constructors.py
│   │       │   │   │   ├── req_file.py
│   │       │   │   │   ├── req_install.py
│   │       │   │   │   ├── req_set.py
│   │       │   │   │   ├── req_uninstall.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── constructors.cpython-311.pyc
│   │       │   │   │       ├── req_file.cpython-311.pyc
│   │       │   │   │       ├── req_install.cpython-311.pyc
│   │       │   │   │       ├── req_set.cpython-311.pyc
│   │       │   │   │       ├── req_uninstall.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── resolution /
│   │       │   │   │   ├── base.py
│   │       │   │   │   ├── legacy /
│   │       │   │   │   │   ├── resolver.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── resolver.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── resolvelib /
│   │       │   │   │   │   ├── base.py
│   │       │   │   │   │   ├── candidates.py
│   │       │   │   │   │   ├── factory.py
│   │       │   │   │   │   ├── found_candidates.py
│   │       │   │   │   │   ├── provider.py
│   │       │   │   │   │   ├── reporter.py
│   │       │   │   │   │   ├── requirements.py
│   │       │   │   │   │   ├── resolver.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── base.cpython-311.pyc
│   │       │   │   │   │       ├── candidates.cpython-311.pyc
│   │       │   │   │   │       ├── factory.cpython-311.pyc
│   │       │   │   │   │       ├── found_candidates.cpython-311.pyc
│   │       │   │   │   │       ├── provider.cpython-311.pyc
│   │       │   │   │   │       ├── reporter.cpython-311.pyc
│   │       │   │   │   │       ├── requirements.cpython-311.pyc
│   │       │   │   │   │       ├── resolver.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── base.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── self_outdated_check.py
│   │       │   │   ├── utils /
│   │       │   │   │   ├── appdirs.py
│   │       │   │   │   ├── compat.py
│   │       │   │   │   ├── compatibility_tags.py
│   │       │   │   │   ├── datetime.py
│   │       │   │   │   ├── deprecation.py
│   │       │   │   │   ├── direct_url_helpers.py
│   │       │   │   │   ├── egg_link.py
│   │       │   │   │   ├── entrypoints.py
│   │       │   │   │   ├── filesystem.py
│   │       │   │   │   ├── filetypes.py
│   │       │   │   │   ├── glibc.py
│   │       │   │   │   ├── hashes.py
│   │       │   │   │   ├── logging.py
│   │       │   │   │   ├── misc.py
│   │       │   │   │   ├── packaging.py
│   │       │   │   │   ├── retry.py
│   │       │   │   │   ├── setuptools_build.py
│   │       │   │   │   ├── subprocess.py
│   │       │   │   │   ├── temp_dir.py
│   │       │   │   │   ├── unpacking.py
│   │       │   │   │   ├── urls.py
│   │       │   │   │   ├── virtualenv.py
│   │       │   │   │   ├── wheel.py
│   │       │   │   │   ├── _jaraco_text.py
│   │       │   │   │   ├── _log.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── appdirs.cpython-311.pyc
│   │       │   │   │       ├── compat.cpython-311.pyc
│   │       │   │   │       ├── compatibility_tags.cpython-311.pyc
│   │       │   │   │       ├── datetime.cpython-311.pyc
│   │       │   │   │       ├── deprecation.cpython-311.pyc
│   │       │   │   │       ├── direct_url_helpers.cpython-311.pyc
│   │       │   │   │       ├── egg_link.cpython-311.pyc
│   │       │   │   │       ├── entrypoints.cpython-311.pyc
│   │       │   │   │       ├── filesystem.cpython-311.pyc
│   │       │   │   │       ├── filetypes.cpython-311.pyc
│   │       │   │   │       ├── glibc.cpython-311.pyc
│   │       │   │   │       ├── hashes.cpython-311.pyc
│   │       │   │   │       ├── logging.cpython-311.pyc
│   │       │   │   │       ├── misc.cpython-311.pyc
│   │       │   │   │       ├── packaging.cpython-311.pyc
│   │       │   │   │       ├── retry.cpython-311.pyc
│   │       │   │   │       ├── setuptools_build.cpython-311.pyc
│   │       │   │   │       ├── subprocess.cpython-311.pyc
│   │       │   │   │       ├── temp_dir.cpython-311.pyc
│   │       │   │   │       ├── unpacking.cpython-311.pyc
│   │       │   │   │       ├── urls.cpython-311.pyc
│   │       │   │   │       ├── virtualenv.cpython-311.pyc
│   │       │   │   │       ├── wheel.cpython-311.pyc
│   │       │   │   │       ├── _jaraco_text.cpython-311.pyc
│   │       │   │   │       ├── _log.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── vcs /
│   │       │   │   │   ├── bazaar.py
│   │       │   │   │   ├── git.py
│   │       │   │   │   ├── mercurial.py
│   │       │   │   │   ├── subversion.py
│   │       │   │   │   ├── versioncontrol.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── bazaar.cpython-311.pyc
│   │       │   │   │       ├── git.cpython-311.pyc
│   │       │   │   │       ├── mercurial.cpython-311.pyc
│   │       │   │   │       ├── subversion.cpython-311.pyc
│   │       │   │   │       ├── versioncontrol.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── wheel_builder.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── build_env.cpython-311.pyc
│   │       │   │       ├── cache.cpython-311.pyc
│   │       │   │       ├── configuration.cpython-311.pyc
│   │       │   │       ├── exceptions.cpython-311.pyc
│   │       │   │       ├── main.cpython-311.pyc
│   │       │   │       ├── pyproject.cpython-311.pyc
│   │       │   │       ├── self_outdated_check.cpython-311.pyc
│   │       │   │       ├── wheel_builder.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _vendor /
│   │       │   │   ├── cachecontrol /
│   │       │   │   │   ├── adapter.py
│   │       │   │   │   ├── cache.py
│   │       │   │   │   ├── caches /
│   │       │   │   │   │   ├── file_cache.py
│   │       │   │   │   │   ├── redis_cache.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── file_cache.cpython-311.pyc
│   │       │   │   │   │       ├── redis_cache.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── controller.py
│   │       │   │   │   ├── filewrapper.py
│   │       │   │   │   ├── heuristics.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── serialize.py
│   │       │   │   │   ├── wrapper.py
│   │       │   │   │   ├── _cmd.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── adapter.cpython-311.pyc
│   │       │   │   │       ├── cache.cpython-311.pyc
│   │       │   │   │       ├── controller.cpython-311.pyc
│   │       │   │   │       ├── filewrapper.cpython-311.pyc
│   │       │   │   │       ├── heuristics.cpython-311.pyc
│   │       │   │   │       ├── serialize.cpython-311.pyc
│   │       │   │   │       ├── wrapper.cpython-311.pyc
│   │       │   │   │       ├── _cmd.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── certifi /
│   │       │   │   │   ├── cacert.pem
│   │       │   │   │   ├── core.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   ├── __main__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── core.cpython-311.pyc
│   │       │   │   │       ├── __init__.cpython-311.pyc
│   │       │   │   │       └── __main__.cpython-311.pyc
│   │       │   │   ├── distlib /
│   │       │   │   │   ├── compat.py
│   │       │   │   │   ├── database.py
│   │       │   │   │   ├── index.py
│   │       │   │   │   ├── locators.py
│   │       │   │   │   ├── manifest.py
│   │       │   │   │   ├── markers.py
│   │       │   │   │   ├── metadata.py
│   │       │   │   │   ├── resources.py
│   │       │   │   │   ├── scripts.py
│   │       │   │   │   ├── t32.exe
│   │       │   │   │   ├── t64-arm.exe
│   │       │   │   │   ├── t64.exe
│   │       │   │   │   ├── util.py
│   │       │   │   │   ├── version.py
│   │       │   │   │   ├── w32.exe
│   │       │   │   │   ├── w64-arm.exe
│   │       │   │   │   ├── w64.exe
│   │       │   │   │   ├── wheel.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── compat.cpython-311.pyc
│   │       │   │   │       ├── database.cpython-311.pyc
│   │       │   │   │       ├── index.cpython-311.pyc
│   │       │   │   │       ├── locators.cpython-311.pyc
│   │       │   │   │       ├── manifest.cpython-311.pyc
│   │       │   │   │       ├── markers.cpython-311.pyc
│   │       │   │   │       ├── metadata.cpython-311.pyc
│   │       │   │   │       ├── resources.cpython-311.pyc
│   │       │   │   │       ├── scripts.cpython-311.pyc
│   │       │   │   │       ├── util.cpython-311.pyc
│   │       │   │   │       ├── version.cpython-311.pyc
│   │       │   │   │       ├── wheel.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── distro /
│   │       │   │   │   ├── distro.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   ├── __main__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── distro.cpython-311.pyc
│   │       │   │   │       ├── __init__.cpython-311.pyc
│   │       │   │   │       └── __main__.cpython-311.pyc
│   │       │   │   ├── idna /
│   │       │   │   │   ├── codec.py
│   │       │   │   │   ├── compat.py
│   │       │   │   │   ├── core.py
│   │       │   │   │   ├── idnadata.py
│   │       │   │   │   ├── intranges.py
│   │       │   │   │   ├── package_data.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── uts46data.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── codec.cpython-311.pyc
│   │       │   │   │       ├── compat.cpython-311.pyc
│   │       │   │   │       ├── core.cpython-311.pyc
│   │       │   │   │       ├── idnadata.cpython-311.pyc
│   │       │   │   │       ├── intranges.cpython-311.pyc
│   │       │   │   │       ├── package_data.cpython-311.pyc
│   │       │   │   │       ├── uts46data.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── msgpack /
│   │       │   │   │   ├── exceptions.py
│   │       │   │   │   ├── ext.py
│   │       │   │   │   ├── fallback.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── exceptions.cpython-311.pyc
│   │       │   │   │       ├── ext.cpython-311.pyc
│   │       │   │   │       ├── fallback.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── packaging /
│   │       │   │   │   ├── licenses /
│   │       │   │   │   │   ├── _spdx.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── _spdx.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── markers.py
│   │       │   │   │   ├── metadata.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── requirements.py
│   │       │   │   │   ├── specifiers.py
│   │       │   │   │   ├── tags.py
│   │       │   │   │   ├── utils.py
│   │       │   │   │   ├── version.py
│   │       │   │   │   ├── _elffile.py
│   │       │   │   │   ├── _manylinux.py
│   │       │   │   │   ├── _musllinux.py
│   │       │   │   │   ├── _parser.py
│   │       │   │   │   ├── _structures.py
│   │       │   │   │   ├── _tokenizer.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── markers.cpython-311.pyc
│   │       │   │   │       ├── metadata.cpython-311.pyc
│   │       │   │   │       ├── requirements.cpython-311.pyc
│   │       │   │   │       ├── specifiers.cpython-311.pyc
│   │       │   │   │       ├── tags.cpython-311.pyc
│   │       │   │   │       ├── utils.cpython-311.pyc
│   │       │   │   │       ├── version.cpython-311.pyc
│   │       │   │   │       ├── _elffile.cpython-311.pyc
│   │       │   │   │       ├── _manylinux.cpython-311.pyc
│   │       │   │   │       ├── _musllinux.cpython-311.pyc
│   │       │   │   │       ├── _parser.cpython-311.pyc
│   │       │   │   │       ├── _structures.cpython-311.pyc
│   │       │   │   │       ├── _tokenizer.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── pkg_resources /
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── platformdirs /
│   │       │   │   │   ├── android.py
│   │       │   │   │   ├── api.py
│   │       │   │   │   ├── macos.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── unix.py
│   │       │   │   │   ├── version.py
│   │       │   │   │   ├── windows.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   ├── __main__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── android.cpython-311.pyc
│   │       │   │   │       ├── api.cpython-311.pyc
│   │       │   │   │       ├── macos.cpython-311.pyc
│   │       │   │   │       ├── unix.cpython-311.pyc
│   │       │   │   │       ├── version.cpython-311.pyc
│   │       │   │   │       ├── windows.cpython-311.pyc
│   │       │   │   │       ├── __init__.cpython-311.pyc
│   │       │   │   │       └── __main__.cpython-311.pyc
│   │       │   │   ├── pygments /
│   │       │   │   │   ├── cmdline.py
│   │       │   │   │   ├── console.py
│   │       │   │   │   ├── filter.py
│   │       │   │   │   ├── filters /
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── formatter.py
│   │       │   │   │   ├── formatters /
│   │       │   │   │   │   ├── bbcode.py
│   │       │   │   │   │   ├── groff.py
│   │       │   │   │   │   ├── html.py
│   │       │   │   │   │   ├── img.py
│   │       │   │   │   │   ├── irc.py
│   │       │   │   │   │   ├── latex.py
│   │       │   │   │   │   ├── other.py
│   │       │   │   │   │   ├── pangomarkup.py
│   │       │   │   │   │   ├── rtf.py
│   │       │   │   │   │   ├── svg.py
│   │       │   │   │   │   ├── terminal.py
│   │       │   │   │   │   ├── terminal256.py
│   │       │   │   │   │   ├── _mapping.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── bbcode.cpython-311.pyc
│   │       │   │   │   │       ├── groff.cpython-311.pyc
│   │       │   │   │   │       ├── html.cpython-311.pyc
│   │       │   │   │   │       ├── img.cpython-311.pyc
│   │       │   │   │   │       ├── irc.cpython-311.pyc
│   │       │   │   │   │       ├── latex.cpython-311.pyc
│   │       │   │   │   │       ├── other.cpython-311.pyc
│   │       │   │   │   │       ├── pangomarkup.cpython-311.pyc
│   │       │   │   │   │       ├── rtf.cpython-311.pyc
│   │       │   │   │   │       ├── svg.cpython-311.pyc
│   │       │   │   │   │       ├── terminal.cpython-311.pyc
│   │       │   │   │   │       ├── terminal256.cpython-311.pyc
│   │       │   │   │   │       ├── _mapping.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── lexer.py
│   │       │   │   │   ├── lexers /
│   │       │   │   │   │   ├── python.py
│   │       │   │   │   │   ├── _mapping.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── python.cpython-311.pyc
│   │       │   │   │   │       ├── _mapping.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── modeline.py
│   │       │   │   │   ├── plugin.py
│   │       │   │   │   ├── regexopt.py
│   │       │   │   │   ├── scanner.py
│   │       │   │   │   ├── sphinxext.py
│   │       │   │   │   ├── style.py
│   │       │   │   │   ├── styles /
│   │       │   │   │   │   ├── _mapping.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── _mapping.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── token.py
│   │       │   │   │   ├── unistring.py
│   │       │   │   │   ├── util.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   ├── __main__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── cmdline.cpython-311.pyc
│   │       │   │   │       ├── console.cpython-311.pyc
│   │       │   │   │       ├── filter.cpython-311.pyc
│   │       │   │   │       ├── formatter.cpython-311.pyc
│   │       │   │   │       ├── lexer.cpython-311.pyc
│   │       │   │   │       ├── modeline.cpython-311.pyc
│   │       │   │   │       ├── plugin.cpython-311.pyc
│   │       │   │   │       ├── regexopt.cpython-311.pyc
│   │       │   │   │       ├── scanner.cpython-311.pyc
│   │       │   │   │       ├── sphinxext.cpython-311.pyc
│   │       │   │   │       ├── style.cpython-311.pyc
│   │       │   │   │       ├── token.cpython-311.pyc
│   │       │   │   │       ├── unistring.cpython-311.pyc
│   │       │   │   │       ├── util.cpython-311.pyc
│   │       │   │   │       ├── __init__.cpython-311.pyc
│   │       │   │   │       └── __main__.cpython-311.pyc
│   │       │   │   ├── pyproject_hooks /
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── _impl.py
│   │       │   │   │   ├── _in_process /
│   │       │   │   │   │   ├── _in_process.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── _in_process.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── _impl.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── requests /
│   │       │   │   │   ├── adapters.py
│   │       │   │   │   ├── api.py
│   │       │   │   │   ├── auth.py
│   │       │   │   │   ├── certs.py
│   │       │   │   │   ├── compat.py
│   │       │   │   │   ├── cookies.py
│   │       │   │   │   ├── exceptions.py
│   │       │   │   │   ├── help.py
│   │       │   │   │   ├── hooks.py
│   │       │   │   │   ├── models.py
│   │       │   │   │   ├── packages.py
│   │       │   │   │   ├── sessions.py
│   │       │   │   │   ├── status_codes.py
│   │       │   │   │   ├── structures.py
│   │       │   │   │   ├── utils.py
│   │       │   │   │   ├── _internal_utils.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   ├── __pycache__ /
│   │       │   │   │   │   ├── adapters.cpython-311.pyc
│   │       │   │   │   │   ├── api.cpython-311.pyc
│   │       │   │   │   │   ├── auth.cpython-311.pyc
│   │       │   │   │   │   ├── certs.cpython-311.pyc
│   │       │   │   │   │   ├── compat.cpython-311.pyc
│   │       │   │   │   │   ├── cookies.cpython-311.pyc
│   │       │   │   │   │   ├── exceptions.cpython-311.pyc
│   │       │   │   │   │   ├── help.cpython-311.pyc
│   │       │   │   │   │   ├── hooks.cpython-311.pyc
│   │       │   │   │   │   ├── models.cpython-311.pyc
│   │       │   │   │   │   ├── packages.cpython-311.pyc
│   │       │   │   │   │   ├── sessions.cpython-311.pyc
│   │       │   │   │   │   ├── status_codes.cpython-311.pyc
│   │       │   │   │   │   ├── structures.cpython-311.pyc
│   │       │   │   │   │   ├── utils.cpython-311.pyc
│   │       │   │   │   │   ├── _internal_utils.cpython-311.pyc
│   │       │   │   │   │   ├── __init__.cpython-311.pyc
│   │       │   │   │   │   └── __version__.cpython-311.pyc
│   │       │   │   │   └── __version__.py
│   │       │   │   ├── resolvelib /
│   │       │   │   │   ├── compat /
│   │       │   │   │   │   ├── collections_abc.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── collections_abc.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── providers.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── reporters.py
│   │       │   │   │   ├── resolvers.py
│   │       │   │   │   ├── structs.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── providers.cpython-311.pyc
│   │       │   │   │       ├── reporters.cpython-311.pyc
│   │       │   │   │       ├── resolvers.cpython-311.pyc
│   │       │   │   │       ├── structs.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── rich /
│   │       │   │   │   ├── abc.py
│   │       │   │   │   ├── align.py
│   │       │   │   │   ├── ansi.py
│   │       │   │   │   ├── bar.py
│   │       │   │   │   ├── box.py
│   │       │   │   │   ├── cells.py
│   │       │   │   │   ├── color.py
│   │       │   │   │   ├── color_triplet.py
│   │       │   │   │   ├── columns.py
│   │       │   │   │   ├── console.py
│   │       │   │   │   ├── constrain.py
│   │       │   │   │   ├── containers.py
│   │       │   │   │   ├── control.py
│   │       │   │   │   ├── default_styles.py
│   │       │   │   │   ├── diagnose.py
│   │       │   │   │   ├── emoji.py
│   │       │   │   │   ├── errors.py
│   │       │   │   │   ├── filesize.py
│   │       │   │   │   ├── file_proxy.py
│   │       │   │   │   ├── highlighter.py
│   │       │   │   │   ├── json.py
│   │       │   │   │   ├── jupyter.py
│   │       │   │   │   ├── layout.py
│   │       │   │   │   ├── live.py
│   │       │   │   │   ├── live_render.py
│   │       │   │   │   ├── logging.py
│   │       │   │   │   ├── markup.py
│   │       │   │   │   ├── measure.py
│   │       │   │   │   ├── padding.py
│   │       │   │   │   ├── pager.py
│   │       │   │   │   ├── palette.py
│   │       │   │   │   ├── panel.py
│   │       │   │   │   ├── pretty.py
│   │       │   │   │   ├── progress.py
│   │       │   │   │   ├── progress_bar.py
│   │       │   │   │   ├── prompt.py
│   │       │   │   │   ├── protocol.py
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── region.py
│   │       │   │   │   ├── repr.py
│   │       │   │   │   ├── rule.py
│   │       │   │   │   ├── scope.py
│   │       │   │   │   ├── screen.py
│   │       │   │   │   ├── segment.py
│   │       │   │   │   ├── spinner.py
│   │       │   │   │   ├── status.py
│   │       │   │   │   ├── style.py
│   │       │   │   │   ├── styled.py
│   │       │   │   │   ├── syntax.py
│   │       │   │   │   ├── table.py
│   │       │   │   │   ├── terminal_theme.py
│   │       │   │   │   ├── text.py
│   │       │   │   │   ├── theme.py
│   │       │   │   │   ├── themes.py
│   │       │   │   │   ├── traceback.py
│   │       │   │   │   ├── tree.py
│   │       │   │   │   ├── _cell_widths.py
│   │       │   │   │   ├── _emoji_codes.py
│   │       │   │   │   ├── _emoji_replace.py
│   │       │   │   │   ├── _export_format.py
│   │       │   │   │   ├── _extension.py
│   │       │   │   │   ├── _fileno.py
│   │       │   │   │   ├── _inspect.py
│   │       │   │   │   ├── _log_render.py
│   │       │   │   │   ├── _loop.py
│   │       │   │   │   ├── _null_file.py
│   │       │   │   │   ├── _palettes.py
│   │       │   │   │   ├── _pick.py
│   │       │   │   │   ├── _ratio.py
│   │       │   │   │   ├── _spinners.py
│   │       │   │   │   ├── _stack.py
│   │       │   │   │   ├── _timer.py
│   │       │   │   │   ├── _win32_console.py
│   │       │   │   │   ├── _windows.py
│   │       │   │   │   ├── _windows_renderer.py
│   │       │   │   │   ├── _wrap.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   ├── __main__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── abc.cpython-311.pyc
│   │       │   │   │       ├── align.cpython-311.pyc
│   │       │   │   │       ├── ansi.cpython-311.pyc
│   │       │   │   │       ├── bar.cpython-311.pyc
│   │       │   │   │       ├── box.cpython-311.pyc
│   │       │   │   │       ├── cells.cpython-311.pyc
│   │       │   │   │       ├── color.cpython-311.pyc
│   │       │   │   │       ├── color_triplet.cpython-311.pyc
│   │       │   │   │       ├── columns.cpython-311.pyc
│   │       │   │   │       ├── console.cpython-311.pyc
│   │       │   │   │       ├── constrain.cpython-311.pyc
│   │       │   │   │       ├── containers.cpython-311.pyc
│   │       │   │   │       ├── control.cpython-311.pyc
│   │       │   │   │       ├── default_styles.cpython-311.pyc
│   │       │   │   │       ├── diagnose.cpython-311.pyc
│   │       │   │   │       ├── emoji.cpython-311.pyc
│   │       │   │   │       ├── errors.cpython-311.pyc
│   │       │   │   │       ├── filesize.cpython-311.pyc
│   │       │   │   │       ├── file_proxy.cpython-311.pyc
│   │       │   │   │       ├── highlighter.cpython-311.pyc
│   │       │   │   │       ├── json.cpython-311.pyc
│   │       │   │   │       ├── jupyter.cpython-311.pyc
│   │       │   │   │       ├── layout.cpython-311.pyc
│   │       │   │   │       ├── live.cpython-311.pyc
│   │       │   │   │       ├── live_render.cpython-311.pyc
│   │       │   │   │       ├── logging.cpython-311.pyc
│   │       │   │   │       ├── markup.cpython-311.pyc
│   │       │   │   │       ├── measure.cpython-311.pyc
│   │       │   │   │       ├── padding.cpython-311.pyc
│   │       │   │   │       ├── pager.cpython-311.pyc
│   │       │   │   │       ├── palette.cpython-311.pyc
│   │       │   │   │       ├── panel.cpython-311.pyc
│   │       │   │   │       ├── pretty.cpython-311.pyc
│   │       │   │   │       ├── progress.cpython-311.pyc
│   │       │   │   │       ├── progress_bar.cpython-311.pyc
│   │       │   │   │       ├── prompt.cpython-311.pyc
│   │       │   │   │       ├── protocol.cpython-311.pyc
│   │       │   │   │       ├── region.cpython-311.pyc
│   │       │   │   │       ├── repr.cpython-311.pyc
│   │       │   │   │       ├── rule.cpython-311.pyc
│   │       │   │   │       ├── scope.cpython-311.pyc
│   │       │   │   │       ├── screen.cpython-311.pyc
│   │       │   │   │       ├── segment.cpython-311.pyc
│   │       │   │   │       ├── spinner.cpython-311.pyc
│   │       │   │   │       ├── status.cpython-311.pyc
│   │       │   │   │       ├── style.cpython-311.pyc
│   │       │   │   │       ├── styled.cpython-311.pyc
│   │       │   │   │       ├── syntax.cpython-311.pyc
│   │       │   │   │       ├── table.cpython-311.pyc
│   │       │   │   │       ├── terminal_theme.cpython-311.pyc
│   │       │   │   │       ├── text.cpython-311.pyc
│   │       │   │   │       ├── theme.cpython-311.pyc
│   │       │   │   │       ├── themes.cpython-311.pyc
│   │       │   │   │       ├── traceback.cpython-311.pyc
│   │       │   │   │       ├── tree.cpython-311.pyc
│   │       │   │   │       ├── _cell_widths.cpython-311.pyc
│   │       │   │   │       ├── _emoji_codes.cpython-311.pyc
│   │       │   │   │       ├── _emoji_replace.cpython-311.pyc
│   │       │   │   │       ├── _export_format.cpython-311.pyc
│   │       │   │   │       ├── _extension.cpython-311.pyc
│   │       │   │   │       ├── _fileno.cpython-311.pyc
│   │       │   │   │       ├── _inspect.cpython-311.pyc
│   │       │   │   │       ├── _log_render.cpython-311.pyc
│   │       │   │   │       ├── _loop.cpython-311.pyc
│   │       │   │   │       ├── _null_file.cpython-311.pyc
│   │       │   │   │       ├── _palettes.cpython-311.pyc
│   │       │   │   │       ├── _pick.cpython-311.pyc
│   │       │   │   │       ├── _ratio.cpython-311.pyc
│   │       │   │   │       ├── _spinners.cpython-311.pyc
│   │       │   │   │       ├── _stack.cpython-311.pyc
│   │       │   │   │       ├── _timer.cpython-311.pyc
│   │       │   │   │       ├── _win32_console.cpython-311.pyc
│   │       │   │   │       ├── _windows.cpython-311.pyc
│   │       │   │   │       ├── _windows_renderer.cpython-311.pyc
│   │       │   │   │       ├── _wrap.cpython-311.pyc
│   │       │   │   │       ├── __init__.cpython-311.pyc
│   │       │   │   │       └── __main__.cpython-311.pyc
│   │       │   │   ├── tomli /
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── _parser.py
│   │       │   │   │   ├── _re.py
│   │       │   │   │   ├── _types.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── _parser.cpython-311.pyc
│   │       │   │   │       ├── _re.cpython-311.pyc
│   │       │   │   │       ├── _types.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── truststore /
│   │       │   │   │   ├── py.typed
│   │       │   │   │   ├── _api.py
│   │       │   │   │   ├── _macos.py
│   │       │   │   │   ├── _openssl.py
│   │       │   │   │   ├── _ssl_constants.py
│   │       │   │   │   ├── _windows.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── _api.cpython-311.pyc
│   │       │   │   │       ├── _macos.cpython-311.pyc
│   │       │   │   │       ├── _openssl.cpython-311.pyc
│   │       │   │   │       ├── _ssl_constants.cpython-311.pyc
│   │       │   │   │       ├── _windows.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── typing_extensions.py
│   │       │   │   ├── urllib3 /
│   │       │   │   │   ├── connection.py
│   │       │   │   │   ├── connectionpool.py
│   │       │   │   │   ├── contrib /
│   │       │   │   │   │   ├── appengine.py
│   │       │   │   │   │   ├── ntlmpool.py
│   │       │   │   │   │   ├── pyopenssl.py
│   │       │   │   │   │   ├── securetransport.py
│   │       │   │   │   │   ├── socks.py
│   │       │   │   │   │   ├── _appengine_environ.py
│   │       │   │   │   │   ├── _securetransport /
│   │       │   │   │   │   │   ├── bindings.py
│   │       │   │   │   │   │   ├── low_level.py
│   │       │   │   │   │   │   ├── __init__.py
│   │       │   │   │   │   │   └── __pycache__ /
│   │       │   │   │   │   │       ├── bindings.cpython-311.pyc
│   │       │   │   │   │   │       ├── low_level.cpython-311.pyc
│   │       │   │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── appengine.cpython-311.pyc
│   │       │   │   │   │       ├── ntlmpool.cpython-311.pyc
│   │       │   │   │   │       ├── pyopenssl.cpython-311.pyc
│   │       │   │   │   │       ├── securetransport.cpython-311.pyc
│   │       │   │   │   │       ├── socks.cpython-311.pyc
│   │       │   │   │   │       ├── _appengine_environ.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── exceptions.py
│   │       │   │   │   ├── fields.py
│   │       │   │   │   ├── filepost.py
│   │       │   │   │   ├── packages /
│   │       │   │   │   │   ├── backports /
│   │       │   │   │   │   │   ├── makefile.py
│   │       │   │   │   │   │   ├── weakref_finalize.py
│   │       │   │   │   │   │   ├── __init__.py
│   │       │   │   │   │   │   └── __pycache__ /
│   │       │   │   │   │   │       ├── makefile.cpython-311.pyc
│   │       │   │   │   │   │       ├── weakref_finalize.cpython-311.pyc
│   │       │   │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   │   ├── six.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── six.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── poolmanager.py
│   │       │   │   │   ├── request.py
│   │       │   │   │   ├── response.py
│   │       │   │   │   ├── util /
│   │       │   │   │   │   ├── connection.py
│   │       │   │   │   │   ├── proxy.py
│   │       │   │   │   │   ├── queue.py
│   │       │   │   │   │   ├── request.py
│   │       │   │   │   │   ├── response.py
│   │       │   │   │   │   ├── retry.py
│   │       │   │   │   │   ├── ssltransport.py
│   │       │   │   │   │   ├── ssl_.py
│   │       │   │   │   │   ├── ssl_match_hostname.py
│   │       │   │   │   │   ├── timeout.py
│   │       │   │   │   │   ├── url.py
│   │       │   │   │   │   ├── wait.py
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       ├── connection.cpython-311.pyc
│   │       │   │   │   │       ├── proxy.cpython-311.pyc
│   │       │   │   │   │       ├── queue.cpython-311.pyc
│   │       │   │   │   │       ├── request.cpython-311.pyc
│   │       │   │   │   │       ├── response.cpython-311.pyc
│   │       │   │   │   │       ├── retry.cpython-311.pyc
│   │       │   │   │   │       ├── ssltransport.cpython-311.pyc
│   │       │   │   │   │       ├── ssl_.cpython-311.pyc
│   │       │   │   │   │       ├── ssl_match_hostname.cpython-311.pyc
│   │       │   │   │   │       ├── timeout.cpython-311.pyc
│   │       │   │   │   │       ├── url.cpython-311.pyc
│   │       │   │   │   │       ├── wait.cpython-311.pyc
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── _collections.py
│   │       │   │   │   ├── _version.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── connection.cpython-311.pyc
│   │       │   │   │       ├── connectionpool.cpython-311.pyc
│   │       │   │   │       ├── exceptions.cpython-311.pyc
│   │       │   │   │       ├── fields.cpython-311.pyc
│   │       │   │   │       ├── filepost.cpython-311.pyc
│   │       │   │   │       ├── poolmanager.cpython-311.pyc
│   │       │   │   │       ├── request.cpython-311.pyc
│   │       │   │   │       ├── response.cpython-311.pyc
│   │       │   │   │       ├── _collections.cpython-311.pyc
│   │       │   │   │       ├── _version.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── vendor.txt
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── typing_extensions.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   ├── __pip-runner__.py
│   │       │   └── __pycache__ /
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       ├── __main__.cpython-311.pyc
│   │       │       └── __pip-runner__.cpython-311.pyc
│   │       ├── pip-25.0.1.dist-info /
│   │       │   ├── AUTHORS.txt
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE.txt
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── pkg_resources /
│   │       │   ├── extern /
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _vendor /
│   │       │   │   ├── appdirs.py
│   │       │   │   ├── importlib_resources /
│   │       │   │   │   ├── abc.py
│   │       │   │   │   ├── readers.py
│   │       │   │   │   ├── simple.py
│   │       │   │   │   ├── _adapters.py
│   │       │   │   │   ├── _common.py
│   │       │   │   │   ├── _compat.py
│   │       │   │   │   ├── _itertools.py
│   │       │   │   │   ├── _legacy.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── abc.cpython-311.pyc
│   │       │   │   │       ├── readers.cpython-311.pyc
│   │       │   │   │       ├── simple.cpython-311.pyc
│   │       │   │   │       ├── _adapters.cpython-311.pyc
│   │       │   │   │       ├── _common.cpython-311.pyc
│   │       │   │   │       ├── _compat.cpython-311.pyc
│   │       │   │   │       ├── _itertools.cpython-311.pyc
│   │       │   │   │       ├── _legacy.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── jaraco /
│   │       │   │   │   ├── context.py
│   │       │   │   │   ├── functools.py
│   │       │   │   │   ├── text /
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── context.cpython-311.pyc
│   │       │   │   │       ├── functools.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── more_itertools /
│   │       │   │   │   ├── more.py
│   │       │   │   │   ├── recipes.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── more.cpython-311.pyc
│   │       │   │   │       ├── recipes.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── packaging /
│   │       │   │   │   ├── markers.py
│   │       │   │   │   ├── requirements.py
│   │       │   │   │   ├── specifiers.py
│   │       │   │   │   ├── tags.py
│   │       │   │   │   ├── utils.py
│   │       │   │   │   ├── version.py
│   │       │   │   │   ├── _manylinux.py
│   │       │   │   │   ├── _musllinux.py
│   │       │   │   │   ├── _structures.py
│   │       │   │   │   ├── __about__.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── markers.cpython-311.pyc
│   │       │   │   │       ├── requirements.cpython-311.pyc
│   │       │   │   │       ├── specifiers.cpython-311.pyc
│   │       │   │   │       ├── tags.cpython-311.pyc
│   │       │   │   │       ├── utils.cpython-311.pyc
│   │       │   │   │       ├── version.cpython-311.pyc
│   │       │   │   │       ├── _manylinux.cpython-311.pyc
│   │       │   │   │       ├── _musllinux.cpython-311.pyc
│   │       │   │   │       ├── _structures.cpython-311.pyc
│   │       │   │   │       ├── __about__.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── pyparsing /
│   │       │   │   │   ├── actions.py
│   │       │   │   │   ├── common.py
│   │       │   │   │   ├── core.py
│   │       │   │   │   ├── diagram /
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── exceptions.py
│   │       │   │   │   ├── helpers.py
│   │       │   │   │   ├── results.py
│   │       │   │   │   ├── testing.py
│   │       │   │   │   ├── unicode.py
│   │       │   │   │   ├── util.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── actions.cpython-311.pyc
│   │       │   │   │       ├── common.cpython-311.pyc
│   │       │   │   │       ├── core.cpython-311.pyc
│   │       │   │   │       ├── exceptions.cpython-311.pyc
│   │       │   │   │       ├── helpers.cpython-311.pyc
│   │       │   │   │       ├── results.cpython-311.pyc
│   │       │   │   │       ├── testing.cpython-311.pyc
│   │       │   │   │       ├── unicode.cpython-311.pyc
│   │       │   │   │       ├── util.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── zipp.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── appdirs.cpython-311.pyc
│   │       │   │       ├── zipp.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── pycparser /
│   │       │   ├── ast_transforms.py
│   │       │   ├── c_ast.py
│   │       │   ├── c_generator.py
│   │       │   ├── c_lexer.py
│   │       │   ├── c_parser.py
│   │       │   ├── lextab.py
│   │       │   ├── ply /
│   │       │   │   ├── cpp.py
│   │       │   │   ├── ctokens.py
│   │       │   │   ├── lex.py
│   │       │   │   ├── yacc.py
│   │       │   │   ├── ygen.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── cpp.cpython-311.pyc
│   │       │   │       ├── ctokens.cpython-311.pyc
│   │       │   │       ├── lex.cpython-311.pyc
│   │       │   │       ├── yacc.cpython-311.pyc
│   │       │   │       ├── ygen.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── plyparser.py
│   │       │   ├── yacctab.py
│   │       │   ├── _ast_gen.py
│   │       │   ├── _build_tables.py
│   │       │   ├── _c_ast.cfg
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── ast_transforms.cpython-311.pyc
│   │       │       ├── c_ast.cpython-311.pyc
│   │       │       ├── c_generator.cpython-311.pyc
│   │       │       ├── c_lexer.cpython-311.pyc
│   │       │       ├── c_parser.cpython-311.pyc
│   │       │       ├── lextab.cpython-311.pyc
│   │       │       ├── plyparser.cpython-311.pyc
│   │       │       ├── yacctab.cpython-311.pyc
│   │       │       ├── _ast_gen.cpython-311.pyc
│   │       │       ├── _build_tables.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── pycparser-2.22.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── pydantic /
│   │       │   ├── annotated_types.cp311-win_amd64.pyd
│   │       │   ├── annotated_types.py
│   │       │   ├── class_validators.cp311-win_amd64.pyd
│   │       │   ├── class_validators.py
│   │       │   ├── color.cp311-win_amd64.pyd
│   │       │   ├── color.py
│   │       │   ├── config.cp311-win_amd64.pyd
│   │       │   ├── config.py
│   │       │   ├── dataclasses.cp311-win_amd64.pyd
│   │       │   ├── dataclasses.py
│   │       │   ├── datetime_parse.cp311-win_amd64.pyd
│   │       │   ├── datetime_parse.py
│   │       │   ├── decorator.cp311-win_amd64.pyd
│   │       │   ├── decorator.py
│   │       │   ├── env_settings.cp311-win_amd64.pyd
│   │       │   ├── env_settings.py
│   │       │   ├── errors.cp311-win_amd64.pyd
│   │       │   ├── errors.py
│   │       │   ├── error_wrappers.cp311-win_amd64.pyd
│   │       │   ├── error_wrappers.py
│   │       │   ├── fields.cp311-win_amd64.pyd
│   │       │   ├── fields.py
│   │       │   ├── generics.py
│   │       │   ├── json.cp311-win_amd64.pyd
│   │       │   ├── json.py
│   │       │   ├── main.cp311-win_amd64.pyd
│   │       │   ├── main.py
│   │       │   ├── mypy.cp311-win_amd64.pyd
│   │       │   ├── mypy.py
│   │       │   ├── networks.cp311-win_amd64.pyd
│   │       │   ├── networks.py
│   │       │   ├── parse.cp311-win_amd64.pyd
│   │       │   ├── parse.py
│   │       │   ├── py.typed
│   │       │   ├── schema.cp311-win_amd64.pyd
│   │       │   ├── schema.py
│   │       │   ├── tools.cp311-win_amd64.pyd
│   │       │   ├── tools.py
│   │       │   ├── types.cp311-win_amd64.pyd
│   │       │   ├── types.py
│   │       │   ├── typing.cp311-win_amd64.pyd
│   │       │   ├── typing.py
│   │       │   ├── utils.cp311-win_amd64.pyd
│   │       │   ├── utils.py
│   │       │   ├── v1 /
│   │       │   │   ├── annotated_types.py
│   │       │   │   ├── class_validators.py
│   │       │   │   ├── color.py
│   │       │   │   ├── config.py
│   │       │   │   ├── dataclasses.py
│   │       │   │   ├── datetime_parse.py
│   │       │   │   ├── decorator.py
│   │       │   │   ├── env_settings.py
│   │       │   │   ├── errors.py
│   │       │   │   ├── error_wrappers.py
│   │       │   │   ├── fields.py
│   │       │   │   ├── generics.py
│   │       │   │   ├── json.py
│   │       │   │   ├── main.py
│   │       │   │   ├── mypy.py
│   │       │   │   ├── networks.py
│   │       │   │   ├── parse.py
│   │       │   │   ├── schema.py
│   │       │   │   ├── tools.py
│   │       │   │   ├── types.py
│   │       │   │   ├── typing.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── validators.py
│   │       │   │   ├── version.py
│   │       │   │   ├── _hypothesis_plugin.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── annotated_types.cpython-311.pyc
│   │       │   │       ├── class_validators.cpython-311.pyc
│   │       │   │       ├── color.cpython-311.pyc
│   │       │   │       ├── config.cpython-311.pyc
│   │       │   │       ├── dataclasses.cpython-311.pyc
│   │       │   │       ├── datetime_parse.cpython-311.pyc
│   │       │   │       ├── decorator.cpython-311.pyc
│   │       │   │       ├── env_settings.cpython-311.pyc
│   │       │   │       ├── errors.cpython-311.pyc
│   │       │   │       ├── error_wrappers.cpython-311.pyc
│   │       │   │       ├── fields.cpython-311.pyc
│   │       │   │       ├── generics.cpython-311.pyc
│   │       │   │       ├── json.cpython-311.pyc
│   │       │   │       ├── main.cpython-311.pyc
│   │       │   │       ├── mypy.cpython-311.pyc
│   │       │   │       ├── networks.cpython-311.pyc
│   │       │   │       ├── parse.cpython-311.pyc
│   │       │   │       ├── schema.cpython-311.pyc
│   │       │   │       ├── tools.cpython-311.pyc
│   │       │   │       ├── types.cpython-311.pyc
│   │       │   │       ├── typing.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       ├── validators.cpython-311.pyc
│   │       │   │       ├── version.cpython-311.pyc
│   │       │   │       ├── _hypothesis_plugin.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── validators.cp311-win_amd64.pyd
│   │       │   ├── validators.py
│   │       │   ├── version.cp311-win_amd64.pyd
│   │       │   ├── version.py
│   │       │   ├── _hypothesis_plugin.cp311-win_amd64.pyd
│   │       │   ├── _hypothesis_plugin.py
│   │       │   ├── __init__.cp311-win_amd64.pyd
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── annotated_types.cpython-311.pyc
│   │       │       ├── class_validators.cpython-311.pyc
│   │       │       ├── color.cpython-311.pyc
│   │       │       ├── config.cpython-311.pyc
│   │       │       ├── dataclasses.cpython-311.pyc
│   │       │       ├── datetime_parse.cpython-311.pyc
│   │       │       ├── decorator.cpython-311.pyc
│   │       │       ├── env_settings.cpython-311.pyc
│   │       │       ├── errors.cpython-311.pyc
│   │       │       ├── error_wrappers.cpython-311.pyc
│   │       │       ├── fields.cpython-311.pyc
│   │       │       ├── generics.cpython-311.pyc
│   │       │       ├── json.cpython-311.pyc
│   │       │       ├── main.cpython-311.pyc
│   │       │       ├── mypy.cpython-311.pyc
│   │       │       ├── networks.cpython-311.pyc
│   │       │       ├── parse.cpython-311.pyc
│   │       │       ├── schema.cpython-311.pyc
│   │       │       ├── tools.cpython-311.pyc
│   │       │       ├── types.cpython-311.pyc
│   │       │       ├── typing.cpython-311.pyc
│   │       │       ├── utils.cpython-311.pyc
│   │       │       ├── validators.cpython-311.pyc
│   │       │       ├── version.cpython-311.pyc
│   │       │       ├── _hypothesis_plugin.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── pydantic-1.10.21.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── pymupdf /
│   │       │   ├── extra.py
│   │       │   ├── mupdf-devel /
│   │       │   │   ├── include /
│   │       │   │   │   └── mupdf /
│   │       │   │   │       ├── classes.h
│   │       │   │   │       ├── classes2.h
│   │       │   │   │       ├── exceptions.h
│   │       │   │   │       ├── extra.h
│   │       │   │   │       ├── fitz /
│   │       │   │   │       │   ├── archive.h
│   │       │   │   │       │   ├── band-writer.h
│   │       │   │   │       │   ├── bidi.h
│   │       │   │   │       │   ├── bitmap.h
│   │       │   │   │       │   ├── buffer.h
│   │       │   │   │       │   ├── color.h
│   │       │   │   │       │   ├── compress.h
│   │       │   │   │       │   ├── compressed-buffer.h
│   │       │   │   │       │   ├── config.h
│   │       │   │   │       │   ├── context.h
│   │       │   │   │       │   ├── crypt.h
│   │       │   │   │       │   ├── deskew.h
│   │       │   │   │       │   ├── device.h
│   │       │   │   │       │   ├── display-list.h
│   │       │   │   │       │   ├── document.h
│   │       │   │   │       │   ├── export.h
│   │       │   │   │       │   ├── filter.h
│   │       │   │   │       │   ├── font.h
│   │       │   │   │       │   ├── geometry.h
│   │       │   │   │       │   ├── getopt.h
│   │       │   │   │       │   ├── glyph-cache.h
│   │       │   │   │       │   ├── glyph.h
│   │       │   │   │       │   ├── hash.h
│   │       │   │   │       │   ├── heap-imp.h
│   │       │   │   │       │   ├── heap.h
│   │       │   │   │       │   ├── image.h
│   │       │   │   │       │   ├── link.h
│   │       │   │   │       │   ├── log.h
│   │       │   │   │       │   ├── outline.h
│   │       │   │   │       │   ├── output-svg.h
│   │       │   │   │       │   ├── output.h
│   │       │   │   │       │   ├── path.h
│   │       │   │   │       │   ├── pixmap.h
│   │       │   │   │       │   ├── pool.h
│   │       │   │   │       │   ├── separation.h
│   │       │   │   │       │   ├── shade.h
│   │       │   │   │       │   ├── store.h
│   │       │   │   │       │   ├── story-writer.h
│   │       │   │   │       │   ├── story.h
│   │       │   │   │       │   ├── stream.h
│   │       │   │   │       │   ├── string-util.h
│   │       │   │   │       │   ├── structured-text.h
│   │       │   │   │       │   ├── system.h
│   │       │   │   │       │   ├── text.h
│   │       │   │   │       │   ├── track-usage.h
│   │       │   │   │       │   ├── transition.h
│   │       │   │   │       │   ├── tree.h
│   │       │   │   │       │   ├── types.h
│   │       │   │   │       │   ├── util.h
│   │       │   │   │       │   ├── version.h
│   │       │   │   │       │   ├── write-pixmap.h
│   │       │   │   │       │   ├── writer.h
│   │       │   │   │       │   └── xml.h
│   │       │   │   │       ├── fitz.h
│   │       │   │   │       ├── functions.h
│   │       │   │   │       ├── helpers /
│   │       │   │   │       │   ├── mu-office-lib.h
│   │       │   │   │       │   ├── mu-threads.h
│   │       │   │   │       │   └── pkcs7-openssl.h
│   │       │   │   │       ├── html.h
│   │       │   │   │       ├── internal.h
│   │       │   │   │       ├── memento.h
│   │       │   │   │       ├── pdf /
│   │       │   │   │       │   ├── annot.h
│   │       │   │   │       │   ├── clean.h
│   │       │   │   │       │   ├── cmap.h
│   │       │   │   │       │   ├── crypt.h
│   │       │   │   │       │   ├── document.h
│   │       │   │   │       │   ├── event.h
│   │       │   │   │       │   ├── font.h
│   │       │   │   │       │   ├── form.h
│   │       │   │   │       │   ├── image-rewriter.h
│   │       │   │   │       │   ├── interpret.h
│   │       │   │   │       │   ├── javascript.h
│   │       │   │   │       │   ├── name-table.h
│   │       │   │   │       │   ├── object.h
│   │       │   │   │       │   ├── page.h
│   │       │   │   │       │   ├── parse.h
│   │       │   │   │       │   ├── recolor.h
│   │       │   │   │       │   ├── resource.h
│   │       │   │   │       │   ├── xref.h
│   │       │   │   │       │   └── zugferd.h
│   │       │   │   │       ├── pdf.h
│   │       │   │   │       └── ucdn.h
│   │       │   │   └── lib /
│   │       │   │       └── mupdfcpp64.lib
│   │       │   ├── mupdf.py
│   │       │   ├── mupdfcpp64.dll
│   │       │   ├── pymupdf.py
│   │       │   ├── table.py
│   │       │   ├── utils.py
│   │       │   ├── _apply_pages.py
│   │       │   ├── _build.py
│   │       │   ├── _extra.pyd
│   │       │   ├── _mupdf.pyd
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   └── __pycache__ /
│   │       │       ├── extra.cpython-311.pyc
│   │       │       ├── mupdf.cpython-311.pyc
│   │       │       ├── pymupdf.cpython-311.pyc
│   │       │       ├── table.cpython-311.pyc
│   │       │       ├── utils.cpython-311.pyc
│   │       │       ├── _apply_pages.cpython-311.pyc
│   │       │       ├── _build.cpython-311.pyc
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       └── __main__.cpython-311.pyc
│   │       ├── pymupdf-1.25.3.dist-info /
│   │       │   ├── COPYING
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── METADATA
│   │       │   ├── README.md
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   └── WHEEL
│   │       ├── PyPDF2 /
│   │       │   ├── constants.py
│   │       │   ├── errors.py
│   │       │   ├── filters.py
│   │       │   ├── generic /
│   │       │   │   ├── _annotations.py
│   │       │   │   ├── _base.py
│   │       │   │   ├── _data_structures.py
│   │       │   │   ├── _fit.py
│   │       │   │   ├── _outline.py
│   │       │   │   ├── _rectangle.py
│   │       │   │   ├── _utils.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── _annotations.cpython-311.pyc
│   │       │   │       ├── _base.cpython-311.pyc
│   │       │   │       ├── _data_structures.cpython-311.pyc
│   │       │   │       ├── _fit.cpython-311.pyc
│   │       │   │       ├── _outline.cpython-311.pyc
│   │       │   │       ├── _rectangle.cpython-311.pyc
│   │       │   │       ├── _utils.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── pagerange.py
│   │       │   ├── papersizes.py
│   │       │   ├── py.typed
│   │       │   ├── types.py
│   │       │   ├── xmp.py
│   │       │   ├── _cmap.py
│   │       │   ├── _codecs /
│   │       │   │   ├── adobe_glyphs.py
│   │       │   │   ├── pdfdoc.py
│   │       │   │   ├── std.py
│   │       │   │   ├── symbol.py
│   │       │   │   ├── zapfding.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── adobe_glyphs.cpython-311.pyc
│   │       │   │       ├── pdfdoc.cpython-311.pyc
│   │       │   │       ├── std.cpython-311.pyc
│   │       │   │       ├── symbol.cpython-311.pyc
│   │       │   │       ├── zapfding.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _encryption.py
│   │       │   ├── _merger.py
│   │       │   ├── _page.py
│   │       │   ├── _protocols.py
│   │       │   ├── _reader.py
│   │       │   ├── _security.py
│   │       │   ├── _utils.py
│   │       │   ├── _version.py
│   │       │   ├── _writer.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── constants.cpython-311.pyc
│   │       │       ├── errors.cpython-311.pyc
│   │       │       ├── filters.cpython-311.pyc
│   │       │       ├── pagerange.cpython-311.pyc
│   │       │       ├── papersizes.cpython-311.pyc
│   │       │       ├── types.cpython-311.pyc
│   │       │       ├── xmp.cpython-311.pyc
│   │       │       ├── _cmap.cpython-311.pyc
│   │       │       ├── _encryption.cpython-311.pyc
│   │       │       ├── _merger.cpython-311.pyc
│   │       │       ├── _page.cpython-311.pyc
│   │       │       ├── _protocols.cpython-311.pyc
│   │       │       ├── _reader.cpython-311.pyc
│   │       │       ├── _security.cpython-311.pyc
│   │       │       ├── _utils.cpython-311.pyc
│   │       │       ├── _version.cpython-311.pyc
│   │       │       ├── _writer.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── pypdf2-3.0.1.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   └── WHEEL
│   │       ├── python_dotenv-1.0.1.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── python_multipart /
│   │       │   ├── decoders.py
│   │       │   ├── exceptions.py
│   │       │   ├── multipart.py
│   │       │   ├── py.typed
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── decoders.cpython-311.pyc
│   │       │       ├── exceptions.cpython-311.pyc
│   │       │       ├── multipart.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── python_multipart-0.0.20.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── licenses /
│   │       │   │   └── LICENSE.txt
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   └── WHEEL
│   │       ├── PyYAML-6.0.2.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── reportlab /
│   │       │   ├── fonts /
│   │       │   │   ├── 00readme.txt
│   │       │   │   ├── bitstream-vera-license.txt
│   │       │   │   ├── callig15.afm
│   │       │   │   ├── callig15.pfb
│   │       │   │   ├── cobo____.pfb
│   │       │   │   ├── cob_____.pfb
│   │       │   │   ├── com_____.pfb
│   │       │   │   ├── coo_____.pfb
│   │       │   │   ├── DarkGarden-changelog.txt
│   │       │   │   ├── DarkGarden-copying-gpl.txt
│   │       │   │   ├── DarkGarden-copying.txt
│   │       │   │   ├── DarkGarden-readme.txt
│   │       │   │   ├── DarkGarden.sfd
│   │       │   │   ├── DarkGardenMK.afm
│   │       │   │   ├── DarkGardenMK.pfb
│   │       │   │   ├── hb-test.ttf
│   │       │   │   ├── sy______.pfb
│   │       │   │   ├── Vera.ttf
│   │       │   │   ├── VeraBd.ttf
│   │       │   │   ├── VeraBI.ttf
│   │       │   │   ├── VeraIt.ttf
│   │       │   │   ├── zd______.pfb
│   │       │   │   ├── zx______.pfb
│   │       │   │   ├── zy______.pfb
│   │       │   │   ├── _abi____.pfb
│   │       │   │   ├── _ab_____.pfb
│   │       │   │   ├── _ai_____.pfb
│   │       │   │   ├── _a______.pfb
│   │       │   │   ├── _ebi____.pfb
│   │       │   │   ├── _eb_____.pfb
│   │       │   │   ├── _ei_____.pfb
│   │       │   │   └── _er_____.pfb
│   │       │   ├── graphics /
│   │       │   │   ├── barcode /
│   │       │   │   │   ├── code128.py
│   │       │   │   │   ├── code39.py
│   │       │   │   │   ├── code93.py
│   │       │   │   │   ├── common.py
│   │       │   │   │   ├── dmtx.py
│   │       │   │   │   ├── eanbc.py
│   │       │   │   │   ├── ecc200datamatrix.py
│   │       │   │   │   ├── fourstate.py
│   │       │   │   │   ├── lto.py
│   │       │   │   │   ├── qr.py
│   │       │   │   │   ├── qrencoder.py
│   │       │   │   │   ├── test.py
│   │       │   │   │   ├── usps.py
│   │       │   │   │   ├── usps4s.py
│   │       │   │   │   ├── widgets.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── code128.cpython-311.pyc
│   │       │   │   │       ├── code39.cpython-311.pyc
│   │       │   │   │       ├── code93.cpython-311.pyc
│   │       │   │   │       ├── common.cpython-311.pyc
│   │       │   │   │       ├── dmtx.cpython-311.pyc
│   │       │   │   │       ├── eanbc.cpython-311.pyc
│   │       │   │   │       ├── ecc200datamatrix.cpython-311.pyc
│   │       │   │   │       ├── fourstate.cpython-311.pyc
│   │       │   │   │       ├── lto.cpython-311.pyc
│   │       │   │   │       ├── qr.cpython-311.pyc
│   │       │   │   │       ├── qrencoder.cpython-311.pyc
│   │       │   │   │       ├── test.cpython-311.pyc
│   │       │   │   │       ├── usps.cpython-311.pyc
│   │       │   │   │       ├── usps4s.cpython-311.pyc
│   │       │   │   │       ├── widgets.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── charts /
│   │       │   │   │   ├── areas.py
│   │       │   │   │   ├── axes.py
│   │       │   │   │   ├── barcharts.py
│   │       │   │   │   ├── dotbox.py
│   │       │   │   │   ├── doughnut.py
│   │       │   │   │   ├── legends.py
│   │       │   │   │   ├── linecharts.py
│   │       │   │   │   ├── lineplots.py
│   │       │   │   │   ├── markers.py
│   │       │   │   │   ├── piecharts.py
│   │       │   │   │   ├── slidebox.py
│   │       │   │   │   ├── spider.py
│   │       │   │   │   ├── textlabels.py
│   │       │   │   │   ├── utils.py
│   │       │   │   │   ├── utils3d.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── areas.cpython-311.pyc
│   │       │   │   │       ├── axes.cpython-311.pyc
│   │       │   │   │       ├── barcharts.cpython-311.pyc
│   │       │   │   │       ├── dotbox.cpython-311.pyc
│   │       │   │   │       ├── doughnut.cpython-311.pyc
│   │       │   │   │       ├── legends.cpython-311.pyc
│   │       │   │   │       ├── linecharts.cpython-311.pyc
│   │       │   │   │       ├── lineplots.cpython-311.pyc
│   │       │   │   │       ├── markers.cpython-311.pyc
│   │       │   │   │       ├── piecharts.cpython-311.pyc
│   │       │   │   │       ├── slidebox.cpython-311.pyc
│   │       │   │   │       ├── spider.cpython-311.pyc
│   │       │   │   │       ├── textlabels.cpython-311.pyc
│   │       │   │   │       ├── utils.cpython-311.pyc
│   │       │   │   │       ├── utils3d.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── renderbase.py
│   │       │   │   ├── renderPDF.py
│   │       │   │   ├── renderPM.py
│   │       │   │   ├── renderPS.py
│   │       │   │   ├── renderSVG.py
│   │       │   │   ├── samples /
│   │       │   │   │   ├── bubble.py
│   │       │   │   │   ├── clustered_bar.py
│   │       │   │   │   ├── clustered_column.py
│   │       │   │   │   ├── excelcolors.py
│   │       │   │   │   ├── exploded_pie.py
│   │       │   │   │   ├── filled_radar.py
│   │       │   │   │   ├── linechart_with_markers.py
│   │       │   │   │   ├── line_chart.py
│   │       │   │   │   ├── radar.py
│   │       │   │   │   ├── runall.py
│   │       │   │   │   ├── scatter.py
│   │       │   │   │   ├── scatter_lines.py
│   │       │   │   │   ├── scatter_lines_markers.py
│   │       │   │   │   ├── simple_pie.py
│   │       │   │   │   ├── stacked_bar.py
│   │       │   │   │   ├── stacked_column.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── bubble.cpython-311.pyc
│   │       │   │   │       ├── clustered_bar.cpython-311.pyc
│   │       │   │   │       ├── clustered_column.cpython-311.pyc
│   │       │   │   │       ├── excelcolors.cpython-311.pyc
│   │       │   │   │       ├── exploded_pie.cpython-311.pyc
│   │       │   │   │       ├── filled_radar.cpython-311.pyc
│   │       │   │   │       ├── linechart_with_markers.cpython-311.pyc
│   │       │   │   │       ├── line_chart.cpython-311.pyc
│   │       │   │   │       ├── radar.cpython-311.pyc
│   │       │   │   │       ├── runall.cpython-311.pyc
│   │       │   │   │       ├── scatter.cpython-311.pyc
│   │       │   │   │       ├── scatter_lines.cpython-311.pyc
│   │       │   │   │       ├── scatter_lines_markers.cpython-311.pyc
│   │       │   │   │       ├── simple_pie.cpython-311.pyc
│   │       │   │   │       ├── stacked_bar.cpython-311.pyc
│   │       │   │   │       ├── stacked_column.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── shapes.py
│   │       │   │   ├── svgpath.py
│   │       │   │   ├── testdrawings.py
│   │       │   │   ├── testshapes.py
│   │       │   │   ├── transform.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── widgetbase.py
│   │       │   │   ├── widgets /
│   │       │   │   │   ├── adjustableArrow.py
│   │       │   │   │   ├── eventcal.py
│   │       │   │   │   ├── flags.py
│   │       │   │   │   ├── grids.py
│   │       │   │   │   ├── markers.py
│   │       │   │   │   ├── signsandsymbols.py
│   │       │   │   │   ├── table.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── adjustableArrow.cpython-311.pyc
│   │       │   │   │       ├── eventcal.cpython-311.pyc
│   │       │   │   │       ├── flags.cpython-311.pyc
│   │       │   │   │       ├── grids.cpython-311.pyc
│   │       │   │   │       ├── markers.cpython-311.pyc
│   │       │   │   │       ├── signsandsymbols.cpython-311.pyc
│   │       │   │   │       ├── table.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── renderbase.cpython-311.pyc
│   │       │   │       ├── renderPDF.cpython-311.pyc
│   │       │   │       ├── renderPM.cpython-311.pyc
│   │       │   │       ├── renderPS.cpython-311.pyc
│   │       │   │       ├── renderSVG.cpython-311.pyc
│   │       │   │       ├── shapes.cpython-311.pyc
│   │       │   │       ├── svgpath.cpython-311.pyc
│   │       │   │       ├── testdrawings.cpython-311.pyc
│   │       │   │       ├── testshapes.cpython-311.pyc
│   │       │   │       ├── transform.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       ├── widgetbase.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── lib /
│   │       │   │   ├── abag.py
│   │       │   │   ├── arciv.py
│   │       │   │   ├── attrmap.py
│   │       │   │   ├── boxstuff.py
│   │       │   │   ├── codecharts.py
│   │       │   │   ├── colors.py
│   │       │   │   ├── corp.py
│   │       │   │   ├── enums.py
│   │       │   │   ├── extformat.py
│   │       │   │   ├── fontfinder.py
│   │       │   │   ├── fonts.py
│   │       │   │   ├── formatters.py
│   │       │   │   ├── geomutils.py
│   │       │   │   ├── logger.py
│   │       │   │   ├── normalDate.py
│   │       │   │   ├── pagesizes.py
│   │       │   │   ├── pdfencrypt.py
│   │       │   │   ├── PyFontify.py
│   │       │   │   ├── pygments2xpre.py
│   │       │   │   ├── randomtext.py
│   │       │   │   ├── rltempfile.py
│   │       │   │   ├── rl_accel.py
│   │       │   │   ├── rl_safe_eval.py
│   │       │   │   ├── rparsexml.py
│   │       │   │   ├── sequencer.py
│   │       │   │   ├── styles.py
│   │       │   │   ├── testutils.py
│   │       │   │   ├── textsplit.py
│   │       │   │   ├── units.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── validators.py
│   │       │   │   ├── yaml.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── abag.cpython-311.pyc
│   │       │   │       ├── arciv.cpython-311.pyc
│   │       │   │       ├── attrmap.cpython-311.pyc
│   │       │   │       ├── boxstuff.cpython-311.pyc
│   │       │   │       ├── codecharts.cpython-311.pyc
│   │       │   │       ├── colors.cpython-311.pyc
│   │       │   │       ├── corp.cpython-311.pyc
│   │       │   │       ├── enums.cpython-311.pyc
│   │       │   │       ├── extformat.cpython-311.pyc
│   │       │   │       ├── fontfinder.cpython-311.pyc
│   │       │   │       ├── fonts.cpython-311.pyc
│   │       │   │       ├── formatters.cpython-311.pyc
│   │       │   │       ├── geomutils.cpython-311.pyc
│   │       │   │       ├── logger.cpython-311.pyc
│   │       │   │       ├── normalDate.cpython-311.pyc
│   │       │   │       ├── pagesizes.cpython-311.pyc
│   │       │   │       ├── pdfencrypt.cpython-311.pyc
│   │       │   │       ├── PyFontify.cpython-311.pyc
│   │       │   │       ├── pygments2xpre.cpython-311.pyc
│   │       │   │       ├── randomtext.cpython-311.pyc
│   │       │   │       ├── rltempfile.cpython-311.pyc
│   │       │   │       ├── rl_accel.cpython-311.pyc
│   │       │   │       ├── rl_safe_eval.cpython-311.pyc
│   │       │   │       ├── rparsexml.cpython-311.pyc
│   │       │   │       ├── sequencer.cpython-311.pyc
│   │       │   │       ├── styles.cpython-311.pyc
│   │       │   │       ├── testutils.cpython-311.pyc
│   │       │   │       ├── textsplit.cpython-311.pyc
│   │       │   │       ├── units.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       ├── validators.cpython-311.pyc
│   │       │   │       ├── yaml.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── pdfbase /
│   │       │   │   ├── acroform.py
│   │       │   │   ├── cidfonts.py
│   │       │   │   ├── pdfdoc.py
│   │       │   │   ├── pdfform.py
│   │       │   │   ├── pdfmetrics.py
│   │       │   │   ├── pdfpattern.py
│   │       │   │   ├── pdfutils.py
│   │       │   │   ├── rl_codecs.py
│   │       │   │   ├── ttfonts.py
│   │       │   │   ├── _can_cmap_data.py
│   │       │   │   ├── _cidfontdata.py
│   │       │   │   ├── _fontdata.py
│   │       │   │   ├── _fontdata_enc_macexpert.py
│   │       │   │   ├── _fontdata_enc_macroman.py
│   │       │   │   ├── _fontdata_enc_pdfdoc.py
│   │       │   │   ├── _fontdata_enc_standard.py
│   │       │   │   ├── _fontdata_enc_symbol.py
│   │       │   │   ├── _fontdata_enc_winansi.py
│   │       │   │   ├── _fontdata_enc_zapfdingbats.py
│   │       │   │   ├── _fontdata_widths_courier.py
│   │       │   │   ├── _fontdata_widths_courierbold.py
│   │       │   │   ├── _fontdata_widths_courierboldoblique.py
│   │       │   │   ├── _fontdata_widths_courieroblique.py
│   │       │   │   ├── _fontdata_widths_helvetica.py
│   │       │   │   ├── _fontdata_widths_helveticabold.py
│   │       │   │   ├── _fontdata_widths_helveticaboldoblique.py
│   │       │   │   ├── _fontdata_widths_helveticaoblique.py
│   │       │   │   ├── _fontdata_widths_symbol.py
│   │       │   │   ├── _fontdata_widths_timesbold.py
│   │       │   │   ├── _fontdata_widths_timesbolditalic.py
│   │       │   │   ├── _fontdata_widths_timesitalic.py
│   │       │   │   ├── _fontdata_widths_timesroman.py
│   │       │   │   ├── _fontdata_widths_zapfdingbats.py
│   │       │   │   ├── _glyphlist.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── acroform.cpython-311.pyc
│   │       │   │       ├── cidfonts.cpython-311.pyc
│   │       │   │       ├── pdfdoc.cpython-311.pyc
│   │       │   │       ├── pdfform.cpython-311.pyc
│   │       │   │       ├── pdfmetrics.cpython-311.pyc
│   │       │   │       ├── pdfpattern.cpython-311.pyc
│   │       │   │       ├── pdfutils.cpython-311.pyc
│   │       │   │       ├── rl_codecs.cpython-311.pyc
│   │       │   │       ├── ttfonts.cpython-311.pyc
│   │       │   │       ├── _can_cmap_data.cpython-311.pyc
│   │       │   │       ├── _cidfontdata.cpython-311.pyc
│   │       │   │       ├── _fontdata.cpython-311.pyc
│   │       │   │       ├── _fontdata_enc_macexpert.cpython-311.pyc
│   │       │   │       ├── _fontdata_enc_macroman.cpython-311.pyc
│   │       │   │       ├── _fontdata_enc_pdfdoc.cpython-311.pyc
│   │       │   │       ├── _fontdata_enc_standard.cpython-311.pyc
│   │       │   │       ├── _fontdata_enc_symbol.cpython-311.pyc
│   │       │   │       ├── _fontdata_enc_winansi.cpython-311.pyc
│   │       │   │       ├── _fontdata_enc_zapfdingbats.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_courier.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_courierbold.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_courierboldoblique.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_courieroblique.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_helvetica.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_helveticabold.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_helveticaboldoblique.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_helveticaoblique.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_symbol.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_timesbold.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_timesbolditalic.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_timesitalic.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_timesroman.cpython-311.pyc
│   │       │   │       ├── _fontdata_widths_zapfdingbats.cpython-311.pyc
│   │       │   │       ├── _glyphlist.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── pdfgen /
│   │       │   │   ├── canvas.py
│   │       │   │   ├── pathobject.py
│   │       │   │   ├── pdfgeom.py
│   │       │   │   ├── pdfimages.py
│   │       │   │   ├── textobject.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── canvas.cpython-311.pyc
│   │       │   │       ├── pathobject.cpython-311.pyc
│   │       │   │       ├── pdfgeom.cpython-311.pyc
│   │       │   │       ├── pdfimages.cpython-311.pyc
│   │       │   │       ├── textobject.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── platypus /
│   │       │   │   ├── doctemplate.py
│   │       │   │   ├── figures.py
│   │       │   │   ├── flowables.py
│   │       │   │   ├── frames.py
│   │       │   │   ├── multicol.py
│   │       │   │   ├── para.py
│   │       │   │   ├── paragraph.py
│   │       │   │   ├── paraparser.py
│   │       │   │   ├── tableofcontents.py
│   │       │   │   ├── tables.py
│   │       │   │   ├── xpreformatted.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── doctemplate.cpython-311.pyc
│   │       │   │       ├── figures.cpython-311.pyc
│   │       │   │       ├── flowables.cpython-311.pyc
│   │       │   │       ├── frames.cpython-311.pyc
│   │       │   │       ├── multicol.cpython-311.pyc
│   │       │   │       ├── para.cpython-311.pyc
│   │       │   │       ├── paragraph.cpython-311.pyc
│   │       │   │       ├── paraparser.cpython-311.pyc
│   │       │   │       ├── tableofcontents.cpython-311.pyc
│   │       │   │       ├── tables.cpython-311.pyc
│   │       │   │       ├── xpreformatted.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── rl_config.py
│   │       │   ├── rl_settings.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── rl_config.cpython-311.pyc
│   │       │       ├── rl_settings.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── reportlab-4.3.1.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── rust /
│   │       │   ├── Cargo.toml
│   │       │   ├── cryptography-cffi /
│   │       │   │   └── Cargo.toml
│   │       │   ├── cryptography-keepalive /
│   │       │   │   └── Cargo.toml
│   │       │   ├── cryptography-key-parsing /
│   │       │   │   └── Cargo.toml
│   │       │   ├── cryptography-openssl /
│   │       │   │   └── Cargo.toml
│   │       │   ├── cryptography-x509 /
│   │       │   │   └── Cargo.toml
│   │       │   └── cryptography-x509-verification /
│   │       │       └── Cargo.toml
│   │       ├── setuptools /
│   │       │   ├── archive_util.py
│   │       │   ├── build_meta.py
│   │       │   ├── cli-32.exe
│   │       │   ├── cli-64.exe
│   │       │   ├── cli-arm64.exe
│   │       │   ├── cli.exe
│   │       │   ├── command /
│   │       │   │   ├── alias.py
│   │       │   │   ├── bdist_egg.py
│   │       │   │   ├── bdist_rpm.py
│   │       │   │   ├── build.py
│   │       │   │   ├── build_clib.py
│   │       │   │   ├── build_ext.py
│   │       │   │   ├── build_py.py
│   │       │   │   ├── develop.py
│   │       │   │   ├── dist_info.py
│   │       │   │   ├── easy_install.py
│   │       │   │   ├── editable_wheel.py
│   │       │   │   ├── egg_info.py
│   │       │   │   ├── install.py
│   │       │   │   ├── install_egg_info.py
│   │       │   │   ├── install_lib.py
│   │       │   │   ├── install_scripts.py
│   │       │   │   ├── launcher manifest.xml
│   │       │   │   ├── py36compat.py
│   │       │   │   ├── register.py
│   │       │   │   ├── rotate.py
│   │       │   │   ├── saveopts.py
│   │       │   │   ├── sdist.py
│   │       │   │   ├── setopt.py
│   │       │   │   ├── test.py
│   │       │   │   ├── upload.py
│   │       │   │   ├── upload_docs.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── alias.cpython-311.pyc
│   │       │   │       ├── bdist_egg.cpython-311.pyc
│   │       │   │       ├── bdist_rpm.cpython-311.pyc
│   │       │   │       ├── build.cpython-311.pyc
│   │       │   │       ├── build_clib.cpython-311.pyc
│   │       │   │       ├── build_ext.cpython-311.pyc
│   │       │   │       ├── build_py.cpython-311.pyc
│   │       │   │       ├── develop.cpython-311.pyc
│   │       │   │       ├── dist_info.cpython-311.pyc
│   │       │   │       ├── easy_install.cpython-311.pyc
│   │       │   │       ├── editable_wheel.cpython-311.pyc
│   │       │   │       ├── egg_info.cpython-311.pyc
│   │       │   │       ├── install.cpython-311.pyc
│   │       │   │       ├── install_egg_info.cpython-311.pyc
│   │       │   │       ├── install_lib.cpython-311.pyc
│   │       │   │       ├── install_scripts.cpython-311.pyc
│   │       │   │       ├── py36compat.cpython-311.pyc
│   │       │   │       ├── register.cpython-311.pyc
│   │       │   │       ├── rotate.cpython-311.pyc
│   │       │   │       ├── saveopts.cpython-311.pyc
│   │       │   │       ├── sdist.cpython-311.pyc
│   │       │   │       ├── setopt.cpython-311.pyc
│   │       │   │       ├── test.cpython-311.pyc
│   │       │   │       ├── upload.cpython-311.pyc
│   │       │   │       ├── upload_docs.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── config /
│   │       │   │   ├── expand.py
│   │       │   │   ├── pyprojecttoml.py
│   │       │   │   ├── setupcfg.py
│   │       │   │   ├── _apply_pyprojecttoml.py
│   │       │   │   ├── _validate_pyproject /
│   │       │   │   │   ├── error_reporting.py
│   │       │   │   │   ├── extra_validations.py
│   │       │   │   │   ├── fastjsonschema_exceptions.py
│   │       │   │   │   ├── fastjsonschema_validations.py
│   │       │   │   │   ├── formats.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── error_reporting.cpython-311.pyc
│   │       │   │   │       ├── extra_validations.cpython-311.pyc
│   │       │   │   │       ├── fastjsonschema_exceptions.cpython-311.pyc
│   │       │   │   │       ├── fastjsonschema_validations.cpython-311.pyc
│   │       │   │   │       ├── formats.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── expand.cpython-311.pyc
│   │       │   │       ├── pyprojecttoml.cpython-311.pyc
│   │       │   │       ├── setupcfg.cpython-311.pyc
│   │       │   │       ├── _apply_pyprojecttoml.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── depends.py
│   │       │   ├── dep_util.py
│   │       │   ├── discovery.py
│   │       │   ├── dist.py
│   │       │   ├── errors.py
│   │       │   ├── extension.py
│   │       │   ├── extern /
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── glob.py
│   │       │   ├── gui-32.exe
│   │       │   ├── gui-64.exe
│   │       │   ├── gui-arm64.exe
│   │       │   ├── gui.exe
│   │       │   ├── installer.py
│   │       │   ├── launch.py
│   │       │   ├── logging.py
│   │       │   ├── monkey.py
│   │       │   ├── msvc.py
│   │       │   ├── namespaces.py
│   │       │   ├── package_index.py
│   │       │   ├── py34compat.py
│   │       │   ├── sandbox.py
│   │       │   ├── script (dev).tmpl
│   │       │   ├── script.tmpl
│   │       │   ├── unicode_utils.py
│   │       │   ├── version.py
│   │       │   ├── wheel.py
│   │       │   ├── windows_support.py
│   │       │   ├── _deprecation_warning.py
│   │       │   ├── _distutils /
│   │       │   │   ├── archive_util.py
│   │       │   │   ├── bcppcompiler.py
│   │       │   │   ├── ccompiler.py
│   │       │   │   ├── cmd.py
│   │       │   │   ├── command /
│   │       │   │   │   ├── bdist.py
│   │       │   │   │   ├── bdist_dumb.py
│   │       │   │   │   ├── bdist_rpm.py
│   │       │   │   │   ├── build.py
│   │       │   │   │   ├── build_clib.py
│   │       │   │   │   ├── build_ext.py
│   │       │   │   │   ├── build_py.py
│   │       │   │   │   ├── build_scripts.py
│   │       │   │   │   ├── check.py
│   │       │   │   │   ├── clean.py
│   │       │   │   │   ├── config.py
│   │       │   │   │   ├── install.py
│   │       │   │   │   ├── install_data.py
│   │       │   │   │   ├── install_egg_info.py
│   │       │   │   │   ├── install_headers.py
│   │       │   │   │   ├── install_lib.py
│   │       │   │   │   ├── install_scripts.py
│   │       │   │   │   ├── py37compat.py
│   │       │   │   │   ├── register.py
│   │       │   │   │   ├── sdist.py
│   │       │   │   │   ├── upload.py
│   │       │   │   │   ├── _framework_compat.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── bdist.cpython-311.pyc
│   │       │   │   │       ├── bdist_dumb.cpython-311.pyc
│   │       │   │   │       ├── bdist_rpm.cpython-311.pyc
│   │       │   │   │       ├── build.cpython-311.pyc
│   │       │   │   │       ├── build_clib.cpython-311.pyc
│   │       │   │   │       ├── build_ext.cpython-311.pyc
│   │       │   │   │       ├── build_py.cpython-311.pyc
│   │       │   │   │       ├── build_scripts.cpython-311.pyc
│   │       │   │   │       ├── check.cpython-311.pyc
│   │       │   │   │       ├── clean.cpython-311.pyc
│   │       │   │   │       ├── config.cpython-311.pyc
│   │       │   │   │       ├── install.cpython-311.pyc
│   │       │   │   │       ├── install_data.cpython-311.pyc
│   │       │   │   │       ├── install_egg_info.cpython-311.pyc
│   │       │   │   │       ├── install_headers.cpython-311.pyc
│   │       │   │   │       ├── install_lib.cpython-311.pyc
│   │       │   │   │       ├── install_scripts.cpython-311.pyc
│   │       │   │   │       ├── py37compat.cpython-311.pyc
│   │       │   │   │       ├── register.cpython-311.pyc
│   │       │   │   │       ├── sdist.cpython-311.pyc
│   │       │   │   │       ├── upload.cpython-311.pyc
│   │       │   │   │       ├── _framework_compat.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── config.py
│   │       │   │   ├── core.py
│   │       │   │   ├── cygwinccompiler.py
│   │       │   │   ├── debug.py
│   │       │   │   ├── dep_util.py
│   │       │   │   ├── dir_util.py
│   │       │   │   ├── dist.py
│   │       │   │   ├── errors.py
│   │       │   │   ├── extension.py
│   │       │   │   ├── fancy_getopt.py
│   │       │   │   ├── filelist.py
│   │       │   │   ├── file_util.py
│   │       │   │   ├── log.py
│   │       │   │   ├── msvc9compiler.py
│   │       │   │   ├── msvccompiler.py
│   │       │   │   ├── py38compat.py
│   │       │   │   ├── py39compat.py
│   │       │   │   ├── spawn.py
│   │       │   │   ├── sysconfig.py
│   │       │   │   ├── text_file.py
│   │       │   │   ├── unixccompiler.py
│   │       │   │   ├── util.py
│   │       │   │   ├── version.py
│   │       │   │   ├── versionpredicate.py
│   │       │   │   ├── _collections.py
│   │       │   │   ├── _functools.py
│   │       │   │   ├── _macos_compat.py
│   │       │   │   ├── _msvccompiler.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── archive_util.cpython-311.pyc
│   │       │   │       ├── bcppcompiler.cpython-311.pyc
│   │       │   │       ├── ccompiler.cpython-311.pyc
│   │       │   │       ├── cmd.cpython-311.pyc
│   │       │   │       ├── config.cpython-311.pyc
│   │       │   │       ├── core.cpython-311.pyc
│   │       │   │       ├── cygwinccompiler.cpython-311.pyc
│   │       │   │       ├── debug.cpython-311.pyc
│   │       │   │       ├── dep_util.cpython-311.pyc
│   │       │   │       ├── dir_util.cpython-311.pyc
│   │       │   │       ├── dist.cpython-311.pyc
│   │       │   │       ├── errors.cpython-311.pyc
│   │       │   │       ├── extension.cpython-311.pyc
│   │       │   │       ├── fancy_getopt.cpython-311.pyc
│   │       │   │       ├── filelist.cpython-311.pyc
│   │       │   │       ├── file_util.cpython-311.pyc
│   │       │   │       ├── log.cpython-311.pyc
│   │       │   │       ├── msvc9compiler.cpython-311.pyc
│   │       │   │       ├── msvccompiler.cpython-311.pyc
│   │       │   │       ├── py38compat.cpython-311.pyc
│   │       │   │       ├── py39compat.cpython-311.pyc
│   │       │   │       ├── spawn.cpython-311.pyc
│   │       │   │       ├── sysconfig.cpython-311.pyc
│   │       │   │       ├── text_file.cpython-311.pyc
│   │       │   │       ├── unixccompiler.cpython-311.pyc
│   │       │   │       ├── util.cpython-311.pyc
│   │       │   │       ├── version.cpython-311.pyc
│   │       │   │       ├── versionpredicate.cpython-311.pyc
│   │       │   │       ├── _collections.cpython-311.pyc
│   │       │   │       ├── _functools.cpython-311.pyc
│   │       │   │       ├── _macos_compat.cpython-311.pyc
│   │       │   │       ├── _msvccompiler.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _entry_points.py
│   │       │   ├── _imp.py
│   │       │   ├── _importlib.py
│   │       │   ├── _itertools.py
│   │       │   ├── _path.py
│   │       │   ├── _reqs.py
│   │       │   ├── _vendor /
│   │       │   │   ├── importlib_metadata /
│   │       │   │   │   ├── _adapters.py
│   │       │   │   │   ├── _collections.py
│   │       │   │   │   ├── _compat.py
│   │       │   │   │   ├── _functools.py
│   │       │   │   │   ├── _itertools.py
│   │       │   │   │   ├── _meta.py
│   │       │   │   │   ├── _text.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── _adapters.cpython-311.pyc
│   │       │   │   │       ├── _collections.cpython-311.pyc
│   │       │   │   │       ├── _compat.cpython-311.pyc
│   │       │   │   │       ├── _functools.cpython-311.pyc
│   │       │   │   │       ├── _itertools.cpython-311.pyc
│   │       │   │   │       ├── _meta.cpython-311.pyc
│   │       │   │   │       ├── _text.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── importlib_resources /
│   │       │   │   │   ├── abc.py
│   │       │   │   │   ├── readers.py
│   │       │   │   │   ├── simple.py
│   │       │   │   │   ├── _adapters.py
│   │       │   │   │   ├── _common.py
│   │       │   │   │   ├── _compat.py
│   │       │   │   │   ├── _itertools.py
│   │       │   │   │   ├── _legacy.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── abc.cpython-311.pyc
│   │       │   │   │       ├── readers.cpython-311.pyc
│   │       │   │   │       ├── simple.cpython-311.pyc
│   │       │   │   │       ├── _adapters.cpython-311.pyc
│   │       │   │   │       ├── _common.cpython-311.pyc
│   │       │   │   │       ├── _compat.cpython-311.pyc
│   │       │   │   │       ├── _itertools.cpython-311.pyc
│   │       │   │   │       ├── _legacy.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── jaraco /
│   │       │   │   │   ├── context.py
│   │       │   │   │   ├── functools.py
│   │       │   │   │   ├── text /
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── context.cpython-311.pyc
│   │       │   │   │       ├── functools.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── more_itertools /
│   │       │   │   │   ├── more.py
│   │       │   │   │   ├── recipes.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── more.cpython-311.pyc
│   │       │   │   │       ├── recipes.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── ordered_set.py
│   │       │   │   ├── packaging /
│   │       │   │   │   ├── markers.py
│   │       │   │   │   ├── requirements.py
│   │       │   │   │   ├── specifiers.py
│   │       │   │   │   ├── tags.py
│   │       │   │   │   ├── utils.py
│   │       │   │   │   ├── version.py
│   │       │   │   │   ├── _manylinux.py
│   │       │   │   │   ├── _musllinux.py
│   │       │   │   │   ├── _structures.py
│   │       │   │   │   ├── __about__.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── markers.cpython-311.pyc
│   │       │   │   │       ├── requirements.cpython-311.pyc
│   │       │   │   │       ├── specifiers.cpython-311.pyc
│   │       │   │   │       ├── tags.cpython-311.pyc
│   │       │   │   │       ├── utils.cpython-311.pyc
│   │       │   │   │       ├── version.cpython-311.pyc
│   │       │   │   │       ├── _manylinux.cpython-311.pyc
│   │       │   │   │       ├── _musllinux.cpython-311.pyc
│   │       │   │   │       ├── _structures.cpython-311.pyc
│   │       │   │   │       ├── __about__.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── pyparsing /
│   │       │   │   │   ├── actions.py
│   │       │   │   │   ├── common.py
│   │       │   │   │   ├── core.py
│   │       │   │   │   ├── diagram /
│   │       │   │   │   │   ├── __init__.py
│   │       │   │   │   │   └── __pycache__ /
│   │       │   │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   │   ├── exceptions.py
│   │       │   │   │   ├── helpers.py
│   │       │   │   │   ├── results.py
│   │       │   │   │   ├── testing.py
│   │       │   │   │   ├── unicode.py
│   │       │   │   │   ├── util.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── actions.cpython-311.pyc
│   │       │   │   │       ├── common.cpython-311.pyc
│   │       │   │   │       ├── core.cpython-311.pyc
│   │       │   │   │       ├── exceptions.cpython-311.pyc
│   │       │   │   │       ├── helpers.cpython-311.pyc
│   │       │   │   │       ├── results.cpython-311.pyc
│   │       │   │   │       ├── testing.cpython-311.pyc
│   │       │   │   │       ├── unicode.cpython-311.pyc
│   │       │   │   │       ├── util.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── tomli /
│   │       │   │   │   ├── _parser.py
│   │       │   │   │   ├── _re.py
│   │       │   │   │   ├── _types.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── _parser.cpython-311.pyc
│   │       │   │   │       ├── _re.cpython-311.pyc
│   │       │   │   │       ├── _types.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── typing_extensions.py
│   │       │   │   ├── zipp.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── ordered_set.cpython-311.pyc
│   │       │   │       ├── typing_extensions.cpython-311.pyc
│   │       │   │       ├── zipp.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── archive_util.cpython-311.pyc
│   │       │       ├── build_meta.cpython-311.pyc
│   │       │       ├── depends.cpython-311.pyc
│   │       │       ├── dep_util.cpython-311.pyc
│   │       │       ├── discovery.cpython-311.pyc
│   │       │       ├── dist.cpython-311.pyc
│   │       │       ├── errors.cpython-311.pyc
│   │       │       ├── extension.cpython-311.pyc
│   │       │       ├── glob.cpython-311.pyc
│   │       │       ├── installer.cpython-311.pyc
│   │       │       ├── launch.cpython-311.pyc
│   │       │       ├── logging.cpython-311.pyc
│   │       │       ├── monkey.cpython-311.pyc
│   │       │       ├── msvc.cpython-311.pyc
│   │       │       ├── namespaces.cpython-311.pyc
│   │       │       ├── package_index.cpython-311.pyc
│   │       │       ├── py34compat.cpython-311.pyc
│   │       │       ├── sandbox.cpython-311.pyc
│   │       │       ├── unicode_utils.cpython-311.pyc
│   │       │       ├── version.cpython-311.pyc
│   │       │       ├── wheel.cpython-311.pyc
│   │       │       ├── windows_support.cpython-311.pyc
│   │       │       ├── _deprecation_warning.cpython-311.pyc
│   │       │       ├── _entry_points.cpython-311.pyc
│   │       │       ├── _imp.cpython-311.pyc
│   │       │       ├── _importlib.cpython-311.pyc
│   │       │       ├── _itertools.cpython-311.pyc
│   │       │       ├── _path.cpython-311.pyc
│   │       │       ├── _reqs.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── setuptools-65.5.0.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── sniffio /
│   │       │   ├── py.typed
│   │       │   ├── _impl.py
│   │       │   ├── _tests /
│   │       │   │   ├── test_sniffio.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── test_sniffio.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── _version.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── _impl.cpython-311.pyc
│   │       │       ├── _version.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── sniffio-1.3.1.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── LICENSE.APACHE2
│   │       │   ├── LICENSE.MIT
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── starlette /
│   │       │   ├── applications.py
│   │       │   ├── authentication.py
│   │       │   ├── background.py
│   │       │   ├── concurrency.py
│   │       │   ├── config.py
│   │       │   ├── convertors.py
│   │       │   ├── datastructures.py
│   │       │   ├── endpoints.py
│   │       │   ├── exceptions.py
│   │       │   ├── formparsers.py
│   │       │   ├── middleware /
│   │       │   │   ├── authentication.py
│   │       │   │   ├── base.py
│   │       │   │   ├── cors.py
│   │       │   │   ├── errors.py
│   │       │   │   ├── exceptions.py
│   │       │   │   ├── gzip.py
│   │       │   │   ├── httpsredirect.py
│   │       │   │   ├── sessions.py
│   │       │   │   ├── trustedhost.py
│   │       │   │   ├── wsgi.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── authentication.cpython-311.pyc
│   │       │   │       ├── base.cpython-311.pyc
│   │       │   │       ├── cors.cpython-311.pyc
│   │       │   │       ├── errors.cpython-311.pyc
│   │       │   │       ├── exceptions.cpython-311.pyc
│   │       │   │       ├── gzip.cpython-311.pyc
│   │       │   │       ├── httpsredirect.cpython-311.pyc
│   │       │   │       ├── sessions.cpython-311.pyc
│   │       │   │       ├── trustedhost.cpython-311.pyc
│   │       │   │       ├── wsgi.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── py.typed
│   │       │   ├── requests.py
│   │       │   ├── responses.py
│   │       │   ├── routing.py
│   │       │   ├── schemas.py
│   │       │   ├── staticfiles.py
│   │       │   ├── status.py
│   │       │   ├── templating.py
│   │       │   ├── testclient.py
│   │       │   ├── types.py
│   │       │   ├── websockets.py
│   │       │   ├── _compat.py
│   │       │   ├── _utils.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── applications.cpython-311.pyc
│   │       │       ├── authentication.cpython-311.pyc
│   │       │       ├── background.cpython-311.pyc
│   │       │       ├── concurrency.cpython-311.pyc
│   │       │       ├── config.cpython-311.pyc
│   │       │       ├── convertors.cpython-311.pyc
│   │       │       ├── datastructures.cpython-311.pyc
│   │       │       ├── endpoints.cpython-311.pyc
│   │       │       ├── exceptions.cpython-311.pyc
│   │       │       ├── formparsers.cpython-311.pyc
│   │       │       ├── requests.cpython-311.pyc
│   │       │       ├── responses.cpython-311.pyc
│   │       │       ├── routing.cpython-311.pyc
│   │       │       ├── schemas.cpython-311.pyc
│   │       │       ├── staticfiles.cpython-311.pyc
│   │       │       ├── status.cpython-311.pyc
│   │       │       ├── templating.cpython-311.pyc
│   │       │       ├── testclient.cpython-311.pyc
│   │       │       ├── types.cpython-311.pyc
│   │       │       ├── websockets.cpython-311.pyc
│   │       │       ├── _compat.cpython-311.pyc
│   │       │       ├── _utils.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── starlette-0.27.0.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── licenses /
│   │       │   │   └── LICENSE.md
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   └── WHEEL
│   │       ├── typing_extensions-4.12.2.dist-info /
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   └── WHEEL
│   │       ├── typing_extensions.py
│   │       ├── uvicorn /
│   │       │   ├── config.py
│   │       │   ├── importer.py
│   │       │   ├── lifespan /
│   │       │   │   ├── off.py
│   │       │   │   ├── on.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── off.cpython-311.pyc
│   │       │   │       ├── on.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── loops /
│   │       │   │   ├── asyncio.py
│   │       │   │   ├── auto.py
│   │       │   │   ├── uvloop.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── asyncio.cpython-311.pyc
│   │       │   │       ├── auto.cpython-311.pyc
│   │       │   │       ├── uvloop.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── main.py
│   │       │   ├── middleware /
│   │       │   │   ├── asgi2.py
│   │       │   │   ├── debug.py
│   │       │   │   ├── message_logger.py
│   │       │   │   ├── proxy_headers.py
│   │       │   │   ├── wsgi.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── asgi2.cpython-311.pyc
│   │       │   │       ├── debug.cpython-311.pyc
│   │       │   │       ├── message_logger.cpython-311.pyc
│   │       │   │       ├── proxy_headers.cpython-311.pyc
│   │       │   │       ├── wsgi.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── protocols /
│   │       │   │   ├── http /
│   │       │   │   │   ├── auto.py
│   │       │   │   │   ├── flow_control.py
│   │       │   │   │   ├── h11_impl.py
│   │       │   │   │   ├── httptools_impl.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── auto.cpython-311.pyc
│   │       │   │   │       ├── flow_control.cpython-311.pyc
│   │       │   │   │       ├── h11_impl.cpython-311.pyc
│   │       │   │   │       ├── httptools_impl.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── utils.py
│   │       │   │   ├── websockets /
│   │       │   │   │   ├── auto.py
│   │       │   │   │   ├── websockets_impl.py
│   │       │   │   │   ├── wsproto_impl.py
│   │       │   │   │   ├── __init__.py
│   │       │   │   │   └── __pycache__ /
│   │       │   │   │       ├── auto.cpython-311.pyc
│   │       │   │   │       ├── websockets_impl.cpython-311.pyc
│   │       │   │   │       ├── wsproto_impl.cpython-311.pyc
│   │       │   │   │       └── __init__.cpython-311.pyc
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── server.py
│   │       │   ├── supervisors /
│   │       │   │   ├── basereload.py
│   │       │   │   ├── multiprocess.py
│   │       │   │   ├── statreload.py
│   │       │   │   ├── watchfilesreload.py
│   │       │   │   ├── watchgodreload.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── basereload.cpython-311.pyc
│   │       │   │       ├── multiprocess.cpython-311.pyc
│   │       │   │       ├── statreload.cpython-311.pyc
│   │       │   │       ├── watchfilesreload.cpython-311.pyc
│   │       │   │       ├── watchgodreload.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── workers.py
│   │       │   ├── _logging.py
│   │       │   ├── _subprocess.py
│   │       │   ├── _types.py
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   └── __pycache__ /
│   │       │       ├── config.cpython-311.pyc
│   │       │       ├── importer.cpython-311.pyc
│   │       │       ├── main.cpython-311.pyc
│   │       │       ├── server.cpython-311.pyc
│   │       │       ├── workers.cpython-311.pyc
│   │       │       ├── _logging.cpython-311.pyc
│   │       │       ├── _subprocess.cpython-311.pyc
│   │       │       ├── _types.cpython-311.pyc
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       └── __main__.cpython-311.pyc
│   │       ├── uvicorn-0.18.0.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE.md
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── REQUESTED
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── watchfiles /
│   │       │   ├── cli.py
│   │       │   ├── filters.py
│   │       │   ├── main.py
│   │       │   ├── py.typed
│   │       │   ├── run.py
│   │       │   ├── version.py
│   │       │   ├── _rust_notify.cp311-win_amd64.pyd
│   │       │   ├── _rust_notify.pyi
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   └── __pycache__ /
│   │       │       ├── cli.cpython-311.pyc
│   │       │       ├── filters.cpython-311.pyc
│   │       │       ├── main.cpython-311.pyc
│   │       │       ├── run.cpython-311.pyc
│   │       │       ├── version.cpython-311.pyc
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       └── __main__.cpython-311.pyc
│   │       ├── watchfiles-1.0.4.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── licenses /
│   │       │   │   └── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   └── WHEEL
│   │       ├── websockets /
│   │       │   ├── asyncio /
│   │       │   │   ├── async_timeout.py
│   │       │   │   ├── client.py
│   │       │   │   ├── compatibility.py
│   │       │   │   ├── connection.py
│   │       │   │   ├── messages.py
│   │       │   │   ├── router.py
│   │       │   │   ├── server.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── async_timeout.cpython-311.pyc
│   │       │   │       ├── client.cpython-311.pyc
│   │       │   │       ├── compatibility.cpython-311.pyc
│   │       │   │       ├── connection.cpython-311.pyc
│   │       │   │       ├── messages.cpython-311.pyc
│   │       │   │       ├── router.cpython-311.pyc
│   │       │   │       ├── server.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── auth.py
│   │       │   ├── cli.py
│   │       │   ├── client.py
│   │       │   ├── connection.py
│   │       │   ├── datastructures.py
│   │       │   ├── exceptions.py
│   │       │   ├── extensions /
│   │       │   │   ├── base.py
│   │       │   │   ├── permessage_deflate.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── base.cpython-311.pyc
│   │       │   │       ├── permessage_deflate.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── frames.py
│   │       │   ├── headers.py
│   │       │   ├── http.py
│   │       │   ├── http11.py
│   │       │   ├── imports.py
│   │       │   ├── legacy /
│   │       │   │   ├── auth.py
│   │       │   │   ├── client.py
│   │       │   │   ├── exceptions.py
│   │       │   │   ├── framing.py
│   │       │   │   ├── handshake.py
│   │       │   │   ├── http.py
│   │       │   │   ├── protocol.py
│   │       │   │   ├── server.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── auth.cpython-311.pyc
│   │       │   │       ├── client.cpython-311.pyc
│   │       │   │       ├── exceptions.cpython-311.pyc
│   │       │   │       ├── framing.cpython-311.pyc
│   │       │   │       ├── handshake.cpython-311.pyc
│   │       │   │       ├── http.cpython-311.pyc
│   │       │   │       ├── protocol.cpython-311.pyc
│   │       │   │       ├── server.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── protocol.py
│   │       │   ├── py.typed
│   │       │   ├── server.py
│   │       │   ├── speedups.c
│   │       │   ├── speedups.cp311-win_amd64.pyd
│   │       │   ├── speedups.pyi
│   │       │   ├── streams.py
│   │       │   ├── sync /
│   │       │   │   ├── client.py
│   │       │   │   ├── connection.py
│   │       │   │   ├── messages.py
│   │       │   │   ├── router.py
│   │       │   │   ├── server.py
│   │       │   │   ├── utils.py
│   │       │   │   ├── __init__.py
│   │       │   │   └── __pycache__ /
│   │       │   │       ├── client.cpython-311.pyc
│   │       │   │       ├── connection.cpython-311.pyc
│   │       │   │       ├── messages.cpython-311.pyc
│   │       │   │       ├── router.cpython-311.pyc
│   │       │   │       ├── server.cpython-311.pyc
│   │       │   │       ├── utils.cpython-311.pyc
│   │       │   │       └── __init__.cpython-311.pyc
│   │       │   ├── typing.py
│   │       │   ├── uri.py
│   │       │   ├── utils.py
│   │       │   ├── version.py
│   │       │   ├── __init__.py
│   │       │   ├── __main__.py
│   │       │   └── __pycache__ /
│   │       │       ├── auth.cpython-311.pyc
│   │       │       ├── cli.cpython-311.pyc
│   │       │       ├── client.cpython-311.pyc
│   │       │       ├── connection.cpython-311.pyc
│   │       │       ├── datastructures.cpython-311.pyc
│   │       │       ├── exceptions.cpython-311.pyc
│   │       │       ├── frames.cpython-311.pyc
│   │       │       ├── headers.cpython-311.pyc
│   │       │       ├── http.cpython-311.pyc
│   │       │       ├── http11.cpython-311.pyc
│   │       │       ├── imports.cpython-311.pyc
│   │       │       ├── protocol.cpython-311.pyc
│   │       │       ├── server.cpython-311.pyc
│   │       │       ├── streams.cpython-311.pyc
│   │       │       ├── typing.cpython-311.pyc
│   │       │       ├── uri.cpython-311.pyc
│   │       │       ├── utils.cpython-311.pyc
│   │       │       ├── version.cpython-311.pyc
│   │       │       ├── __init__.cpython-311.pyc
│   │       │       └── __main__.cpython-311.pyc
│   │       ├── websockets-15.0.1.dist-info /
│   │       │   ├── entry_points.txt
│   │       │   ├── INSTALLER
│   │       │   ├── LICENSE
│   │       │   ├── METADATA
│   │       │   ├── RECORD
│   │       │   ├── top_level.txt
│   │       │   └── WHEEL
│   │       ├── yaml /
│   │       │   ├── composer.py
│   │       │   ├── constructor.py
│   │       │   ├── cyaml.py
│   │       │   ├── dumper.py
│   │       │   ├── emitter.py
│   │       │   ├── error.py
│   │       │   ├── events.py
│   │       │   ├── loader.py
│   │       │   ├── nodes.py
│   │       │   ├── parser.py
│   │       │   ├── reader.py
│   │       │   ├── representer.py
│   │       │   ├── resolver.py
│   │       │   ├── scanner.py
│   │       │   ├── serializer.py
│   │       │   ├── tokens.py
│   │       │   ├── _yaml.cp311-win_amd64.pyd
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── composer.cpython-311.pyc
│   │       │       ├── constructor.cpython-311.pyc
│   │       │       ├── cyaml.cpython-311.pyc
│   │       │       ├── dumper.cpython-311.pyc
│   │       │       ├── emitter.cpython-311.pyc
│   │       │       ├── error.cpython-311.pyc
│   │       │       ├── events.cpython-311.pyc
│   │       │       ├── loader.cpython-311.pyc
│   │       │       ├── nodes.cpython-311.pyc
│   │       │       ├── parser.cpython-311.pyc
│   │       │       ├── reader.cpython-311.pyc
│   │       │       ├── representer.cpython-311.pyc
│   │       │       ├── resolver.cpython-311.pyc
│   │       │       ├── scanner.cpython-311.pyc
│   │       │       ├── serializer.cpython-311.pyc
│   │       │       ├── tokens.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── _cffi_backend.cp311-win_amd64.pyd
│   │       ├── _distutils_hack /
│   │       │   ├── override.py
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       ├── override.cpython-311.pyc
│   │       │       └── __init__.cpython-311.pyc
│   │       ├── _yaml /
│   │       │   ├── __init__.py
│   │       │   └── __pycache__ /
│   │       │       └── __init__.cpython-311.pyc
│   │       └── __pycache__ /
│   │           └── typing_extensions.cpython-311.pyc
│   ├── pyvenv.cfg
│   └── Scripts /
│       ├── activate
│       ├── activate.bat
│       ├── Activate.ps1
│       ├── chardetect.exe
│       ├── deactivate.bat
│       ├── dotenv.exe
│       ├── pip.exe
│       ├── pip3.11.exe
│       ├── pip3.exe
│       ├── pymupdf.exe
│       ├── python.exe
│       ├── python3.exe
│       ├── pythonw.exe
│       ├── uvicorn.exe
│       ├── watchfiles.exe
│       └── websockets.exe
└── __pycache__ /
    └── main.cpython-311.pyc

File Contents:

------------ app\admin\page.tsx ------------
// app/admin/page.tsx
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

export default function AdminPage() {
  // Example data
  const papers = [
    { id: "1", title: "Paper 1", status: "Pending", assignedReviewer: "Reviewer A" },
    { id: "2", title: "Paper 2", status: "Under Review", assignedReviewer: "Reviewer B" },
  ];

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
      <Card className="w-full max-w-4xl">
        <CardHeader>
          <CardTitle>Admin Panel</CardTitle>
          <CardDescription>Manage papers and assign reviewers.</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Paper ID</TableHead>
                <TableHead>Title</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Assigned Reviewer</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {papers.map((paper) => (
                <TableRow key={paper.id}>
                  <TableCell>{paper.id}</TableCell>
                  <TableCell>{paper.title}</TableCell>
                  <TableCell>{paper.status}</TableCell>
                  <TableCell>{paper.assignedReviewer}</TableCell>
                  <TableCell>
                    <Button variant="outline">Assign Reviewer</Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}

------------ app\api\categorize\route.ts ------------
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function POST(request: Request) {
    try {
        const { trackingNumber, category } = await request.json();

        if (!trackingNumber || !category) {
            return NextResponse.json(
                { error: "Tracking number and category are required." },
                { status: 400 }
            );
        }

        const updatedPaper = await prisma.paper.update({
            where: { trackingNumber },
            data: { category },
        });

        return NextResponse.json(updatedPaper, { status: 200 });
    } catch (error) {
        console.error("Error updating category:", error);
        return NextResponse.json(
            { error: "Failed to update category." },
            { status: 500 }
        );
    }
}

------------ app\api\decrypt\route.ts ------------
// app/api/decrypt/route.ts
import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';

// Define encryption key
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'your-secure-encryption-key-min-32-chars';
// Ensure 32-byte key for AES-256
const normalizedKey = Buffer.from(ENCRYPTION_KEY).slice(0, 32).toString('hex').padEnd(64, '0').slice(0, 64);
const encryptionKeyBuffer = Buffer.from(normalizedKey, 'hex');

function simpleDecrypt(encryptedText: string): string {
  try {
    // Remove any whitespace
    encryptedText = encryptedText.trim();
    
    // Decode from Base64
    const encryptedBuffer = Buffer.from(encryptedText, 'base64');
    
    // Get the key as buffer
    const keyBuffer = Buffer.from(ENCRYPTION_KEY);
    
    // XOR decryption
    const decryptedBuffer = Buffer.alloc(encryptedBuffer.length);
    for (let i = 0; i < encryptedBuffer.length; i++) {
      const keyByte = keyBuffer[i % keyBuffer.length];
      decryptedBuffer[i] = encryptedBuffer[i] ^ keyByte;
    }
    
    // Convert back to string
    return decryptedBuffer.toString('utf8');
  } catch (error) {
    throw new Error(`Decryption error: ${error instanceof Error ? error.message : String(error)}`);
  }
}

function aesDecrypt(encryptedText: string): string {
  try {
    // Split the IV and ciphertext
    const parts = encryptedText.split(':');
    if (parts.length !== 2) {
      throw new Error('Invalid AES encrypted format');
    }
    
    const iv = Buffer.from(parts[0], 'hex');
    const ciphertext = Buffer.from(parts[1], 'hex');
    
    // Create decipher
    const decipher = crypto.createDecipheriv('aes-256-cbc', encryptionKeyBuffer, iv);
    
    // Decrypt
    let decrypted = decipher.update(ciphertext);
    decrypted = Buffer.concat([decrypted, decipher.final()]);
    
    return decrypted.toString('utf8');
  } catch (error) {
    throw new Error(`AES decryption error: ${error instanceof Error ? error.message : String(error)}`);
  }
}

export async function POST(request: NextRequest) {
  try {
    const { pdfFileContent } = await request.json();
    
    if (!pdfFileContent) {
      return NextResponse.json({ 
        success: false, 
        error: 'PDF content is required' 
      }, { status: 400 });
    }

    let content = pdfFileContent;
    const decryptionResults = [];
    
    // Pattern to match encrypted strings
    const pattern = /Encrypted:\s+([^\n]+)/g;
    
    // Find and process all matches
    let match;
    while ((match = pattern.exec(pdfFileContent)) !== null) {
      try {
        const encrypted = match[1].trim();
        let decrypted: string;
        let method: string;
        
        // Choose decryption method based on format
        if (encrypted.includes(':')) {
          // AES format with IV:ciphertext
          decrypted = aesDecrypt(encrypted);
          method = 'AES-256-CBC';
        } else {
          // Simple XOR format
          decrypted = simpleDecrypt(encrypted);
          method = 'XOR';
        }
        
        // Replace in content
        const fullMatch = match[0];  // The entire "Encrypted: value" text
        content = content.replace(fullMatch, `Decrypted: ${decrypted}`);
        
        decryptionResults.push({
          encrypted,
          decrypted,
          method
        });
      } catch (error) {
        console.error(`Error decrypting match: ${match[1]}`, error);
        decryptionResults.push({
          encrypted: match[1],
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }
    
    return NextResponse.json({
      success: true,
      decrypted_content: content,
      decryption_results: decryptionResults,
      total_decrypted: decryptionResults.filter(r => 'decrypted' in r).length
    });
    
  } catch (error) {
    console.error('Decryption error:', error);
    return NextResponse.json({
      success: false,
      error: `Decryption failed: ${error instanceof Error ? error.message : String(error)}`
    }, { status: 500 });
  }
}

------------ app\api\list-pdfs\route.ts ------------
// File: app/api/list-pdfs/route.ts

import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    // Fetch papers with tracking numbers and file paths from the database
    const papers = await prisma.paper.findMany({
      select: {
        trackingNumber: true,
        filePath: true,
        category: true,
      },
    });

    // Return the list of papers with tracking numbers and file paths
    return NextResponse.json({ files: papers });
  } catch (error) {
    console.error('Error fetching papers:', error);
    return NextResponse.json(
      {
        error: 'Failed to fetch papers',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  }
}


------------ app\api\list-processed\route.ts ------------
import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    // Define the path to your PDFs folder
    const pdfsFolderPath = path.join(process.cwd(), 'pdfs', 'processed');

    // Check if the directory exists
    if (!fs.existsSync(pdfsFolderPath)) {
      return NextResponse.json({
        error: 'PDFs directory not found',
        files: []
      }, { status: 404 });
    }

    // Read the directory contents
    const filesInDirectory = fs.readdirSync(pdfsFolderPath)
      .filter(file => file.toLowerCase().endsWith('.pdf'));

    // Fetch metadata from the database
    const papers = await prisma.paper.findMany({
      where: {
        filePath: {
          not: null,
        },
      },
      select: {
        trackingNumber: true,
        filePath: true,
        category: true,
      },
    });

    console.log('Files in directory:', filesInDirectory);
    console.log('Papers in database:', papers);
    
    // Combine the file list with database metadata
    const files = papers.filter(paper =>
      filesInDirectory.includes(path.basename("processed_" + paper.filePath || ''))
    );

    // Return the combined list
    return NextResponse.json({ files });
  } catch (error) {
    console.error('Error listing PDF files:', error);
    return NextResponse.json({
      error: 'Failed to list PDF files',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}

------------ app\api\list-reviewed\route.ts ------------
import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    // Define the path to your PDFs folder
    const pdfsFolderPath = path.join(process.cwd(), 'pdfs', 'reviewed');

    // Check if the directory exists
    if (!fs.existsSync(pdfsFolderPath)) {
      return NextResponse.json({
        error: 'PDFs directory not found',
        files: []
      }, { status: 404 });
    }

    // Read the directory contents
    const filesInDirectory = fs.readdirSync(pdfsFolderPath)
      .filter(file => file.toLowerCase().endsWith('.pdf'));

    // Fetch metadata from the database
    const papers = await prisma.paper.findMany({
      where: {
        filePath: {
          not: null,
        },
      },
      select: {
        trackingNumber: true,
        filePath: true,
        category: true,
      },
    });
    
    // Combine the file list with database metadata
    const files = papers.filter(paper =>
      filesInDirectory.includes(path.basename("reviewed_" + paper.filePath || ''))
    );

    // Return the combined list
    return NextResponse.json({ files });
  } catch (error) {
    console.error('Error listing PDF files:', error);
    return NextResponse.json({
      error: 'Failed to list PDF files',
      details: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}

------------ app\api\logs\route.ts ------------
import { prisma } from '@/lib/prisma';
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';


// Zod schema for log creation validation
export const LogSchema = z.object({
  action: z.string().min(1, "Action is required"),
  actor: z.string().min(1, "Actor is required"),
  target: z.string().min(1, "Target is required")
});

export async function GET() {
  try {
    const logs = await prisma.log.findMany({
      orderBy: { createdAt: "desc" },
    });
    return NextResponse.json(logs, { status: 200 });
  } catch (error) {
    console.error("Error fetching logs:", error);
    return NextResponse.json({ error: "Failed to fetch logs" }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = LogSchema.parse(body);

    const newLog = await prisma.log.create({
      data: validatedData
    });

    return NextResponse.json(newLog, { status: 201 });
  } catch (error) {
    console.error("Error creating log:", error);
    return NextResponse.json({ error: "Failed to create log" }, { status: 500 });
  }
}

export async function DELETE() {
    try {
      // Delete all logs
      await prisma.log.deleteMany();
  
      return NextResponse.json({ message: "All logs cleared successfully" }, { status: 200 });
    } catch (error) {
      console.error("Error clearing logs:", error);
      return NextResponse.json({ error: "Failed to clear logs" }, { status: 500 });
    }
  }

------------ app\api\messages\route.ts ------------
import { prisma } from '@/lib/prisma';
import { NextRequest, NextResponse } from 'next/server';


// POST /api/messages
export async function POST(request: NextRequest) {
    const { sender, receiver, message } = await request.json();

    if (!sender || !receiver || !message) {
        console.log(sender, receiver, message);

        return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    try {
        const newMessage = await prisma.message.create({
            data: { sender, receiver, message },
        });
        return NextResponse.json(newMessage, { status: 201 });
    } catch (error) {
        console.log(error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}

// GET /api/messages
// GET /api/messages
export async function GET(request: NextRequest) {
    const { searchParams } = new URL(request.url);
    const user = searchParams.get('user');

    try {
        const messages = user
            ? await prisma.message.findMany({
                where: {
                    OR: [
                        { sender: user },
                        { receiver: user }
                    ]
                },
                orderBy: { createdAt: 'asc' }
            })
            : await prisma.message.findMany({
                orderBy: { createdAt: 'asc' }
            });

        return NextResponse.json(messages, { status: 200 });
    } catch (error: any) {
        console.log(error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}

// DELETE /api/messages
export async function DELETE(request: NextRequest) {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
        return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    try {
        await prisma.message.delete({
            where: { id: Number(id) },
        });
        return NextResponse.json({}, { status: 204 });
    } catch (error: any) {
        console.log(error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}


------------ app\api\messages\users\route.ts ------------
// pages/api/messages/users.ts
import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';

export async function GET() {
  try {
    // Get unique senders
    const users = await prisma.message.findMany({
      distinct: ['sender'],
      select: { sender: true }
    });

    return NextResponse.json(
      users.map(user => user.sender), 
      { status: 200 }
    );
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    );
  }
}

------------ app\api\paperData\route.ts ------------
import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
    try {
        const { inputData, trackingNumber } = await req.json(); // Parse JSON body from the request
        console.log("Received data:", inputData);

        // Iterate over the inputData array and save each item to the database
        for (const item of inputData) {
            if (item.name) {
                await prisma.paperData.create({
                    data: {
                        content: item.name.encrypted,
                        type: "name",
                        trackingNumber: trackingNumber,
                    },
                });
            } else if (item.email) {
                await prisma.paperData.create({
                    data: {
                        content: item.email.encrypted,
                        type: "email",
                        trackingNumber: trackingNumber,
                    },
                });
            } else if (item.affiliation) {
                await prisma.paperData.create({
                    data: {
                        content: item.affiliation.encrypted,
                        type: "affiliation",
                        trackingNumber: trackingNumber,
                    },
                });
            }
        }

        return NextResponse.json({ message: "Data saved successfully" }, { status: 200 });
    } catch (error) {
        console.log("Error saving data:", error);
        return NextResponse.json({ message: "Error saving data" }, { status: 500 });
    }
}

------------ app\api\paperData\[id]\route.ts ------------
import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function GET(params: { trackingNumber: string }) {
    const { trackingNumber } = params;
    try {
        const paperData = await prisma.paperData.findMany({
            where: { trackingNumber: trackingNumber },
        });
        return NextResponse.json({ data: paperData }, { status: 200 });
    } catch (error) {
        console.log("Error fetching data:", error);
        return NextResponse.json({ message: "Error fetching data" }, { status: 500 });
    }
}

------------ app\api\paperStatus\route.ts ------------
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// filepath: c:/Users/tarik/OneDrive/Documents/VSCode Proj/secure_document_anonymization_ts/app/api/paperStatus/route.ts

export async function GET(request: NextRequest) {
    try {
        const { searchParams } = new URL(request.url);
        const trackingNumber = searchParams.get('trackingNumber');

        if (!trackingNumber) {
            return NextResponse.json(
                { error: 'Missing tracking number' },
                { status: 400 }
            );
        }

        const paper = await prisma.paper.findUnique({
            where: { trackingNumber },
        });

        if (!paper) {
            return NextResponse.json(
                { error: 'Paper not found' },
                { status: 404 }
            );
        }

        return NextResponse.json({ paper }, { status: 200 });
    } catch (error) {
        console.error('Error in paper status API:', error);
        return NextResponse.json(
            { error: 'Internal server error' },
            { status: 500 }
        );
    }
}

------------ app\api\pdfs\decrypted\[filename]\route.ts ------------
import { NextRequest, NextResponse } from 'next/server';
import path from 'path';
import fs from 'fs';

export async function GET(request: NextRequest, { params }: { params: { filename: string } }) {
  const { filename } = await params;
  const filePath = path.join(process.cwd(), 'pdfs', 'decrypted', filename);

  if (fs.existsSync(filePath)) {
    const fileContents = fs.readFileSync(filePath);
    return new NextResponse(fileContents, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
      },
    });
  } else {
    console.log('File not found in decrypted folder');
    return NextResponse.json({ error: 'File not found' }, { status: 404 });
  }
}


------------ app\api\pdfs\processed\[filename]\route.ts ------------
import { NextRequest, NextResponse } from 'next/server';
import path from 'path';
import fs from 'fs';

export async function GET(request: NextRequest, { params }: { params: { filename: string } }) {
  const { filename } = await params;
  const filePath = path.join(process.cwd(), 'pdfs', 'processed', filename);

  if (fs.existsSync(filePath)) {
    const fileContents = fs.readFileSync(filePath);
    return new NextResponse(fileContents, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
      },
    });
  } else {
    console.log('File not found in processed folder');
    return NextResponse.json({ error: 'File not found' }, { status: 404 });
  }
}


------------ app\api\PDFupload\route.ts ------------
import { NextRequest, NextResponse } from 'next/server'; // To handle the request and response
import { promises as fs } from 'fs'; // To save the file temporarily
import { v4 as uuidv4 } from 'uuid'; // To generate a unique filename
import PDFParser from 'pdf2json'; // To parse the pdf
import path from 'path'; // To handle file paths

export async function POST(req: NextRequest) {
    const formData: FormData = await req.formData();
    const uploadedFiles = formData.getAll('filepond');
    let fileName = '';
    let parsedText = '';

    if (uploadedFiles && uploadedFiles.length > 0) {
        const uploadedFile = uploadedFiles[1];
        console.log('Uploaded file:', uploadedFile);

        // Check if uploadedFile is of type File
        if (uploadedFile instanceof File) {
            // Generate a unique filename
            fileName = uuidv4();

            // Define the pdfs directory and the temporary file path
            const pdfsDir = path.join(process.cwd(), 'pdfs');
            const tempFilePath = path.join(pdfsDir, `${fileName}.pdf`);

            // Ensure the pdfs directory exists
            await fs.mkdir(pdfsDir, { recursive: true });

            // Convert ArrayBuffer to Buffer
            const fileBuffer = Buffer.from(await uploadedFile.arrayBuffer());

            // Save the buffer as a file
            await fs.writeFile(tempFilePath, fileBuffer);

            // Parse the pdf using pdf2json. See pdf2json docs for more info.

            // The reason I am bypassing type checks is because
            // the default type definitions for pdf2json in the npm install
            // do not allow for any constructor arguments.
            // You can either modify the type definitions or bypass the type checks.
            // I chose to bypass the type checks.
            const pdfParser = new (PDFParser as any)(null, 1);

            // See pdf2json docs for more info on how the below works.
            pdfParser.on('pdfParser_dataError', (errData: any) =>
                console.log(errData.parserError)
            );

            pdfParser.on('pdfParser_dataReady', () => {
                console.log((pdfParser as any).getRawTextContent());
                parsedText = (pdfParser as any).getRawTextContent();
            });

            pdfParser.loadPDF(tempFilePath);
        } else {
            console.log('Uploaded file is not in the expected format.');
        }
    } else {
        console.log('No files found.');
    }

    const response = new NextResponse(parsedText);
    response.headers.set('FileName', fileName);
    return response;
}

------------ app\api\process-pdf\route.ts ------------
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function POST(req: NextRequest) {
  try {
    // Parse request body
    const { trackingNumber } = await req.json();

    // Validate trackingNumber
    if (!trackingNumber) {
      return NextResponse.json(
        { error: 'Tracking number is required' },
        { status: 400 }
      );
    }

    // Update the status of the Paper record
    const updatedPaper = await prisma.paper.update({
      where: { trackingNumber },
      data: { status: 'processed' },
    });

    // Return success response
    return NextResponse.json({
      success: true,
      message: `Paper with tracking number ${trackingNumber} has been marked as processed.`,
      updatedPaper,
    });
  } catch (error) {
    console.error('Error updating paper status:', error);
    return NextResponse.json(
      {
        error: 'Failed to update paper status',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  }
}


------------ app\api\review\route.ts ------------
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function POST(req: NextRequest) {
  try {
    // Parse request body
    const { trackingNumber, reviewerProfile, reviewScore, review } = await req.json();
    console.log("AAA");
    console.log(trackingNumber, reviewerProfile, reviewScore, review);
    
    
    
    // Validate trackingNumber
    if (!trackingNumber) {
      return NextResponse.json(
        { error: 'Tracking number is required' },
        { status: 400 }
      );
    }

    // Update the status of the Paper record
    const updatedPaper = await prisma.paper.update({
      where: { trackingNumber },
      data: {
        status: 'reviewed', // Example status
        feedback: review.review_text,
        feedbackScore: reviewScore,
        reviewer: reviewerProfile,
        reviewDate: new Date(),
      },
    });

    // Return success response
    return NextResponse.json({
      success: true,
      message: `Paper with tracking number ${trackingNumber} has been marked as reviewed.`,
      updatedPaper,
    });
  } catch (error) {
    console.error('Error updating paper status:', error);
    return NextResponse.json(
      {
        error: 'Failed to update paper status',
        details: error instanceof Error ? error.message : String(error),
      },
      { status: 500 }
    );
  }
}


------------ app\api\upload\route.ts ------------
// app/api/upload/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { writeFile } from 'fs/promises';
import { join } from 'path';
import { mkdir } from 'fs/promises';

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const authorEmail = formData.get('authorEmail') as string;
    const file = formData.get('file') as File;
    const originalFileName = formData.get('originalFileName') as string;
    
    if (!authorEmail || !file || !originalFileName) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    // Check if a paper with the same authorEmail and originalFileName already exists
    const existingPaper = await prisma.paper.findFirst({
      where: {
        authorEmail,
        originalFileName,
      },
    });
    
    // Generate tracking number - reuse existing one if paper exists
    const trackingNumber = existingPaper 
      ? existingPaper.trackingNumber 
      : Math.random().toString(36).substring(2, 15);
    
    // Create pdfs directory if it doesn't exist
    const uploadDir = join(process.cwd(), 'pdfs');
    try {
      await mkdir(uploadDir, { recursive: true });
    } catch (err) {
      // Directory might already exist, which is fine
      console.log('Directory creation info:', err);
    }
    
    // Save the file with a more readable name
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);
    
    // Use a more readable filename format: trackingNumber_originalFileName.pdf
    // Replace spaces and special characters in the original filename
    const cleanFileName = originalFileName.replace(/[^a-zA-Z0-9.]/g, '_');
    const fileName = `${trackingNumber}_${cleanFileName}`;
    
    try {
      await writeFile(join(uploadDir, fileName), buffer);
    } catch (err) {
      console.error('Error saving file:', err);
      return NextResponse.json(
        { error: 'Failed to save file' },
        { status: 500 }
      );
    }
    
    let paper;
    
    if (existingPaper) {
      // Update existing paper entry
      paper = await prisma.paper.update({
        where: {
          id: existingPaper.id
        },
        data: {
          status: 'pending', // Reset status for the new submission
          filePath: `pdfs/${fileName}`,
          // Only update fields that should be refreshed
          // Keep feedback and feedbackScore if you want to preserve them
        },
      });
      
      // Optionally, delete the old file if the path is different
      if (existingPaper.filePath && existingPaper.filePath !== `pdfs/${fileName}`) {
        try {
          const oldFilePath = join(process.cwd(), existingPaper.filePath);
          // You may want to use fs.unlink to delete the old file
          // await unlink(oldFilePath);
          console.log(`Previous file could be deleted at: ${oldFilePath}`);
        } catch (err) {
          console.error('Error deleting old file:', err);
          // Continue even if file deletion fails
        }
      }
    } else {
      // Create new paper entry
      paper = await prisma.paper.create({
        data: {
          trackingNumber,
          authorEmail,
          originalFileName,
          status: 'pending',
          filePath: `${fileName}`,
          category: 'uncategorized',
        },
      });
    }
    
    return NextResponse.json(
      { 
        trackingNumber: paper.trackingNumber, 
        fileName, 
        isReplacement: !!existingPaper 
      }, 
      { status: 201 }
    );
  } catch (error) {
    console.error('Error in upload API:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

------------ app\api\upload-pdf\route.ts ------------
import { NextRequest, NextResponse } from 'next/server';
import { promises as fs } from 'fs';
import path from 'path';
import PDFParser from 'pdf2json';

export async function POST(req: NextRequest) {
  const { filename } = await req.json();

  if (typeof filename !== 'string' || !filename.endsWith('.pdf')) {
    return new NextResponse('Invalid filename', { status: 400 });
  }

  // Construct the full path to the PDF file in the public/pdfs directory

  const filePath = path.join(process.cwd(), 'pdfs', 'processed', filename);

  try {
    // Check if the file exists
    await fs.access(filePath);

    const pdfParser = new (PDFParser as any)(null, 1);

    return new Promise((resolve, reject) => {
      pdfParser.on('pdfParser_dataError', (errData: any) => {
        console.error(errData.parserError);
        reject(new NextResponse('Error parsing PDF', { status: 500 }));
      });

      pdfParser.on('pdfParser_dataReady', () => {
        const parsedText = (pdfParser as any).getRawTextContent();
        resolve(
          new NextResponse(parsedText, {
            headers: { 'Content-Type': 'text/plain' },
          })
        );
      });

      pdfParser.loadPDF(filePath);
    });
  } catch (error) {
    console.log('Error reading file:', error);
    
    return new NextResponse('File not found', { status: 404 });
  }
}


------------ app\api\users\route.ts ------------
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

// GET /api/users
export async function GET() {
    try {
        const users = await prisma.user.findMany();
        return NextResponse.json(users);
    } catch (error) {
        console.error("Error fetching users:", error);
        return NextResponse.json({ error: "Failed to fetch users" }, { status: 500 });
    }
}

// POST /api/users
export async function POST(request: Request) {
    try {
        const body = await request.json();
        const { name, email, role } = body;

        if (!name || !email || !role) {
            return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
        }

        const newUser = await prisma.user.create({
            data: { name, email, role },
        });

        return NextResponse.json(newUser, { status: 201 });
    } catch (error) {
        console.error("Error creating user:", error);
        return NextResponse.json({ error: "Failed to create user" }, { status: 500 });
    }
}

// PUT /api/users/:id
export async function PUT(request: Request) {
    try {
        const { searchParams } = new URL(request.url);
        const id = searchParams.get("id");

        if (!id) {
            return NextResponse.json({ error: "User ID is required" }, { status: 400 });
        }

        const body = await request.json();
        const { name, email, role } = body;

        const updatedUser = await prisma.user.update({
            where: { id: parseInt(id) },
            data: { name, email, role },
        });

        return NextResponse.json(updatedUser);
    } catch (error) {
        console.error("Error updating user:", error);
        return NextResponse.json({ error: "Failed to update user" }, { status: 500 });
    }
}

// DELETE /api/users/:id
export async function DELETE(request: Request) {
    try {
        const { searchParams } = new URL(request.url);
        const id = searchParams.get("id");

        if (!id) {
            return NextResponse.json({ error: "User ID is required" }, { status: 400 });
        }

        await prisma.user.delete({
            where: { id: parseInt(id) },
        });

        return NextResponse.json({ message: "User deleted successfully" });
    } catch (error) {
        console.error("Error deleting user:", error);
        return NextResponse.json({ error: "Failed to delete user" }, { status: 500 });
    }
}

------------ app\layout.tsx ------------
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


------------ app\log\page.tsx ------------
'use client';

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Loader2, Trash2 } from "lucide-react";


// Define the Log type to match your Prisma schema
interface Log {
    id: string;
    action: string;
    actor: string;
    target: string;
    createdAt: Date;
}

export default function LogsPage() {
    const [logs, setLogs] = useState<Log[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isClearingLogs, setIsClearingLogs] = useState(false);

    // Fetch logs function
    const fetchLogs = async () => {
        try {
            setIsLoading(true);
            const response = await axios.get('http://localhost:3000/api/logs');
            setLogs(response.data);
        } catch (err) {
            console.error('Error fetching logs:', err);
            setLogs([]);
        } finally {
            setIsLoading(false);
        }
    };

    // Clear logs function
    const clearLogs = async () => {
        try {
            setIsClearingLogs(true);
            await axios.delete('http://localhost:3000/api/logs');
            await fetchLogs(); // Refresh logs after clearing
            alert("All logs have been successfully deleted.")
        } catch (err) {
            console.error('Error clearing logs:', err);
            alert(`Error clearing logs: ${err}`)

        } finally {
            setIsClearingLogs(false);
        }
    };

    useEffect(() => {
        fetchLogs();
    }, []);

    if (isLoading) {
        return (
            <div className="flex justify-center items-center h-screen">
                <Loader2 className="mr-2 h-8 w-8 animate-spin" />
            </div>
        );
    }

    return (
        <div className="container mx-auto p-4">
            <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle>System Logs</CardTitle>
                    <Button
                        variant="destructive"
                        size="sm"
                        onClick={clearLogs}
                        disabled={logs.length === 0 || isClearingLogs}
                    >
                        {isClearingLogs ? (
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                            <Trash2 className="mr-2 h-4 w-4" />
                        )}
                        Clear Logs
                    </Button>
                </CardHeader>
                <CardContent>
                    {logs.length === 0 ? (
                        <p className="text-center text-muted-foreground">No logs found</p>
                    ) : (
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Action</TableHead>
                                    <TableHead>Actor</TableHead>
                                    <TableHead>Target</TableHead>
                                    <TableHead>Timestamp</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {logs.map((log) => (
                                    <TableRow key={log.id}>
                                        <TableCell>
                                            <Badge variant="secondary">{log.action}</Badge>
                                        </TableCell>
                                        <TableCell>{log.actor}</TableCell>
                                        <TableCell>{log.target}</TableCell>
                                        <TableCell>
                                            {new Date(log.createdAt).toLocaleString()}
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    )}
                </CardContent>
            </Card>
        </div>
    );
}

------------ app\manager\page.tsx ------------
"use client";

import { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { MessageCircle, Lock, Unlock } from "lucide-react";

import PdfAnonymizerComponent from '@/components/PdfAnonymizerComponent';
import ChatComponent from '@/components/ChatComponent';
import PdfDecrypterComponent from '@/components/PdfDecrypterComponent';


export default function Home() {
  const [activeTab, setActiveTab] = useState("chat");

  return (
    <main className="container mx-auto py-8 px-4">
      <Tabs defaultValue="chat" value={activeTab} onValueChange={setActiveTab} className="w-full max-w-6xl mx-auto">
        <div className="flex justify-center mb-6">
          <TabsList>
            <TabsTrigger value="chat" className="flex items-center gap-2">
              <MessageCircle className="h-4 w-4" />
              Chat
            </TabsTrigger>
            <TabsTrigger value="pdf-anonymizer" className="flex items-center gap-2">
              <Lock className="h-4 w-4" />
              PDF Anonymizer
            </TabsTrigger>
            <TabsTrigger value="pdf-decrypter" className="flex items-center gap-2">
              <Unlock className="h-4 w-4" />
              PDF Decrypter
            </TabsTrigger>
          </TabsList>
        </div>
        
        <TabsContent value="chat" className="mt-0">
          <ChatComponent />
        </TabsContent>
        
        <TabsContent value="pdf-anonymizer" className="mt-0">
          <PdfAnonymizerComponent />
        </TabsContent>
        
        <TabsContent value="pdf-decrypter" className="mt-0">
          <PdfDecrypterComponent />
        </TabsContent>
      </Tabs>
    </main>
  );
}

------------ app\page.tsx ------------
"use client"
import { useState } from "react";
import { Card, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { UploadSection } from "@/components/upload-section";
import { ChatSection } from "@/components/chat-section";

export default function UploadPage() {
  const [email, setEmail] = useState("");
  const [trackingNumber, setTrackingNumber] = useState("");
  const [activeTab, setActiveTab] = useState("upload");
  
  // Check if websocket is connected (would be managed by ChatSection in a real app)
  // This is just a mock for showing the offline badge
  const [isConnected] = useState(true);
  
  const handleUploadSuccess = () => {
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
      <Card className="w-full max-w-4xl">
        <CardHeader>
          <CardTitle>Paper Submission Portal</CardTitle>
          <CardDescription>Upload your paper, track its status, and chat with our support team</CardDescription>
        </CardHeader>
        
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="upload">Upload Paper</TabsTrigger>
            <TabsTrigger value="chat">
              Support Chat
              {!isConnected && <Badge variant="destructive" className="ml-2">Offline</Badge>}
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="upload">
            <UploadSection 
              email={email}
              setEmail={setEmail}
              setTrackingNumber={setTrackingNumber}
              onUploadSuccess={handleUploadSuccess}
            />
          </TabsContent>
          
          <TabsContent value="chat">
            {trackingNumber && (
              <Alert className="mb-4 bg-blue-50 border-blue-200">
                <AlertDescription>
                  Your paper has been submitted successfully. Tracking number: <span className="font-bold">{trackingNumber}</span>
                </AlertDescription>
              </Alert>
            )}
            <ChatSection 
              email={email}
              trackingNumber={trackingNumber}
            />
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  );
}

------------ app\pdfer\page.tsx ------------
"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, FileText, Check, AlertTriangle } from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export default function Home() {
  const [availableFiles, setAvailableFiles] = useState<string[]>([]);
  const [selectedFilename, setSelectedFilename] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const [loadingFiles, setLoadingFiles] = useState(true);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const [processingError, setProcessingError] = useState<string | null>(null);

  // Encryption options state
  const [encryptionOptions, setEncryptionOptions] = useState({
    name: true,
    email: true,
    affiliation: true,
    title: false,
    address: false
  });

  // Fetch available PDFs when component mounts
  useEffect(() => {
    const fetchAvailableFiles = async () => {
      try {
        const response = await fetch('/api/list-pdfs');
        if (!response.ok) {
          throw new Error('Failed to fetch PDF list');
        }
        const data = await response.json();
        setAvailableFiles(data.files || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load PDF files');
      } finally {
        setLoadingFiles(false);
      }
    };

    fetchAvailableFiles();
  }, []);

  // Handle file selection
  const handleFileSelection = (filename: string) => {
    setSelectedFilename(filename);
    setError(null);
    setProcessingError(null);
    setResult(null);
  };

  // Handle checkbox changes
  const handleCheckboxChange = (option: string) => {
    setEncryptionOptions(prev => ({
      ...prev,
      [option]: !prev[option as keyof typeof prev]
    }));
  };

  // Process the selected file
  const handleProcess = async () => {
    if (!selectedFilename) {
      setError('Please select a PDF file first');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      setProcessingError(null);
      setResult(null);

      console.log('Processing file:', selectedFilename);
      console.log('Encryption options:', encryptionOptions);

      const processResponse = await fetch('/api/py/process-pdf', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          filename: selectedFilename,
          encryptionOptions
        }),
      });

      if (!processResponse.ok) {
        const processError = await processResponse.json();
        setProcessingError(processError.error || 'Failed to process file');
        console.error('Processing error details:', processError.details);
        return;
      }

      const processResult = await processResponse.json();
      console.log('File processed successfully:', processResult);
      // Transform the result to include the mapping data which shows what was encrypted
      const transformedResult = {
        ...processResult,
        sensitiveDataFound: processResult.mapping.sensitive_data_found,
        authorCount: processResult.mapping.encrypted_data.filter((item : any) => item.name).length,
        encryptedItems: processResult.mapping.encrypted_data,
        totalReplacements: processResult.mapping.total_replacements
      };

      setResult(transformedResult);
    } catch (err) {
      console.error('Error in process flow:', err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="container mx-auto py-8 px-4">
      <Card className="w-full max-w-xl mx-auto">
        <CardHeader>
          <CardTitle>Academic PDF Anonymizer</CardTitle>
          <CardDescription>
            Select an existing PDF from the server to redact author information and encrypt sensitive data.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid w-full items-center gap-2">
              {/* PDF Selection dropdown */}
              <div className="space-y-2">
                <Label htmlFor="pdf-select">Select PDF from server</Label>
                <Select
                  value={selectedFilename}
                  onValueChange={handleFileSelection}
                  disabled={loadingFiles}
                >
                  <SelectTrigger id="pdf-select" className="w-full">
                    <SelectValue placeholder={loadingFiles ? "Loading files..." : "Select a PDF file"} />
                  </SelectTrigger>
                  <SelectContent>
                    {availableFiles.length === 0 && !loadingFiles ? (
                      <SelectItem value="no-files" disabled>No PDFs available</SelectItem>
                    ) : (
                      availableFiles.map(file => (
                        <SelectItem key={file} value={file}>
                          {file}
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
              </div>

              {/* Encryption options */}
              <div className="mt-4 mb-2">
                <h3 className="text-sm font-medium mb-2">Select information to encrypt:</h3>
                <div className="grid grid-cols-2 gap-2">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="encrypt-name"
                      checked={encryptionOptions.name}
                      onCheckedChange={() => handleCheckboxChange('name')}
                    />
                    <Label htmlFor="encrypt-name">Author Names</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="encrypt-email"
                      checked={encryptionOptions.email}
                      onCheckedChange={() => handleCheckboxChange('email')}
                    />
                    <Label htmlFor="encrypt-email">Email Addresses</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="encrypt-affiliation"
                      checked={encryptionOptions.affiliation}
                      onCheckedChange={() => handleCheckboxChange('affiliation')}
                    />
                    <Label htmlFor="encrypt-affiliation">University/Affiliation</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="encrypt-title"
                      checked={encryptionOptions.title}
                      onCheckedChange={() => handleCheckboxChange('title')}
                    />
                    <Label htmlFor="encrypt-title">Article Title</Label>
                  </div>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="encrypt-address"
                      checked={encryptionOptions.address}
                      onCheckedChange={() => handleCheckboxChange('address')}
                    />
                    <Label htmlFor="encrypt-address">Addresses</Label>
                  </div>
                </div>
              </div>

              {error && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertTitle>Error</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {processingError && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertTitle>Processing Error</AlertTitle>
                  <AlertDescription>{processingError}</AlertDescription>
                </Alert>
              )}

              {result && (
                <Alert className="bg-green-50 border-green-200">
                  <Check className="h-4 w-4 text-green-600" />
                  <AlertTitle>Processing Complete</AlertTitle>
                  <AlertDescription className="space-y-2">
                    <p>Successfully processed PDF</p>
                    <p>Download: <a href={result.download_url} className="text-blue-600 underline">Download Anonymized PDF</a></p>

                    <div className="mt-2">
                      <h4 className="font-medium">Sensitive data found and encrypted:</h4>
                      <ul className="list-disc pl-5 mt-1">
                        {result.sensitiveDataFound?.name &&
                          <li>Author names: {result.encryptedItems.filter((item: any) => item.name).length} found</li>}
                        {result.sensitiveDataFound?.email &&
                          <li>Email addresses: {result.encryptedItems.filter((item: any) => item.email).length} found</li>}
                        {result.sensitiveDataFound?.affiliation &&
                          <li>Institutional affiliations: {result.encryptedItems.filter((item: any) => item.affiliation).length} found</li>}
                        {result.sensitiveDataFound?.title && <li>Article title</li>}
                        {result.sensitiveDataFound?.address && <li>Address information</li>}
                        {!result.sensitiveDataFound?.name &&
                          !result.sensitiveDataFound?.email &&
                          !result.sensitiveDataFound?.affiliation &&
                          !result.sensitiveDataFound?.title &&
                          !result.sensitiveDataFound?.address &&
                          <li>No sensitive data found</li>}
                      </ul>
                    </div>
                  </AlertDescription>
                </Alert>
              )}

              {result && result.mapping && result.mapping.encrypted_data && (
                <div className="mt-4">
                  <h4 className="font-medium">Encrypted Data:</h4>
                  <div className="bg-gray-50 p-3 rounded border mt-2 max-h-60 overflow-auto">
                    {result.mapping.encrypted_data.map((item : any, index : any) => {
                      const dataType = Object.keys(item)[0];
                      const data = item[dataType];
                      return (
                        <div key={index} className="mb-2 p-2 border-b">
                          <div className="flex justify-between">
                            <span className="font-semibold capitalize">{dataType}:</span>
                            <span className="text-xs bg-gray-200 px-2 py-1 rounded">
                              {data.algorithm || "AES-256-CBC"}
                            </span>
                          </div>
                          <div className="mt-1">
                            <span className="text-xs">Original: </span>
                            <code className="bg-green-100 px-1 py-0.5 rounded text-xs">{data.original}</code>
                          </div>
                          <div className="mt-1">
                            <span className="text-xs">Encrypted: </span>
                            <code className="bg-gray-100 px-1 py-0.5 rounded text-xs break-all">{data.encrypted}</code>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          </div>
        </CardContent>
        <CardFooter>
          <Button
            onClick={handleProcess}
            disabled={!selectedFilename || loading}
            className="w-full"
          >
            {loading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Processing...
              </>
            ) : (
              <>
                <FileText className="mr-2 h-4 w-4" />
                Process PDF
              </>
            )}
          </Button>
        </CardFooter>
      </Card>
    </main>
  );
}

------------ app\reviewer\page.tsx ------------
"use client"

import { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";

// Updated reviewer profiles with multiple fields of interest
const reviewerProfiles = [
  {
    name: "Dr. Jane Smith",
    email: "jane.smith@university.edu",
    fieldsOfInterest: ["Artificial Intelligence and Machine Learning", "Big Data and Data Analytics"],
    department: "Computer Science",
    institution: "University of Technology"
  },
  {
    name: "Prof. John Davis",
    email: "j.davis@research.org",
    fieldsOfInterest: ["Artificial Intelligence and Machine Learning", "Networking and Distributed Systems"],
    department: "Information Sciences",
    institution: "Research Institute"
  },
  {
    name: "Dr. Sarah Chen",
    email: "schen@institute.ac",
    fieldsOfInterest: ["Human-Computer Interaction", "Big Data and Data Analytics"],
    department: "Electrical Engineering",
    institution: "Global Institute of Technology"
  },
  {
    name: "Prof. Michael Johnson",
    email: "mjohnson@tech.edu",
    fieldsOfInterest: ["Human-Computer Interaction", "Networking and Distributed Systems"],
    department: "Mechanical Engineering",
    institution: "Tech University"
  },
  {
    name: "Dr. Emily White",
    email: "e.white@science.org",
    fieldsOfInterest: ["Cybersecurity", "Networking and Distributed Systems"],
    department: "Digital Sciences",
    institution: "Science Academy"
  }
];

export default function ReviewerPage() {
  interface Paper {
    trackingNumber: string;
    filePath: string;
    category: string;
  }

  const [availableFiles, setAvailableFiles] = useState<Paper[]>([]);
  const [filteredFiles, setFilteredFiles] = useState<Paper[]>([]);
  const [selectedPdf, setSelectedPdf] = useState("");
  const [reviewText, setReviewText] = useState("");
  const [reviewScore, setReviewScore] = useState(0);
  const [reviewerEmail, setReviewerEmail] = useState("");
  const [reviewerName, setReviewerName] = useState("");
  const [selectedProfile, setSelectedProfile] = useState("");
  const [loadingFiles, setLoadingFiles] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch available PDFs when the component mounts
  useEffect(() => {
    const fetchAvailableFiles = async () => {
      try {
        const response = await fetch("/api/list-processed");
        if (!response.ok) {
          throw new Error("Failed to fetch PDF list");
        }
        const data = await response.json();
        console.log("Available PDFs:", data.files);
        setAvailableFiles(data.files || []);
        setFilteredFiles(data.files || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : "Failed to load PDF files");
      } finally {
        setLoadingFiles(false);
      }
    };

    fetchAvailableFiles();
  }, []);

  // Handle profile selection with enhanced filtering
  const handleProfileChange = (profileName: string) => {
    setSelectedProfile(profileName);

    if (profileName === "none") {
      // Reset form if no profile selected
      setReviewerName("");
      setReviewerEmail("");
      setFilteredFiles(availableFiles);

      // Log the profile deselection event
      try {
        fetch('/api/logs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'Profile Deselected',
            actor: 'User', // Replace with actual user identifier if available
            target: 'None',
          }),
        });
      } catch (err) {
        console.error('Failed to log profile deselection:', err);
      }

      return;
    }

    // Find the selected profile
    const profile = reviewerProfiles.find(p => p.name === profileName);

    if (profile) {
      // Set reviewer information
      setReviewerName(profile.name);
      setReviewerEmail(profile.email);

      // Filter files based on ANY field of interest in the profile
      const filtered = availableFiles.filter(file =>
        profile.fieldsOfInterest.some(field =>
          file.category.toLowerCase().includes(field.toLowerCase())
        )
      );

      setFilteredFiles(filtered);

      // Reset selected PDF if it's not in the filtered list
      if (filtered.length > 0 && !filtered.some(f => f.filePath === selectedPdf)) {
        setSelectedPdf("");
      }

      // Log the profile selection event
      try {
        fetch('/api/logs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'Profile Selected',
            actor: profile.email,
            target: profile.name,
          }),
        });
      } catch (err) {
        console.error('Failed to log profile selection:', err);
      }
    }
  };

  const handleSubmit = async () => {
    if (!selectedPdf) {
      alert("Please select a PDF file.");
      return;
    }

    const reviewData = {
      pdf_filename: selectedPdf,
      review_text: reviewText,
      review_score: reviewScore,
      review_date: new Date().toISOString(), // Automatically set the current date
      reviewer_email: reviewerEmail,
      reviewer_name: reviewerName,
    };

    try {
      const response = await fetch("/api/py/review", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(reviewData),
      });

      if (response.ok) {
        alert("Review submitted successfully!");

        // Log the review submission event
        try {
          fetch('/api/logs', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'Review Submitted',
              actor: reviewerEmail,
              target: selectedPdf,
            }),
          });
        } catch (err) {
          console.error('Failed to log review submission:', err);
        }

        try {
          const selectedFile = availableFiles.find(file => file.filePath === selectedPdf);
          if (selectedFile) {
            await fetch("/api/review", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                trackingNumber: selectedFile.trackingNumber,
                review: reviewData,
                reviewerProfile: selectedProfile,
                reviewScore: reviewScore
              }),
            });
          } else {
            console.error("Selected PDF does not match any available files.");
          }
        } catch (error) {
          console.log(error);
        }
      } else {
        alert("Failed to submit review.");
      }
    } catch (error) {
      console.error("Error submitting review:", error);
      alert("An error occurred while submitting the review.");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <CardTitle>Reviewer Panel</CardTitle>
          <CardDescription>Evaluate the assigned papers.</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Enhanced Profile Selector */}
            <div>
              <Label htmlFor="profile-selection">Select Reviewer Profile</Label>
              <Select value={selectedProfile} onValueChange={handleProfileChange}>
                <SelectTrigger id="profile-selection">
                  <SelectValue placeholder="Select your profile" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">No profile (show all papers)</SelectItem>
                  {reviewerProfiles.map(profile => (
                    <SelectItem key={profile.email} value={profile.name} className="p-2">
                      <div className="flex flex-col gap-1">
                        <div className="font-medium">{profile.name}</div>
                        <div className="text-xs text-gray-500">{profile.department}, {profile.institution}</div>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {profile.fieldsOfInterest.map(field => (
                            <Badge key={field} variant="outline" className="text-xs py-0">
                              {field}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Display Selected Profile Information */}
            {selectedProfile && selectedProfile !== "none" && (
              <div className="bg-gray-100 p-3 rounded-md">
                <h3 className="font-medium">{reviewerName}</h3>
                <p className="text-sm text-gray-600">{reviewerEmail}</p>
                {reviewerProfiles.find(p => p.name === selectedProfile)?.fieldsOfInterest && (
                  <div className="flex flex-wrap gap-1 mt-2">
                    {reviewerProfiles.find(p => p.name === selectedProfile)?.fieldsOfInterest.map(field => (
                      <Badge key={field} variant="secondary" className="text-xs">
                        {field}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
            )}

            <h2 className="text-xl font-semibold">Paper Title</h2>
            <p className="text-gray-600">Anonymized content of the paper...</p>

            {/* PDF Selection */}
            <div>
              <Label htmlFor="pdf-selection">Select PDF</Label>
              {loadingFiles ? (
                <p>Loading PDFs...</p>
              ) : error ? (
                <p className="text-red-500">{error}</p>
              ) : (
                <Select value={selectedPdf} onValueChange={setSelectedPdf}>
                  <SelectTrigger id="pdf-selection">
                    <SelectValue placeholder="Select a PDF" />
                  </SelectTrigger>
                  <SelectContent>
                    {filteredFiles.length === 0 ? (
                      <SelectItem value="no-files-available">No matching PDFs available</SelectItem>
                    ) : (
                      filteredFiles.map(file => (
                        <SelectItem key={file.filePath} value={file.filePath}>
                          {file.filePath} ({file.category})
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
              )}
            </div>

            {/* Review Text */}
            <div>
              <Label htmlFor="review-text">Review Comments</Label>
              <Textarea
                id="review-text"
                placeholder="Enter your review comments..."
                value={reviewText}
                onChange={(e) => setReviewText(e.target.value)}
              />
            </div>

            {/* Review Score */}
            <div>
              <Label htmlFor="review-score">Review Score</Label>
              <Input
                id="review-score"
                type="number"
                step="0.1"
                placeholder="Enter review score (e.g., 4.5)"
                value={reviewScore}
                onChange={(e) => setReviewScore(parseFloat(e.target.value))}
              />
            </div>

            {/* Reviewer Email - Auto-filled and locked from profile */}
            <div>
              <Label htmlFor="reviewer-email">Reviewer Email</Label>
              <Input
                id="reviewer-email"
                type="email"
                placeholder="Enter your email"
                value={reviewerEmail}
                onChange={(e) => setReviewerEmail(e.target.value)}
                disabled={selectedProfile !== "" && selectedProfile !== "none"}
                readOnly={selectedProfile !== "" && selectedProfile !== "none"}
                className={selectedProfile !== "" && selectedProfile !== "none" ? "bg-gray-100" : ""}
              />
            </div>

            {/* Reviewer Name - Auto-filled and locked from profile */}
            <div>
              <Input
                id="reviewer-name"
                placeholder="Enter your name"
                value={reviewerName}
                onChange={(e) => setReviewerName(e.target.value)}
                disabled={selectedProfile !== "" && selectedProfile !== "none"}
                readOnly={selectedProfile !== "" && selectedProfile !== "none"}
                className={selectedProfile !== "" && selectedProfile !== "none" ? "bg-gray-100" : ""}
              />
            </div>

            {/* Submit Button */}
            <Button onClick={handleSubmit}>Submit Review</Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

------------ app\track\page.tsx ------------
"use client"
import { TrackSection } from "@/components/track-section";
import { useState } from "react";


export default function TrackPage() {
    const [trackingNumber, setTrackingNumber] = useState("");

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
            <TrackSection 
                trackingNumber={trackingNumber}
                setTrackingNumber={setTrackingNumber}
            />
        </div>
    );
}


------------ components\chat-section.tsx ------------
"use client"
import React, { useEffect, useRef, useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { CardContent, CardFooter } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";

interface Message {
  id: number;
  sender: string;
  receiver: string;
  message: string;
  createdAt: string;
}

interface ChatSectionProps {
  email?: string;
  trackingNumber?: string;
}

export function ChatSection({ email: initialEmail, trackingNumber }: ChatSectionProps) {
  const [email, setEmail] = useState(initialEmail || "");
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [isEmailModalOpen, setIsEmailModalOpen] = useState(!initialEmail);
  const [emailError, setEmailError] = useState("");
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Validate email
  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  // Scroll to bottom of chat when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Fetch messages when email is set
  useEffect(() => {
    const fetchMessages = async () => {
      if (!email) return;

      try {
        const response = await fetch(`/api/messages?user=${email}`);
        const data = await response.json();
        setMessages(data);
      } catch (error) {
        console.error('Error fetching messages:', error);
      }
    };

    fetchMessages();
  }, [email]);

  // Handle email submission
  const handleEmailSubmit = () => {
    if (!validateEmail(email)) {
      setEmailError("Please enter a valid email address");
      return;
    }

    setEmailError("");
    setIsEmailModalOpen(false);
  };

  const sendMessage = async (e?: React.FormEvent) => {
    e?.preventDefault();

    if (inputValue.trim()) {
      try {
        const response = await fetch('/api/messages', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            sender: email, 
            receiver: 'support', 
            message: inputValue 
          }),
        });

        if (response.ok) {
          const newMessage = await response.json();
          setMessages(prev => [...prev, newMessage]);
          setInputValue("");
        } else {
          console.error('Failed to send message');
        }
      } catch (error) {
        console.error('Error sending message:', error);
      }
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <>
      {/* Email Input Modal */}
      {!initialEmail && (
        <Dialog open={isEmailModalOpen} onOpenChange={setIsEmailModalOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Enter Your Email</DialogTitle>
              <DialogDescription>
                Please provide your email to start the chat
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Enter your email"
                />
                {emailError && (
                  <p className="text-red-500 text-sm">{emailError}</p>
                )}
              </div>
              <Button 
                onClick={handleEmailSubmit}
                className="w-full"
              >
                Start Chat
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      )}

      <CardContent className="flex flex-col h-[400px]">
        <ScrollArea className="flex-1 p-4 border rounded-md mb-4">
          {messages.length === 0 ? (
            <div className="h-full flex items-center justify-center text-gray-400">
              No messages yet. Start the conversation!
            </div>
          ) : (
            <div className="space-y-4">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`flex ${msg.sender === email ? "justify-end" : "justify-start"}`}
                >
                  <div className={`flex items-start max-w-[80%] ${msg.sender === email ? "flex-row-reverse" : ""}`}>
                    <Avatar className={`${msg.sender === email ? "ml-2" : "mr-2"} h-8 w-8`}>
                      <AvatarFallback>
                        {msg.sender === email ? "U" : "S"}
                      </AvatarFallback>
                    </Avatar>
                    <div className={`p-3 rounded-lg ${msg.sender === email
                        ? "bg-blue-500 text-white rounded-tr-none"
                        : "bg-gray-200 text-gray-800 rounded-tl-none"
                      }`}>
                      {msg.message}
                      <div className="text-xs mt-1 opacity-50 text-right">
                        {new Date(msg.createdAt).toLocaleString()}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          )}
        </ScrollArea>

        <form 
          onSubmit={sendMessage} 
          className="flex space-x-2"
        >
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Type a message..."
            disabled={!email}
          />
          <Button
            type="submit"
            disabled={!inputValue.trim() || !email}
          >
            Send
          </Button>
        </form>
      </CardContent>

      <CardFooter className="text-sm text-gray-500">
        <div className="flex items-center">
          <div className="h-2 w-2 rounded-full bg-green-500 mr-2"></div>
          {email ? `Connected as ${email}` : "Not connected"}
        </div>

        {trackingNumber && (
          <div className="ml-auto">
            Tracking number: <span className="font-medium">{trackingNumber}</span>
          </div>
        )}
      </CardFooter>
    </>
  );
}

------------ components\ChatComponent.tsx ------------
"use client";

import { useEffect, useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, SendIcon } from "lucide-react";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";

interface Message {
  id: number;
  sender: string;
  receiver: string;
  message: string;
  createdAt: string;
}

export default function ChatComponent() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [loading, setLoading] = useState(false);
  const [selectedUser, setSelectedUser] = useState("");
  const [users, setUsers] = useState<string[]>([]);

  // Manager's fixed email
  const MANAGER_EMAIL = "manager@mng.com";

  // Fetch unique senders (users) who have sent messages
  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await fetch("/api/messages/users");
        const data = await response.json();
        setUsers(data.filter((user: string) => user !== MANAGER_EMAIL));
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };

    fetchUsers();
  }, []);

  // Fetch messages for selected user
  useEffect(() => {
    const fetchMessages = async () => {
      if (!selectedUser) return;

      try {
        setLoading(true);
        const response = await fetch(`/api/messages?user=${selectedUser}`);
        const data = await response.json();
        setMessages(data);
      } catch (error) {
        console.error("Error fetching messages:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchMessages();
  }, [selectedUser]);

  const sendMessage = async () => {
    if (inputValue.trim() && selectedUser) {
      try {
        setLoading(true);
        const response = await fetch("/api/messages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ 
            sender: MANAGER_EMAIL, 
            receiver: selectedUser, 
            message: inputValue 
          }),
        });

        if (response.ok) {
          const newMessage = await response.json();
          setMessages((prev) => [...prev, newMessage]);
          setInputValue("");
        } else {
          console.error("Error sending message:", await response.text());
        }
      } catch (error) {
        console.error("Error sending message:", error);
      } finally {
        setLoading(false);
      }
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      sendMessage();
    }
  };

  return (
    <Card className="w-full max-w-4xl mx-auto h-[80vh] flex flex-col">
      <CardHeader>
        <CardTitle>Support Chat Management</CardTitle>
        <CardDescription>
          Select a user to chat with and send messages
        </CardDescription>
      </CardHeader>

      {/* User Selection Dropdown */}
      <CardContent className="pb-0">
        <Select 
          value={selectedUser} 
          onValueChange={setSelectedUser}
        >
          <SelectTrigger>
            <SelectValue placeholder="Select a user to chat" />
          </SelectTrigger>
          <SelectContent>
            {users.map((user) => (
              <SelectItem key={user} value={user}>
                {user}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </CardContent>

      <CardContent className="flex-1 overflow-hidden">
        <ScrollArea className="h-full p-4 border rounded-md">
          {loading ? (
            <div className="flex items-center justify-center h-full">
              <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
            </div>
          ) : !selectedUser ? (
            <div className="flex items-center justify-center h-full text-muted-foreground">
              Please select a user to view messages
            </div>
          ) : messages.length === 0 ? (
            <div className="flex items-center justify-center h-full text-muted-foreground">
              No messages yet. Start a conversation!
            </div>
          ) : (
            <div className="space-y-4">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`flex ${msg.sender === MANAGER_EMAIL ? "justify-end" : "justify-start"}`}
                >
                  <div className={`max-w-[80%] p-3 rounded-lg ${
                    msg.sender === MANAGER_EMAIL
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-800"
                  }`}>
                    <div className="text-xs mb-1 opacity-75">
                      {msg.sender}
                    </div>
                    {msg.message}
                    <div className="text-xs mt-1 opacity-50 text-right">
                      {new Date(msg.createdAt).toLocaleString()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </ScrollArea>
      </CardContent>

      <CardFooter>
        <div className="flex w-full space-x-2">
          <Input
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Type a message..."
            disabled={loading || !selectedUser}
          />
          <Button 
            onClick={sendMessage} 
            disabled={loading || !inputValue.trim() || !selectedUser}
          >
            {loading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <SendIcon className="h-4 w-4" />
            )}
            <span className="ml-2">Send</span>
          </Button>
        </div>
      </CardFooter>
    </Card>
  );
}

------------ components\file-upload.tsx ------------
// components/file-upload.tsx
'use client';
import { useEffect, useRef } from 'react';
import { FilePond, registerPlugin } from 'react-filepond';
import 'filepond/dist/filepond.min.css';
import FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';

// Register plugins
registerPlugin(FilePondPluginFileValidateType);

interface FileUploadProps {
  isSubmitting: boolean;
  onFileChange: (file: any) => void;
}

export default function FileUpload({ isSubmitting, onFileChange }: FileUploadProps) {
  const pondRef = useRef<FilePond>(null);

  // When isSubmitting changes to true, process the file
  useEffect(() => {
    if (isSubmitting && pondRef.current) {
      // This will trigger the upload process
      const pond = pondRef.current;
      const files = pond.getFiles();
      
      if (files.length > 0) {
        // We're manually handling the upload in the parent component
        onFileChange(files[0].file);
      }
    }
  }, [isSubmitting, onFileChange]);

  return (
    <FilePond
      ref={pondRef}
      allowMultiple={false}
      maxFiles={1}
      acceptedFileTypes={['application/pdf']}
      labelIdle='Drag & Drop your PDF or <span class="filepond--label-action">Browse</span>'
      onupdatefiles={(files) => {
        if (files.length > 0) {
          onFileChange(files[0].file);
        } else {
          onFileChange(null);
        }
      }}
      // Disabled server configuration since we're handling the upload in the parent
    />
  );
}

------------ components\PdfAnonymizerComponent.tsx ------------
"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, FileText, Check, AlertTriangle } from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";

export default function PdfAnonymizerComponent() {

  interface Paper {
    trackingNumber: string;
    filePath: string;
    category: string;
  }
  const [availableFiles, setAvailableFiles] = useState<Paper[]>([]);
  const [selectedFilename, setSelectedFilename] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const [loadingFiles, setLoadingFiles] = useState(true);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const [processingError, setProcessingError] = useState<string | null>(null);

  // Encryption options state
  const [encryptionOptions, setEncryptionOptions] = useState({
    name: true,
    email: true,
    affiliation: true,
    title: false,
    address: false
  });

  // Fetch available PDFs when component mounts
  useEffect(() => {
    const fetchAvailableFiles = async () => {
      try {
        const response = await fetch('/api/list-pdfs');
        if (!response.ok) {
          throw new Error('Failed to fetch PDF list');
        }
        const data = await response.json();
        setAvailableFiles(data.files || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load PDF files');
      } finally {
        setLoadingFiles(false);
      }
    };

    fetchAvailableFiles();
  }, []);

  // Handle file selection
  const handleFileSelection = async (filename: string) => {
    setSelectedFilename(filename);
    setError(null);
    setProcessingError(null);
    setResult(null);

    // Log the file selection event
    try {
      await fetch('/api/logs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'File Selection',
          actor: 'User', // Replace with actual user identifier if available
          target: filename,
        }),
      });
    } catch (err) {
      console.error('Failed to log file selection:', err);
    }
  };

  // Handle checkbox changes
  const handleCheckboxChange = (option: string) => {
    setEncryptionOptions(prev => ({
      ...prev,
      [option]: !prev[option as keyof typeof prev]
    }));
  };

  // Process the selected file
  const handleProcess = async () => {
    if (!selectedFilename) {
      setError('Please select a PDF file first');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      setProcessingError(null);
      setResult(null);

      console.log('Processing file:', selectedFilename);
      console.log('Encryption options:', encryptionOptions);

      // Log the start of the processing event
      try {
        await fetch('/api/logs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'PDF Processing Started',
            actor: 'User', // Replace with actual user identifier if available
            target: selectedFilename,
          }),
        });
      } catch (err) {
        console.error('Failed to log processing start:', err);
      }

      const processResponse = await fetch('/api/py/process-pdf', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          filename: selectedFilename,
          encryptionOptions
        }),
      });

      if (!processResponse.ok) {
        const processError = await processResponse.json();
        setProcessingError(processError.error || 'Failed to process file');
        console.error('Processing error details:', processError.details);

        // Log the processing failure
        try {
          await fetch('/api/logs', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'PDF Processing Failed',
              actor: 'User', // Replace with actual user identifier if available
              target: selectedFilename,
            }),
          });
        } catch (err) {
          console.error('Failed to log processing failure:', err);
        }

        return;
      }

      const processResult = await processResponse.json();
      console.log('File processed successfully:', processResult);

      // Log the successful processing event
      try {
        await fetch('/api/logs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'PDF Processing Completed',
            actor: 'User', // Replace with actual user identifier if available
            target: selectedFilename,
          }),
        });
      } catch (err) {
        console.error('Failed to log processing success:', err);
      }

      console.log(processResult.mapping.encrypted_data);

      // Save the encrypted data to the database
      // try {
      //   await fetch('/api/saveData', {
      //     method: 'POST',
      //     headers: {
      //       'Content-Type': 'application/json',
      //     },
      //     body: JSON.stringify({
      //       inputData: processResult.mapping.encrypted_data,
      //       trackingNumber: processResult.trackingNumber,
      //     }),
      //   });

      // } catch (error) {
      //   console.error('Error saving data:', error);
      //   setError('Failed to save encrypted data');
      // }


      // Transform the result to include the mapping data which shows what was encrypted
      const transformedResult = {
        ...processResult,
        sensitiveDataFound: processResult.mapping.sensitive_data_found,
        authorCount: processResult.mapping.encrypted_data.filter((item: any) => item.name).length,
        encryptedItems: processResult.mapping.encrypted_data,
        totalReplacements: processResult.mapping.total_replacements
      };

      try { // process pdf by passing tracking number
        const selectedPaper = availableFiles.find(file => file.filePath === selectedFilename);
        if (!selectedPaper) {
          throw new Error('Selected file not found in available files');
        }

        await fetch('/api/process-pdf', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            trackingNumber: selectedPaper.trackingNumber,
          }),
        });
      } catch (error) {
        console.error('Error updating paper status:', error);
        setError('Failed to update paper status');
      }

      setResult(transformedResult);
    } catch (err) {
      console.error('Error in process flow:', err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle>Academic PDF Anonymizer</CardTitle>
        <CardDescription>
          Select an existing PDF from the server to redact author information and encrypt sensitive data.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid w-full items-center gap-2">
            {/* PDF Selection dropdown */}
            <div className="space-y-2">
              <Label htmlFor="pdf-select">Select PDF from server</Label>
              <Select
                value={selectedFilename}
                onValueChange={handleFileSelection}
                disabled={loadingFiles}
              >
                <SelectTrigger id="pdf-select" className="w-full">
                  <SelectValue placeholder={loadingFiles ? "Loading files..." : "Select a PDF file"} />
                </SelectTrigger>
                <SelectContent>
                  {availableFiles.length === 0 && !loadingFiles ? (
                    <SelectItem value="no-files" disabled>No PDFs available</SelectItem>
                  ) : (
                    availableFiles.map(file => (
                      <SelectItem key={file.filePath} value={file.filePath}>
                        {file.filePath} ({file.category})
                      </SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>
            </div>

            {/* Encryption options */}
            <div className="mt-4 mb-2">
              <h3 className="text-sm font-medium mb-2">Select information to encrypt:</h3>
              <div className="grid grid-cols-2 gap-2">
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="encrypt-name"
                    checked={encryptionOptions.name}
                    onCheckedChange={() => handleCheckboxChange('name')}
                  />
                  <Label htmlFor="encrypt-name">Author Names</Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="encrypt-email"
                    checked={encryptionOptions.email}
                    onCheckedChange={() => handleCheckboxChange('email')}
                  />
                  <Label htmlFor="encrypt-email">Email Addresses</Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="encrypt-affiliation"
                    checked={encryptionOptions.affiliation}
                    onCheckedChange={() => handleCheckboxChange('affiliation')}
                  />
                  <Label htmlFor="encrypt-affiliation">University/Affiliation</Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="encrypt-title"
                    checked={encryptionOptions.title}
                    onCheckedChange={() => handleCheckboxChange('title')}
                  />
                  <Label htmlFor="encrypt-title">Article Title</Label>
                </div>

                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="encrypt-address"
                    checked={encryptionOptions.address}
                    onCheckedChange={() => handleCheckboxChange('address')}
                  />
                  <Label htmlFor="encrypt-address">Addresses</Label>
                </div>
              </div>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            {processingError && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Processing Error</AlertTitle>
                <AlertDescription>{processingError}</AlertDescription>
              </Alert>
            )}

            {result && (
              <Alert className="bg-green-50 border-green-200">
                <Check className="h-4 w-4 text-green-600" />
                <AlertTitle>Processing Complete</AlertTitle>
                <AlertDescription className="space-y-2">
                  <p>Successfully processed PDF</p>
                  <p>Download: <a href={"api/" + result.download_url} className="text-blue-600 underline">Download Anonymized PDF</a></p>

                  <div className="mt-2">
                    <h4 className="font-medium">Sensitive data found and encrypted:</h4>
                    <ul className="list-disc pl-5 mt-1">
                      {result.sensitiveDataFound?.name &&
                        <li>Author names: {result.encryptedItems.filter((item: any) => item.name).length} found</li>}
                      {result.sensitiveDataFound?.email &&
                        <li>Email addresses: {result.encryptedItems.filter((item: any) => item.email).length} found</li>}
                      {result.sensitiveDataFound?.affiliation &&
                        <li>Institutional affiliations: {result.encryptedItems.filter((item: any) => item.affiliation).length} found</li>}
                      {result.sensitiveDataFound?.title && <li>Article title</li>}
                      {result.sensitiveDataFound?.address && <li>Address information</li>}
                      {!result.sensitiveDataFound?.name &&
                        !result.sensitiveDataFound?.email &&
                        !result.sensitiveDataFound?.affiliation &&
                        !result.sensitiveDataFound?.title &&
                        !result.sensitiveDataFound?.address &&
                        <li>No sensitive data found</li>}
                    </ul>
                  </div>
                </AlertDescription>
              </Alert>
            )}

            {result && result.mapping && result.mapping.encrypted_data && (
              <div className="mt-4">
                <h4 className="font-medium">Encrypted Data:</h4>
                <ScrollArea className="h-60 border rounded mt-2">
                  <div className="p-3 bg-gray-50">
                    {result.mapping.encrypted_data.map((item: any, index: number) => {
                      const dataType = Object.keys(item)[0];
                      const data = item[dataType];
                      return (
                        <div key={index} className="mb-2 p-2 border-b last:border-b-0">
                          <div className="flex justify-between">
                            <span className="font-semibold capitalize">{dataType}:</span>
                            <span className="text-xs bg-gray-200 px-2 py-1 rounded">
                              {data.algorithm || "AES-256-CBC"}
                            </span>
                          </div>
                          <div className="mt-1">
                            <span className="text-xs">Original: </span>
                            <code className="bg-green-100 px-1 py-0.5 rounded text-xs">{data.original}</code>
                          </div>
                          <div className="mt-1">
                            <span className="text-xs">Encrypted: </span>
                            <code className="bg-gray-100 px-1 py-0.5 rounded text-xs break-all">{data.encrypted}</code>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </ScrollArea>
              </div>
            )}
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          onClick={handleProcess}
          disabled={!selectedFilename || loading}
          className="w-full"
        >
          {loading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Processing...
            </>
          ) : (
            <>
              <FileText className="mr-2 h-4 w-4" />
              Process PDF
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}

------------ components\PdfDecrypterComponent.tsx ------------
"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, Check, AlertTriangle, Unlock, FileText } from "lucide-react";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Switch } from "@/components/ui/switch";

interface Paper {
  trackingNumber: string;
  filePath: string;
  category: string;
}

interface DecryptedItem {
  encrypted: string;
  decrypted: string;
  method?: string;
  error?: string;
}

interface ProcessResult {
  download_url: string;
  decrypted_items_count: number;
  decrypted_items: Record<string, { encrypted: string, original: string }>[]; // Original format
  decryption_results?: DecryptedItem[]; // New format from backend
}

export default function PdfDecrypterComponent() {
  // State for encrypted files
  const [availableFiles, setAvailableFiles] = useState<Paper[]>([]);
  const [selectedFilename, setSelectedFilename] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const [loadingFiles, setLoadingFiles] = useState<boolean>(true);
  const [result, setResult] = useState<ProcessResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [processingError, setProcessingError] = useState<string | null>(null);

  // New state for replacement option
  const [replaceWithNewPage, setReplaceWithNewPage] = useState<boolean>(true);

  // Fetch available encrypted PDFs when component mounts
  useEffect(() => {
    const fetchAvailableFiles = async () => {
      try {
        // Use the existing API endpoint for reviewed PDFs
        const response = await fetch('/api/list-reviewed');
        if (!response.ok) {
          throw new Error('Failed to fetch PDF list');
        }
        const data = await response.json();
        console.log('Available PDF files:', data.files);

        setAvailableFiles(data.files || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load PDF files');
      } finally {
        setLoadingFiles(false);
      }
    };

    fetchAvailableFiles();
  }, []);

  // Handle file selection
  const handleFileSelection = (filename: string) => {
    setSelectedFilename(filename);
    setError(null);
    setProcessingError(null);
    setResult(null);

    setResult(null);

    // Log the file selection event
    try {
      fetch('/api/logs', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'File Selection for Decryption',
          actor: 'User', // Replace with actual user identifier if available
          target: filename,
        }),
      });
    } catch (err) {
      console.error('Failed to log file selection:', err);
    }
  };

  // Process the selected file for decryption
  const handleDecrypt = async () => {
    if (!selectedFilename) {
      setError('Please select a PDF file first');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      setProcessingError(null);
      setResult(null);

      console.log('Decrypting file:', selectedFilename);

      // Log the start of the decryption process
      try {
        await fetch('/api/logs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'PDF Decryption Started',
            actor: 'User', // Replace with actual user identifier if available
            target: selectedFilename,
          }),
        });
      } catch (err) {
        console.error('Failed to log decryption start:', err);
      }

      let content;
      try {
        const res = await fetch(`/api/upload-pdf`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            filename: ("processed_" + selectedFilename),
          }),
        });
        if (!res.ok) {
          throw new Error('Failed to fetch PDF content');
        }
        content = await res.text();
      } catch (error) {
        console.log('Error fetching PDF content:', error);
        setError('Failed to fetch PDF content');
        setLoading(false);
        return;
      }

      console.log('PDF content:', content);

      // Send to API for decryption with new option to replace pages
      const processResponse = await fetch('/api/py/decrypt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          pdfFileContent: content,
          fileName: ("reviewed_" + selectedFilename),
          replaceWithNewPage: replaceWithNewPage
        }),
      });

      if (!processResponse.ok) {
        const processError = await processResponse.json();
        setProcessingError(processError.error || 'Failed to decrypt file');
        console.error('Decryption error details:', processError.details);

        // Log the decryption failure
        try {
          await fetch('/api/logs', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              action: 'PDF Decryption Failed',
              actor: 'User', // Replace with actual user identifier if available
              target: selectedFilename,
            }),
          });
        } catch (err) {
          console.error('Failed to log decryption failure:', err);
        }

        return;
      }

      const processResult = await processResponse.json();
      console.log('File decrypted successfully:', processResult);

      // Log the successful decryption event
      try {
        await fetch('/api/logs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: 'PDF Decryption Completed',
            actor: 'User', // Replace with actual user identifier if available
            target: selectedFilename,
          }),
        });
      } catch (err) {
        console.error('Failed to log decryption success:', err);
      }

      try { // process pdf by passing tracking number to update its status
        const selectedPaper = availableFiles.find(file => file.filePath === selectedFilename);
        if (!selectedPaper) {
          throw new Error('Selected file not found in available files');
        }

        await fetch(`/api/py/addDecryptedInfo/${selectedFilename}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            decryptionResults: processResult.decryption_results || []
          }),
        });
      } catch (error) {
        console.error('Error updating paper status:', error);
        setError('Failed to update paper status');
      }

      setResult({
        download_url: "/api/pdfs/decrypted/" + ("decrypted_" + selectedFilename),
        decrypted_items_count: processResult.total_decrypted || processResult.decrypted_items_count || 0,
        decrypted_items: processResult.decrypted_items || [],
        decryption_results: processResult.decryption_results || []
      });
    } catch (err) {
      console.error('Error in decryption process:', err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred during decryption');
    } finally {
      setLoading(false);
    }
  };

  // Format the decryption results for display
  const getFormattedResults = () => {
    if (!result) return [];

    // Use new format if available
    if (result.decryption_results && result.decryption_results.length > 0) {
      return result.decryption_results.map((item, index) => ({
        index,
        dataType: 'Data',
        encrypted: item.encrypted,
        original: item.decrypted,
        method: item.method
      }));
    }

    // Fallback to old format
    return (result.decrypted_items || []).map((item, index) => {
      const dataType = Object.keys(item)[0];
      const data = item[dataType];
      return {
        index,
        dataType,
        encrypted: data.encrypted,
        original: data.original
      };
    });
  };

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle>Academic PDF Decrypter</CardTitle>
        <CardDescription>
          Decrypt previously anonymized PDFs to restore author information and sensitive data.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid w-full items-center gap-2">
            {/* PDF Selection dropdown */}
            <div className="space-y-2">
              <Label htmlFor="pdf-select">Select PDF to decrypt</Label>
              <Select
                value={selectedFilename}
                onValueChange={handleFileSelection}
                disabled={loadingFiles}
              >
                <SelectTrigger id="pdf-select" className="w-full">
                  <SelectValue placeholder={loadingFiles ? "Loading files..." : "Select a PDF file"} />
                </SelectTrigger>
                <SelectContent>
                  {availableFiles.length === 0 && !loadingFiles ? (
                    <SelectItem value="no-files" disabled>No PDFs available</SelectItem>
                  ) : (
                    availableFiles.map(file => (
                      <SelectItem key={file.filePath} value={file.filePath}>
                        {file.filePath} ({file.category})
                      </SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>
            </div>

            {/* New option for replacing pages */}
            <div className="flex items-center justify-between space-x-2 mt-4">
              <Label htmlFor="replace-option" className="flex-1">
                Replace encrypted pages with a new summary page
              </Label>
              <Switch
                id="replace-option"
                checked={replaceWithNewPage}
                onCheckedChange={setReplaceWithNewPage}
              />
            </div>
            <p className="text-xs text-muted-foreground">
              When enabled, the decrypted PDF will have a new summary page with all decrypted data
            </p>

            {error && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            {processingError && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Decryption Error</AlertTitle>
                <AlertDescription>{processingError}</AlertDescription>
              </Alert>
            )}

            {result && (
              <Alert className="bg-green-50 border-green-200">
                <Check className="h-4 w-4 text-green-600" />
                <AlertTitle>Decryption Complete</AlertTitle>
                <AlertDescription className="space-y-2">
                  <p>Successfully decrypted PDF</p>
                  <p>Download: <a href={result.download_url} className="text-blue-600 underline">
                    <FileText className="h-4 w-4 inline mr-1" />
                    Download Decrypted PDF
                  </a></p>

                  <div className="mt-2">
                    <h4 className="font-medium">Decryption summary:</h4>
                    <p>Total items decrypted: {result.decrypted_items_count}</p>
                    {replaceWithNewPage && (
                      <p className="text-xs text-muted-foreground mt-1">
                        A new summary page has been added to the PDF with all decrypted information
                      </p>
                    )}
                  </div>
                </AlertDescription>
              </Alert>
            )}

            {result && getFormattedResults().length > 0 && (
              <div className="mt-4">
                <h4 className="font-medium">Decrypted Data:</h4>
                <ScrollArea className="h-60 border rounded mt-2">
                  <div className="p-3 bg-gray-50">
                    {getFormattedResults().map((item: any) => (
                      <div key={item.index} className="mb-2 p-2 border-b last:border-b-0">
                        <div className="flex justify-between">
                          <span className="font-semibold capitalize">{item.dataType}:</span>
                          {item.method && <span className="text-xs bg-blue-100 px-2 py-0.5 rounded">Method: {item.method}</span>}
                        </div>
                        <div className="mt-1">
                          <span className="text-xs">Encrypted: </span>
                          <code className="bg-gray-100 px-1 py-0.5 rounded text-xs break-all">{item.encrypted}</code>
                        </div>
                        <div className="mt-1">
                          <span className="text-xs">Decrypted: </span>
                          <code className="bg-green-100 px-1 py-0.5 rounded text-xs">{item.original}</code>
                        </div>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </div>
            )}
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          onClick={handleDecrypt}
          disabled={!selectedFilename || loading}
          className="w-full"
        >
          {loading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Decrypting...
            </>
          ) : (
            <>
              <Unlock className="mr-2 h-4 w-4" />
              Decrypt PDF
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
}

------------ components\track-section.tsx ------------
"use client"
import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { CardContent, CardFooter } from "@/components/ui/card";
import { CheckCircle, XCircle, Clock, FileText, Mail, User, Calendar, Star } from "lucide-react";
import axios from "axios";

interface TrackSectionProps {
    trackingNumber: string;
    setTrackingNumber: (number: string) => void;
}

interface PaperStatus {
    id: number;
    status: "pending" | "accepted" | "rejected" | "reviewed" | string;
    originalFileName: string;
    submitDate: string;
    reviewDate?: string;
    feedback?: string;
    authorEmail?: string;
    category?: string;
    feedbackScore?: number;
    reviewer?: string;
    filePath?: string;
    trackingNumber?: string;
}

export function TrackSection({ trackingNumber, setTrackingNumber }: TrackSectionProps) {
    const [inputTrackingNumber, setInputTrackingNumber] = useState(trackingNumber);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState("");
    const [paperStatus, setPaperStatus] = useState<PaperStatus | null>(null);

    const handleTrack = async (e: React.FormEvent) => {
        e.preventDefault();
        setError("");

        if (!inputTrackingNumber.trim()) {
            setError("Please enter a tracking number");
            return;
        }

        setIsLoading(true);

        try {
            const response = await axios.get('/api/paperStatus', {
                params: { trackingNumber: inputTrackingNumber }
            });
            console.log('Paper:', response.data);
            setPaperStatus(response.data.paper);
            setTrackingNumber(inputTrackingNumber);
        } catch (error: any) {
            console.error("Tracking error:", error);
            setError(error.response?.data?.error || "Failed to retrieve paper status. Please try again.");
        } finally {
            setIsLoading(false);
        }
    };

    const getStatusIcon = (status: string) => {
        switch (status) {
            case "accepted":
                return <CheckCircle className="h-8 w-8 text-green-500" />;
            case "rejected":
                return <XCircle className="h-8 w-8 text-red-500" />;
            case "reviewed":
                return <FileText className="h-8 w-8 text-blue-500" />;
            default:
                return <Clock className="h-8 w-8 text-amber-500" />;
        }
    };

    const getStatusColor = (status: string) => {
        switch (status) {
            case "accepted":
                return "bg-green-50 border-green-200";
            case "rejected":
                return "bg-red-50 border-red-200";
            case "reviewed":
                return "bg-blue-50 border-blue-200";
            default:
                return "bg-amber-50 border-amber-200";
        }
    };

    // Format date to be more readable
    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        return date.toLocaleString();
    };

    return (
        <>
            <CardContent>
                <form onSubmit={handleTrack} className="space-y-4">
                    <div className="flex space-x-2">
                        <Input
                            placeholder="Enter tracking number"
                            value={inputTrackingNumber}
                            onChange={(e) => setInputTrackingNumber(e.target.value)}
                            required
                            disabled={isLoading}
                        />
                        <Button
                            type="submit"
                            disabled={isLoading || !inputTrackingNumber.trim()}
                        >
                            {isLoading ? "Checking..." : "Check Status"}
                        </Button>
                    </div>

                    {error && (
                        <div className="p-3 bg-red-100 text-red-800 rounded-md">
                            {error}
                        </div>
                    )}

                    {paperStatus && (
                        <div className={`p-4 border rounded-md mt-4 ${getStatusColor(paperStatus.status)}`}>
                            <div className="flex items-start">
                                {getStatusIcon(paperStatus.status)}
                                <div className="ml-4 flex-1">
                                    <h3 className="font-medium text-lg">
                                        {paperStatus.originalFileName}
                                    </h3>
                                    <div className="mt-2 space-y-2">
                                        <div className="text-sm flex items-center">
                                            <span className="font-medium mr-2">Status:</span> 
                                            {paperStatus.status ? paperStatus.status.charAt(0).toUpperCase() + paperStatus.status.slice(1) : "Unknown"}
                                        </div>
                                        
                                        {paperStatus.category && (
                                            <div className="text-sm">
                                                <span className="font-medium">Category:</span> {paperStatus.category}
                                            </div>
                                        )}
                                        
                                        {paperStatus.authorEmail && (
                                            <div className="text-sm flex items-center">
                                                <Mail className="h-4 w-4 mr-1" />
                                                <span className="font-medium mr-1">Author Email:</span> {paperStatus.authorEmail}
                                            </div>
                                        )}
                                        
                                        <div className="text-sm flex items-center">
                                            <Calendar className="h-4 w-4 mr-1" />
                                            <span className="font-medium mr-1">Submission Date:</span> {formatDate(paperStatus.submitDate)}
                                        </div>
                                        
                                        {paperStatus.reviewDate && (
                                            <div className="text-sm flex items-center">
                                                <Calendar className="h-4 w-4 mr-1" />
                                                <span className="font-medium mr-1">Review Date:</span> {formatDate(paperStatus.reviewDate)}
                                            </div>
                                        )}
                                        
                                        {paperStatus.reviewer && (
                                            <div className="text-sm flex items-center">
                                                <User className="h-4 w-4 mr-1" />
                                                <span className="font-medium mr-1">Reviewer:</span> {paperStatus.reviewer}
                                            </div>
                                        )}
                                        
                                        {paperStatus.trackingNumber && (
                                            <div className="text-sm">
                                                <span className="font-medium">Tracking Number:</span> {paperStatus.trackingNumber}
                                            </div>
                                        )}
                                        
                                        {paperStatus.feedbackScore !== undefined && (
                                            <div className="text-sm flex items-center">
                                                <Star className="h-4 w-4 mr-1" />
                                                <span className="font-medium mr-1">Feedback Score:</span> {paperStatus.feedbackScore}/100
                                            </div>
                                        )}
                                        
                                        {paperStatus.feedback && (
                                            <div className="mt-3 p-3 bg-white bg-opacity-50 rounded text-sm">
                                                <span className="font-medium block mb-1">Feedback:</span>
                                                {paperStatus.feedback}
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </form>
            </CardContent>

            <CardFooter className="text-sm text-gray-500">
                {!paperStatus && !error && (
                    <p>Enter your tracking number to check the status of your paper submission.</p>
                )}
            </CardFooter>
        </>
    );
}

------------ components\ui\alert.tsx ------------
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "text-destructive-foreground [&>svg]:text-current *:data-[slot=alert-description]:text-destructive-foreground/80",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }


------------ components\ui\avatar.tsx ------------
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }


------------ components\ui\badge.tsx ------------
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }


------------ components\ui\button.tsx ------------
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }


------------ components\ui\card.tsx ------------
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn("flex flex-col gap-1.5 px-6", className)}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6", className)}
      {...props}
    />
  )
}

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


------------ components\ui\checkbox.tsx ------------
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }


------------ components\ui\dialog.tsx ------------
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}


------------ components\ui\input.tsx ------------
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


------------ components\ui\label.tsx ------------
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


------------ components\ui\scroll-area.tsx ------------
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="ring-ring/10 dark:ring-ring/20 dark:outline-ring/40 outline-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] focus-visible:ring-4 focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }


------------ components\ui\select.tsx ------------
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}


------------ components\ui\switch.tsx ------------
"use client"

import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }


------------ components\ui\table.tsx ------------
"use client"

import * as React from "react"

import { cn } from "@/lib/utils"

function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-muted-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


------------ components\ui\tabs.tsx ------------
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex flex-1 items-center justify-center gap-1.5 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


------------ components\ui\textarea.tsx ------------
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }


------------ components\upload-section.tsx ------------
// components/upload-section.tsx
"use client"
import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { CardContent, CardFooter } from "@/components/ui/card";
import FileUpload from "@/components/file-upload";
import axios from "axios";

interface UploadSectionProps {
  email: string;
  setEmail: (email: string) => void;
  setTrackingNumber: (number: string) => void;
  onUploadSuccess: () => void;
}

interface CategoryResult {
  pdf_filename: string;
  primary_category: string;
  category_scores: Record<string, number>;
}

export function UploadSection({
  email,
  setEmail,
  setTrackingNumber,
  onUploadSuccess
}: UploadSectionProps) {
  const [file, setFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState<string>("");
  const [error, setError] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [successMessage, setSuccessMessage] = useState("");
  const [categoryResult, setCategoryResult] = useState<CategoryResult | null>(null);
  const [isCategorizing, setIsCategorizing] = useState(false);

  const handleFileChange = (newFile: File | null) => {
    setFile(newFile);
    setFileName(newFile?.name || "");
    setCategoryResult(null); // Reset category result when changing file
  };

  const handleUploadSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setSuccessMessage("");
    setCategoryResult(null);

    if (!email) {
      setError("Please provide your email address.");
      return;
    }

    if (!file) {
      setError("Please select a PDF file to upload.");
      return;
    }

    setIsSubmitting(true);
    setUploadProgress(0);

    try {
      const formData = new FormData();
      formData.append("authorEmail", email);
      formData.append("file", file);
      formData.append("originalFileName", file.name);

      const response = await axios.post("/api/upload", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        onUploadProgress: (progressEvent) => {
          if (progressEvent.total) {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            setUploadProgress(percentCompleted);
          }
        },
      });

      const trackingNum = response.data.trackingNumber;
      setTrackingNumber(trackingNum);
      setSuccessMessage(`Paper uploaded successfully! Your tracking number is: ${trackingNum} `);

      // Log the file upload event
      await axios.post("/api/logs", {
        action: "File Upload",
        actor: email,
        target: file.name,
      });

      // Start categorization
      setIsCategorizing(true);
      // Modified axios request to correctly send the pdf_filename
      try {
        const categorizeData = new FormData();
        categorizeData.append("pdf_filename", response.data.fileName);

        // For debugging
        console.log("Sending pdf_filename:", response.data.fileName);

        const response2 = await axios.post("/api/py/categorize",
          response.data.fileName,  // Send just the filename string
          {
            headers: {
              "Content-Type": "application/json",
            },
          }
        );

        // Log the categorization event
        await axios.post("/api/logs", {
          action: "Categorization",
          actor: email,
          target: response.data.fileName,
        });

        try {
          await axios.post("/api/categorize", {
            trackingNumber: trackingNum,
            category: response2.data.primary_category,
          });
        } catch (error) {
          console.log("Error updating category:", error);
          setError("Failed to update category.");
        }

        console.log("Categorization response:", response2.data);
        setCategoryResult(response2.data);
      } catch (error: any) {
        console.error("Categorization error:", error);
        console.error("Error details:", error.response?.data);
        setError(prev => prev ? `${prev}. Categorization failed.` : "Categorization failed.");
      }
      setIsCategorizing(false);

      onUploadSuccess();
    } catch (error: any) {
      console.error("Upload error:", error);
      setError(error.response?.data?.error || "Failed to upload paper. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Function to render category scores as a bar chart
  const renderCategoryScores = () => {
    if (!categoryResult?.category_scores) return null;

    return (
      <div className="mt-4 space-y-2 w-full">
        <h4 className="font-medium text-sm">Category Analysis:</h4>
        {Object.entries(categoryResult.category_scores)
          .sort(([, scoreA], [, scoreB]) => scoreB - scoreA)
          .map(([category, score]) => (
            <div key={category} className="space-y-1">
              <div className="flex justify-between text-xs">
                <span>{category}</span>
                <span>{score.toFixed(1)}%</span>
              </div>
              <div className="bg-gray-200 rounded-full h-1.5">
                <div
                  className="bg-blue-600 h-1.5 rounded-full"
                  style={{ width: `${score}%` }}
                ></div>
              </div>
            </div>
          ))}
      </div>
    );
  };

  return (
    <>
      <CardContent>
        <form onSubmit={handleUploadSubmit} className="space-y-4">
          <Input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            disabled={isSubmitting}
          />

          <FileUpload
            onFileChange={handleFileChange}
            isSubmitting={isSubmitting}
          />

          {fileName && (
            <div className="text-sm text-gray-600 mt-2 p-2 bg-gray-100 rounded-md">
              Selected file: {fileName}
            </div>
          )}

          {isSubmitting && (
            <div className="w-full">
              <div className="bg-gray-200 rounded-full h-2.5">
                <div
                  className="bg-blue-600 h-2.5 rounded-full"
                  style={{ width: `${uploadProgress}%` }}
                ></div>
              </div>
              <p className="text-sm text-center mt-1">Uploading: {uploadProgress}%</p>
            </div>
          )}

          {isCategorizing && (
            <div className="text-sm text-center mt-1">
              <p>Analyzing document content...</p>
              <div className="mt-2 flex justify-center">
                <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-blue-500"></div>
              </div>
            </div>
          )}

          {error && (
            <div className="p-3 bg-red-100 text-red-800 rounded-md">
              {error}
            </div>
          )}
        </form>
      </CardContent>

      <CardFooter className="flex flex-col items-center">
        <Button
          onClick={handleUploadSubmit}
          disabled={isSubmitting || isCategorizing || !email || !file}
          className="w-full"
        >
          {isSubmitting ? "Uploading..." : "Submit"}
        </Button>

        {successMessage && (
          <div className="mt-4 p-3 bg-green-100 text-green-800 rounded-md w-full">
            {successMessage}

            {categoryResult && (
              <div className="mt-3 border-t pt-3">
                <div className="font-medium mb-2">Document Category:
                  <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-sm">
                    {categoryResult.primary_category}
                  </span>
                </div>
                {renderCategoryScores()}
              </div>
            )}

            <Button
              variant="link"
              className="p-0 h-auto mt-2"
              onClick={onUploadSuccess}
            >
              Need help? Chat with the manager
            </Button>
          </div>
        )}
      </CardFooter>
    </>
  );
}

------------ export-structure.js ------------
// To run the script, run the following command: 
/* 
  node export-structure.js
*/

const { readdirSync, statSync, readFileSync, createWriteStream } = require('fs');
const { join, relative } = require('path');

// Directory to scan
const dir = '.';
// Output file
const outputFile = 'file-structure-with-code.txt';
// Directories to exclude
const excludedDirs = ['.next', '.git', 'node_modules'];
// File extensions to include (configurable)
const includedExtensions = ['.js', '.jsx', '.ts', '.tsx']; // Add or remove extensions as needed

// Function to write the directory structure recursively
function writeStructure(directory, fileStream, prefix = '') {
    const files = readdirSync(directory);
    const totalFiles = files.length;

    files.forEach((file, index) => {
        const filePath = join(directory, file);
        const relativePath = relative('.', filePath);

        if (excludedDirs.some((excluded) => relativePath.includes(excluded))) {
            return; // Skip excluded directories
        }

        const stats = statSync(filePath);
        const isLast = index === totalFiles - 1;
        const newPrefix = prefix + (isLast ? '    ' : '│   ');

        if (stats.isDirectory()) {
            fileStream.write(`${prefix}${isLast ? '└── ' : '├── '}${file} /\n`);
            writeStructure(filePath, fileStream, newPrefix);
        } else {
            fileStream.write(`${prefix}${isLast ? '└── ' : '├── '}${file}\n`);
        }
    });
}

// Function to write file contents
function writeFileContents(directory, fileStream) {
    const files = readdirSync(directory);

    files.forEach((file) => {
        const filePath = join(directory, file);
        const relativePath = relative('.', filePath);

        if (excludedDirs.some((excluded) => relativePath.includes(excluded))) {
            return; // Skip excluded directories
        }

        const stats = statSync(filePath);
        if (stats.isDirectory()) {
            writeFileContents(filePath, fileStream);
        } else if (includedExtensions.some((ext) => file.endsWith(ext))) {
            fileStream.write(`\n------------ ${relativePath} ------------\n`);
            fileStream.write(readFileSync(filePath, 'utf-8') + '\n');
        }
    });
}

// Main function
function exportStructure() {
    const fileStream = createWriteStream(outputFile);

    fileStream.write('File Structure:\n');
    writeStructure(dir, fileStream);
    fileStream.write('\nFile Contents:\n');
    writeFileContents(dir, fileStream);

    fileStream.end(() => console.log(`Done. The file is saved as ${outputFile}`));
}

exportStructure();

------------ lib\crypto.ts ------------
// File: src/lib/crypto.ts
import crypto from 'crypto';

const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'your-secure-encryption-key-min-32-chars';

export function encrypt(text: string): string {
  const iv = crypto.randomBytes(16);
  const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);
  let encrypted = cipher.update(text);
  encrypted = Buffer.concat([encrypted, cipher.final()]);
  return iv.toString('hex') + ':' + encrypted.toString('hex');
}

export function decrypt(text: string): string {
  const textParts = text.split(':');
  const iv = Buffer.from(textParts.shift()!, 'hex');
  const encryptedText = Buffer.from(textParts.join(':'), 'hex');
  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(ENCRYPTION_KEY), iv);
  let decrypted = decipher.update(encryptedText);
  decrypted = Buffer.concat([decrypted, decipher.final()]);
  return decrypted.toString();
}

------------ lib\prisma.ts ------------
// lib/prisma.ts
import { PrismaClient } from "@prisma/client";

const globalForPrisma = global as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

------------ lib\utils.ts ------------
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


------------ next-env.d.ts ------------
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


------------ next.config.ts ------------
import type { NextConfig } from "next";

/** @type {import('next').NextConfig} */
const nextConfig: NextConfig = {
  rewrites: async () => {
    return [
      {
        source: "/api/py/:path*",
        destination:
          process.env.NODE_ENV === "development"
            ? "http://127.0.0.1:8000/api/py/:path*"
            : "/api/",
      },
      {
        source: "/docs",
        destination:
          process.env.NODE_ENV === "development"
            ? "http://127.0.0.1:8000/api/py/docs"
            : "/api/py/docs",
      },
      {
        source: "/openapi.json",
        destination:
          process.env.NODE_ENV === "development"
            ? "http://127.0.0.1:8000/api/py/openapi.json"
            : "/api/py/openapi.json",
      },
    ];
  },
};

export default nextConfig;

